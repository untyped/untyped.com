---
import Footer from "@components/Footer.astro";
---
<!DOCTYPE html>
<html id="untyping" lang="en">
  <head>
    <title>Scala - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">Posts in the &#8216;Scala&#8217; category</h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-11"
              class="post-11 post type-post status-publish format-standard hentry category-code category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">20 Oct 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/10/20/the-circus-is-in-town/"
                      rel="bookmark"
                      title="Permanent Link to The Circus is in Town"
                      >The Circus is in Town</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Following a couple of late caffeinated nights, we are
                      pleased to announce that our latest project, <a
                        href="http://bigtopweb.com/"
                        >Bigtop</a
                      >, is finally set for beta release!
                    </p>
                    <p>
                      Bigtop is a collection of libraries for web developers.
                      Included in the first beta release are:
                    </p>
                    <ul>
                      <li>
                        <a href="http://bigtopweb.com/routes">Bigtop Routes</a
                        > – a library for creating type-safe bidirectional
                        mappings between URLs and Scala code;
                      </li>
                      <li>
                        <a href="http://bigtopweb.com/routes">Bigtop Core</a> –
                        a library for generating and manipulating URLs and
                        hyperlinks in a functional style.
                      </li>
                    </ul>
                    <p>
                      Routes uses the <em>HList</em>-based approach to
                      bidirectional pattern matching that Dave <a
                        href="http://untyped.wpengine.com/2011/10/10/reading-writing-and-the-rest/"
                        >presented</a
                      > at <em>Scala Lift-Off London 2011</em>. There are
                      versions of the library for use with <a
                        href="http://liftweb.net/"
                        >Lift</a
                      >, <a href="https://github.com/scalatra/scalatra"
                        >Scalatra</a
                      >, and plain old Java servlets.
                    </p>
                    <p>
                      Check the <a href="http://bigtopweb.com/">Bigtop</a> web
                      site for a getting started guide, API documentation, and
                      links to the code and Maven repository.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Circus is in Town</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-13"
              class="post-13 post type-post status-publish format-standard hentry category-code category-front-page category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 Oct 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/10/10/reading-writing-and-the-rest/"
                      rel="bookmark"
                      title="Permanent Link to Reading, Writing, and the REST"
                      >Reading, Writing, and the REST</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I’ve just finished preparing the slides for my talk at <a
                        href="http://skillsmatter.com/event/scala/scala-lift-off-london-2011"
                        >Scala Lift-Off London 2011</a
                      > next week. The title of the talk is <em
                        >A Route to the Three ‘R’s: Reading, Writing, and the
                        REST</em
                      >. Here’s the abstract:
                    </p>
                    <blockquote>
                      <p>
                        The mappings between URLs and code form an integral part
                        of any web application. Many web frameworks help map
                        from URLs to code, but the reverse mapping is often
                        neglected, leaving developers to construct URLs via
                        haphazard string manipulation. Furthermore, many
                        frameworks do not match URLs in a type-safe manner.
                      </p>
                      <p>
                        Scala provides all the tools we need to address this
                        problem in a more comprehensive manner. In this talk we
                        will walk through the creation of <a
                          href="http://bigtopweb.com/routes"
                          >Bigtop Routes</a
                        >, a bidirectional mapping library that is both
                        type-safe and developer-friendly. We will pay particular
                        attention to the ways in which Scala language features,
                        such as flexible syntax, implicit conversions, and a
                        touch of type-level programming, help to simplify the
                        task at hand.
                      </p>
                    </blockquote>
                    <p>
                      The slides and code samples are all available from my <a
                        href="https://github.com/davegurnell/scalalol-2011-talk"
                        >Github page</a
                      >. Skills Matter have posted a <a
                        href="http://skillsmatter.com/podcast/scala/reading-writing-rest"
                        >video of the talk</a
                      > on their web site.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Reading, Writing, and the REST</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-19"
              class="post-19 post type-post status-publish format-standard hentry category-code category-fun category-scala"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">27 May 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/05/27/friday-fun-with-scala-syntax/"
                      rel="bookmark"
                      title="Permanent Link to Friday fun with Scala syntax"
                      >Friday fun with Scala syntax</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      It’s Friday – time to kick back and relax with two fun
                      Scala programs we put together for your amusement.
                    </p>
                    <p>
                      Scala has a pretty flexible syntax (although not as
                      flexible as <a
                        href="http://www.ccs.neu.edu/scheme/pubs/scheme2007-ctf.pdf"
                        >Racket’s</a
                      >, of course) that makes it popular amongst proponents
                      of <a href="http://www.scala-lang.org/node/1403">DSLs</a>.
                      Not all DSLs have to be serious, however, as I’m about to
                      prove.
                    </p>
                    <p>
                      First up is Noel’s original concept – proof of his love
                      for DSLs, expressed in purest code:
                    </p>
                    <div>
                      <pre is:raw><code> class A(num: Int) &#123; def Scala = "It's s" + ("o" * num) + " much fun!" &#125; object I &#123; def &lt;(num: Int) = new A(num) &#125; I &lt;3 Scala // ==&gt; "It's sooo much fun!" </code></pre>
                    </div>
                    <p>
                      Second is a simpler work that I call “The Startled
                      Lolcat”:
                    </p>
                    <div>
                      <pre is:raw><code> object O &#123; def o = "What has been seen, cannot be unseen." &#125; O.o // ==&gt; "What has been seen, cannot be unseen."</code></pre>
                      <pre is:raw><code>
</code></pre>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Friday fun with Scala syntax</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-23"
              class="post-23 post type-post status-publish format-standard hentry category-business category-code category-design category-functional-programming category-scala"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 May 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/05/23/the-future-of-voip-phone-configuration-interfaces/"
                      rel="bookmark"
                      title="Permanent Link to The Future of VoIP Phone Configuration Interfaces"
                      >The Future of VoIP Phone Configuration Interfaces</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve recently completed a very fun and interesting job
                      working on a new interface for managing <a
                        href="http://en.wikipedia.org/wiki/Voice_over_IP"
                        >VoIP</a
                      > phone systems. We have a VoIP phone, provided by <a
                        href="http://loho.co.uk/"
                        >Loho</a
                      >, who were also our client for this project. It’s great —
                      we can forward calls to our mobiles, cart the phone around
                      with us (plug it into a network connections and it just
                      works), and it even emails us our voice messages. The only
                      thing not great about our phone is the configuration
                      interface. Luckily, that’s what this project set out to
                      solve.
                    </p>
                    <p>
                      The brief was to implement an elegant online phone
                      configuration system. Alex, Director at Loho, provided the
                      vision. We provided two weeks of development time, which
                      was enough to create a working prototype. Alex has asked
                      us to not give away too many details about the system, but
                      I can show you a few screenshots. First up, here’s the
                      main screen:
                    </p>
                    <p>
                      <a
                        href="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-main-menu-sml.png"
                        ><img
                          fetchpriority="high"
                          decoding="async"
                          title="loho-main-menu-sml"
                          src="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-main-menu-sml.png"
                          alt="The very stylish main menu of the VoIP administration tool we've built for Loho."
                          width="420"
                          height="197"
                      /></a>
                    </p>
                    <p>
                      The very stylish main menu of the VoIP administration tool
                      we&#8217;ve built for Loho.
                    </p>
                    <p>
                      Doesn’t give away much, does it? A bit more interesting is
                      a detail of editing a configuration:
                    </p>
                    <p>
                      <a
                        href="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-editor-sml.png"
                        ><img
                          decoding="async"
                          title="loho-editor-sml"
                          src="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-editor-sml.png"
                          alt="Also very stylish: editing the configuration of a voice menu"
                          width="420"
                          height="366"
                      /></a>
                    </p>
                    <p>
                      Also very stylish: editing the configuration of a voice
                      menu
                    </p>
                    <p>
                      Here I’m editing a voice menu — one of those “Press 1 if
                      you’re interested in giving us all your money” type
                      things.
                    </p>
                    <p>
                      We think we’ve created a very nice system. Loho tell us
                      they were overwhelmed with interest at a recent tradefair,
                      suggesting we’re not alone in our opinion. While the
                      interface is an important aspect of the work, the backend
                      (which I can talk about!) is just as important. The main
                      task was defining a data model to capture the rich feature
                      set that Loho provide. This turned out to be very similar
                      to designing a programming language and its intermediate
                      representation. For example, we use a <a
                        href="http://en.wikipedia.org/wiki/Continuation-passing_style"
                        >continuation-passing style</a
                      > representation to avoid maintaining a stack on the
                      server side. Our representation distinguishes between tail
                      calls and normal function calls to avoid excessive
                      resource consumption on the VoIP side. Relational
                      databases don’t do a very good job of storing recursive
                      datastructures, like the <a
                        href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"
                        >AST</a
                      > of a programming language, so we used Mongo for the data
                      store. In addition to its flexible data model, <a
                        href="http://www.youtube.com/watch?v=b2F-DItXtZs"
                        >Mongo is web scale</a
                      > which has given us an immediate status boost at local
                      programmer meetups.
                    </p>
                    <p>
                      The backend code is implemented in Scala and Lift. There
                      are actually two interfaces to the service. One is the
                      nice interface the users see, and the other is a REST
                      interface that is called by the Asterisk AGI scripts that
                      implement the VoIP functionality. The Asterisk system
                      doesn’t handle all the functionality we represent
                      internally, so the REST interface includes a small
                      interpreter that executes intermediate steps till we
                      arrive at something Asterisk deals with.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/design/" rel="category tag"
                      >Design</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Future of VoIP Phone Configuration
                        Interfaces</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-25"
              class="post-25 post type-post status-publish format-standard hentry category-code category-front-page category-javascript category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/06/javascript-compilation-for-sbt/"
                      rel="bookmark"
                      title="Permanent Link to Javascript compilation for SBT"
                      >Javascript compilation for SBT</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over the weekend I knocked up a little <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >SBT plugin</a
                      > to wrap up the Javascript resources in our <a
                        href="http://liftweb.net/"
                        >Lift</a
                      > projects and deploy them as one big minified file. Read
                      on to find out how it works, then grab yourself a copy and
                      take it for a spin.
                    </p>
                    <p>
                      The plugin scans your <tt>webapps</tt> directory and looks
                      for files with the
                      extensions <tt>.jsm</tt> or <tt>.jsmanifest</tt>. These
                      files, called <em>Javascript Manifests</em>, describe
                      lists of Javascript sources that should be combined into a
                      single file. For example:
                    </p>
                    <pre is:raw>
# You can specify remote files using URLs...

http://code.jquery.com/jquery-1.5.1.js

# ...and local files using regular paths
#    (relative to the location of the manifest):

lib/foo.js
bar.js

# Blank lines and bash-style comments are also supported</pre
                    >
                    <p>
                      Manifest compilation happens in two phases: first, the
                      plugin downloads and caches any remote scripts specified
                      using URLs. Second, it feeds all of the sources (remote
                      and local) into Google’s<a
                        href="http://code.google.com/closure/compiler/"
                        >Closure Compiler</a
                      >, which concatenates them and minifies everything (and
                      provides excellent services like static type checking to
                      boot). The output from the compiler is a <tt>.js</tt> file
                      with the same base name and relative path as the original
                      manifest.
                    </p>
                    <p>
                      There’s not a lot more to it than that. The plugin hooks
                      into SBT’s standard compile and package phases, so your
                      Javascript gets rebuilt automatically alongside your Scala
                      code. If this sounds useful to you, please feel free to
                      grab a copy and take it for a spin. Full details are
                      available in the README on <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >Github</a
                      >.
                    </p>
                    <p>
                      I should point out that there are other useful SBT plugins
                      that do a similar job. For example, I plagiarised
                      extensively from Jon Hoffman’s<a
                        href="https://github.com/hoffrocket/sbt-yui"
                        >YUI Compressor plugin</a
                      > and Luke Amdor’s <a
                        href="https://github.com/rubbish/coffee-script-sbt-plugin"
                        >Coffee Script plugin</a
                      > when writing my code. These two particular examples
                      don’t do file combination, though, and that was an
                      important feature for our specific use case.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Javascript compilation for SBT</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-30"
              class="post-30 post type-post status-publish format-standard hentry category-code category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/02/setting-the-run-mode-in-lift-web-apps/"
                      rel="bookmark"
                      title="Permanent Link to Setting the run.mode in Lift web apps"
                      >Setting the run.mode in Lift web apps</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <strong
                        >Update: You can now set the run mode easy and
                        conveniently using our <a
                          href="https://github.com/untyped/sbt-plugins/tree/master/sbt-runmode"
                          >sbt-runmode</a
                        > plugin for SBT.</strong
                      >
                    </p>
                    <div>
                      <p>
                        Setting the <a
                          href="http://www.assembla.com/wiki/show/liftweb/Run_Modes"
                          ><code>run.mode</code></a
                        > in Lift applications is the source of a surprising
                        number of questions. The documentation recommends
                        passing it as a parameter when the JVM is invoked. This
                        can be hard to achieve for various reasons. In our case
                        our deployment is automated using <a
                          href="http://www.opscode.com/"
                          >Chef</a
                        >, and scripts to start and stop the Jetty web server
                        are installed by the package manager. We don’t really
                        want to monkey around with these scripts, so we had to
                        find another way. Jetty is written in Java, which means
                        it must have a ridiculously complex XML configuration
                        language. The Jetty developers turned it up to 11 by
                        making their configuration language Turing complete, so
                        we can actually set the system properties in a
                        configuration file. The file we want to create
                        is<code>WEB-INF/jetty-web.xml</code> and we want it to
                        contain this:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                &lt;?xml version=&#8221;1.0&#8243;?&gt;
                              </div>
                              <div id="LC2">
                                &lt;!DOCTYPE Configure PUBLIC &#8220;-//Mort Bay
                                Consulting//DTD Configure//EN&#8221;
                                &#8220;http://jetty.mortbay.org/configure.dtd&#8221;&gt;
                              </div>
                              <div id="LC3">
                                &lt;Configure
                                class=&#8221;org.mortbay.jetty.webapp.WebAppContext&#8221;&gt;
                              </div>
                              <div id="LC4">
                                  &lt;Call class=&#8221;java.lang.System&#8221;
                                name=&#8221;setProperty&#8221;&gt;
                              </div>
                              <div id="LC5">
                                    &lt;Arg&gt;run.mode&lt;/Arg&gt;
                              </div>
                              <div id="LC6">
                                    &lt;Arg&gt;production&lt;/Arg&gt;
                              </div>
                              <div id="LC7">  &lt;/Call&gt;</div>
                              <div id="LC8">&lt;/Configure&gt;</div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/c5a9010f6878f41cf1076b0b3ee93560c1aa374a/jetty-web.xml"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_jetty_web.xml"
                              >jetty-web.xml</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        If we leave this around then our application will always
                        run in production mode. We don’t want this when we’re
                        developing as we won’t, for instance, get stack traces
                        printed to the browser. Thus we should copy this file in
                        when we package up the project, and remove it when the
                        packaging step completes. Assuming you’re using SBT,
                        store the above text
                        in <code>project/jetty-web.xml</code> and add the
                        following to your SBT project file to get this
                        functionality:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                  val jettyWebPath = &#8220;src&#8221; /
                                &#8220;main&#8221; / &#8220;webapp&#8221; /
                                &#8220;WEB-INF&#8221; /
                                &#8220;jetty-web.xml&#8221;
                              </div>
                              <div id="LC2"></div>
                              <div id="LC3">
                                  lazy val installProductionRunMode = task &#123;
                              </div>
                              <div id="LC4">
                                    FileUtilities.copyFile(&#8220;project&#8221;
                                / &#8220;jetty-web.xml&#8221;,
                              </div>
                              <div id="LC5">
                                                           jettyWebPath,
                              </div>
                              <div id="LC6">
                                                           log)
                              </div>
                              <div id="LC7">
                                    log.info(&#8220;Copied jetty-web.xml into
                                place&#8221;)
                              </div>
                              <div id="LC8">    None</div>
                              <div id="LC9">
                                  &#125; describedAs(&#8220;Install a jetty-web.xml
                                that sets the run mode to production&#8221;)
                              </div>
                              <div id="LC10"></div>
                              <div id="LC11">
                                  lazy val superPackage = super.packageAction
                                dependsOn(installProductionRunMode)
                              </div>
                              <div id="LC12"></div>
                              <div id="LC13">
                                  lazy val removeProductionRunMode = task &#123;
                              </div>
                              <div id="LC14">
                                    FileUtilities.clean(jettyWebPath, log)
                              </div>
                              <div id="LC15">    None</div>
                              <div id="LC16">
                                  &#125; describedAs(&#8220;Remove jetty-web.xml and
                                hence set run mode back to testing&#8221;)
                              </div>
                              <div id="LC17"></div>
                              <div id="LC18">
                                  override def packageAction =
                                removeProductionRunMode dependsOn(superPackage)
                                describedAs
                                BasicWebScalaProject.PackageWarDescription
                              </div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/b5bb3e118e97dfe443d9b8b26a3fca011c8d25e7/Project.scala"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_project.scala"
                              >Project.scala</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        This is pretty simple code. Basically it redefines
                        the <code>package</code> action to first copy in
                        the <code>jetty-web.xml</code> file, then it runs the
                        original package action, and finally it deletes
                        the <code>jetty-web.xml</code>. Now
                        any <code>WAR</code>files you run under Jetty will
                        automatically be in production mode, but calling<code
                          >sbt jetty-run</code
                        > will still give you development mode.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Setting the run.mode in Lift web apps</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-46"
              class="post-46 post type-post status-publish format-standard hentry category-code category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">1 Dec 2010</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/12/01/file-upload-using-comet-actors/"
                      rel="bookmark"
                      title="Permanent Link to File upload using Comet Actors"
                      >File upload using Comet Actors</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve been using the <a href="http://liftweb.net/">Lift</a
                      > web framework for a lot of web development work
                      recently, and we’re very impressed some of its features.
                      Lift’s Comet support, in particular, is a blessing for the
                      kind of data-crunching back-end web sites we typically get
                      involved in.
                    </p>
                    <p>
                      Importing data from uploaded files, for example,
                      frequently causes trouble. An import can take from a few
                      seconds to a few minutes depending on the size of the file
                      and the complexity of the data processing and validation
                      involved. If the import takes more than a few seconds
                      there is an increasing risk that the web browser will time
                      out. If this happens we fail, because the user won’t know
                      whether the import succeeded or not. Lift’s Comet actors
                      provide a simple way around this problem. But before
                      describing how they work, let’s quickly go over <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)"
                        >Comet</a
                      > and <a href="http://en.wikipedia.org/wiki/Actor_model"
                        >actors</a
                      >.
                    </p>
                    <p>
                      Comet is a way of doing push notifications over HTTP,
                      which on the face of it appears to only support pull.
                      Without the jargon, this means a way of allowing the
                      server to send information to the web browser when that
                      information is ready, not when the web browser checks for
                      it. This gives us a better interface, as the UI can
                      instantly reflect new data, and better resource
                      consumption, as the client doesn’t have to continuously
                      poll the server.
                    </p>
                    <p>
                      There are two or three common ways of <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)#Implementations"
                        >implementing Comet</a
                      >. Lift uses a mechanism called “long polling”, which
                      implements Comet using plain old AJAX. As soon as the web
                      page loads, the web browser sends an XMLHTTP request to
                      the server. Instead of replying immediately the server
                      keeps the connection around until it has information to
                      push back. When information is available, the web server
                      responds to the HTTP request, and the browser processes
                      the response and immediately makes another request.  In
                      other words, long polling uses HTTP’s pull mechanism to
                      simulate push communication. This is all well and good,
                      but it immediately raises two issues: how do we manage a
                      large number of open, but idle, connections without
                      swamping the server, and what programming model do we use
                      to manage the additional complexity of Comet applications.
                    </p>
                    <p>
                      Handing many idle open connections is relatively simple.
                      The traditional model is to use one thread per request,
                      but this doesn’t scale when many requests are idle for
                      long periods. All modern operating systems provide a
                      scalable event notification system, such as <a
                        href="http://en.wikipedia.org/wiki/Epoll"
                        >epoll</a
                      > or <a href="http://en.wikipedia.org/wiki/Kqueue"
                        >kqueue</a
                      >, allowing a single thread to simultaneously monitor many
                      connections for data. The JVM provides access to these
                      systems via the <a
                        href="http://download.oracle.com/javase/6/docs/api/java/nio/channels/Selector.html"
                        >Selector</a
                      > abstraction in the <a
                        href="http://en.wikipedia.org/wiki/New_I/O"
                        >NIO</a
                      > package. All this is taken care of in the web framework,
                      so the application programmer does not need to be aware of
                      it. (Note that other languages present the same facilities
                      in different ways. Erlang, for example, presents all IO
                      operations as blocking, but the implementation uses the
                      same scalable non-blocking OS services as the JVM. Erlang
                      can do this as it doesn’t use as many resources per thread
                      as the JVM does. This is an appealing choice as it
                      provides a uniformity not found on the JVM, but impacts
                      how Erlang handles multicore.)
                    </p>
                    <p>
                      More relevant to the application programmer is the
                      programming model used for Comet, and this is where actors
                      come in. An actor is basically a thread with the important
                      restriction that it only communicates with the outside
                      world via messages. To ask an actor to do something, you
                      send it a message. This is rather like a method call,
                      except that the actor queues the message and processes it
                      asynchronously. When an actor wants to communicate with
                      another resource, it sends that resource a message. Since
                      actors never share state with each other, there is never a
                      need to lock resources to avoid concurrent access. This is
                      a great model because all the complexities of programming
                      with locks disappear. If you are interested in more
                      information on the actor model in Scala try <a
                        href="http://lamp.epfl.ch/~phaller/actors.html"
                        >here for the original papers</a
                      >, <a href="http://akkasource.org/"
                        >here for the Akka framework</a
                      > and <a
                        href="http://blog.lostlake.org/index.php?/archives/96-Migrating-from-Scala-Actors-to-Lift-Actors.html"
                        >here for a bit on Lift’s actors</a
                      >.
                    </p>
                    <p>
                      Actors are a natural fit for Comet. On the server each
                      Comet connection is handled by a <em>Comet actor,</em
                      > whose job it is to manage communication with a connected
                      browser. Each actor is bound to a single user’s session,
                      but actors persist across web requests. We can
                      asynchronously send an actor messages (whether the user is
                      looking at the web page or not), and have the actor buffer
                      them for transmission to the browser. This means we’ve got
                      almost all of our file upload functionality straight out
                      of the box, without having to do any particularly tricky
                      development.
                    </p>
                    <p>
                      We put a proof-of-concept of the file uploader <a
                        href="https://github.com/junglebarry/CometImport"
                        >on Github</a
                      >. The basic structure of the code is:
                    </p>
                    <ul>
                      <li>
                        When a file is uploaded it is handed off to a thread for
                        processing, and a Comet actor is started to communicate
                        with the client.
                      </li>
                      <li>
                        The processing thread periodically sends messages to the
                        actor, informing it of progress on the file upload.
                      </li>
                      <li>
                        The Comet actor in turn communicates progress to the
                        client.
                      </li>
                    </ul>
                    <p>
                      The great thing about this arrangement is that the user
                      can navigate away from the page without aborting the file
                      upload, and if they later return to the page they will get
                      a progress update. It makes for a very pleasant UI.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on File upload using Comet Actors</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"></span>
                  <span class="older"></span>
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        aria-current="page"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8 current-cat">
                      <a aria-current="page" href="/untyping/category/scala/"
                        >Scala</a
                      >
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
