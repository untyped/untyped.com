---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Javascript - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">
          Posts in the &#8216;Javascript&#8217; category
        </h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-663"
              class="post-663 post type-post status-publish format-standard hentry category-code category-front-page category-fun category-general category-javascript category-myna category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Aug 2013</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                      rel="bookmark"
                      title="Permanent Link to Writing Documentation using Grunt and Jekyll"
                      >Writing Documentation using Grunt and Jekyll</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Running a startup is a lot of work. All manner of tasks
                      constantly compete for the team&#8217;s attention
                      mandating a careful dance to keep on top of everything. We
                      haven&#8217;t nailed all the footwork to this dance yet,
                      but we have learned that choosing the right tool for each
                      job can drastically simplify the choreography.
                    </p>
                    <p>
                      We recently rewrote a large portion of <a
                        href="http://mynaweb.com/">Myna</a
                      >
                      in the march towards version 2 of the platform. Most of the
                      customer-facing software - the dashboard, client libraries,
                      HTTP API, and so on - were completely new and required
                      new documentation. Our existing help pages were in need of
                      an overhaul, so we decided to move them out into their own
                      project using a build system based on <a
                        href="http://gruntjs.com/">Grunt</a
                      > and
                      <a href="http://jekyllrb.com/">Jekyll</a>.
                    </p>
                    <p>
                      The new documentation is still a work-in-progress -
                      you can watch its evolution <a
                        href="http://help.mynaweb.com/">on the Myna website</a
                      > and its <a href="http://github.com/myna/help"
                        >repository on Github</a
                      >
                      (yes, it&#8217;s open source - another experiment we&#8217;re
                      trying). We&#8217;re really happy with the way it&#8217;s all
                      working out, so we&#8217;ve <a
                        href="https://github.com/untyped/jekyll-docs"
                        >published the build system</a
                      > as a separate project that you can use to bootstrap your
                      own documentation. Go forth, fork, and profit!
                    </p>
                    <p><strong>Why Jekyll?</strong></p>
                    <p>
                      Our old documentation was implemented as a set of
                      templates in the <a href="http://playframework.org/"
                        >Play 2</a
                      > web app that runs our marketing site and original
                      customer dashboard. Publishing the app requires a PhD in
                      SBT, Mongo and Redis, and if you&#8217;re writing
                      documentation on the train (as we are prone to do) it
                      isn&#8217;t uncommon to have your plans abruptly
                      terminated by one of SBT&#8217;s frequent unavoidable
                      urges to
                      <a
                        href="http://blog.sonatype.com/people/2011/04/how-not-to-download-the-internet/"
                        >download the whole internet</a
                      > (unadvisable in the middle of signal-free rural
                      England).
                    </p>
                    <p>
                      We considered moving to a CMS such as WordPress, but our
                      support team are all developers with their own preferred
                      editors and IDEs. Forcing them to write documentation
                      (painful) in a tiny WYSIWYG editor embedded into a web
                      site seemed like torture. Also, CMSs require internet
                      connections&#8230; it kinda goes with the territory.
                    </p>
                    <p>
                      Grunt and Jekyll, in contrast, run completely offline, and
                      have a number of other advantages too. Plugins like
                      <a href="https://github.com/gruntjs/grunt-contrib-watch"
                        >grunt-contrib-watch</a
                      >
                      provide instant previews via
                      <a href="http://livereload.com/">Livereload</a>,
                      and Jekyll&#8217;s syntax highlighting (provided by <a
                        href="http://pygments.org/">Pygments</a
                      >) can highlight any syntax you throw at it (including, to
                      my amazement, <a
                        href="http://help.mynaweb.com/api/experiment-create.html"
                        >HTTP</a
                      >).<br />
                      Jekyll isn&#8217;t completely perfect for the job. We had to
                      work around a few issues. Fortunately, none of them proved
                      insurmountable:
                    </p>
                    <p><strong>Versioning</strong></p>
                    <p>
                      We&#8217;ve run into versioning problems many times
                      before, some requiring some
                      <a
                        href="http://planet.racket-lang.org/package-source/untyped/autoplanet.plt/1/2/planet-docs/autoplanet/index.html"
                        >pretty serious workarounds</a
                      >. In fact, versioning issues are pretty much endemic
                      across all software development platforms. In this
                      toolchain we&#8217;re relying on lots of components:
                      Grunt, five Grunt plugins, Ruby, and Jekyll. Fortunately,
                      versioning is pretty much a solved problem these days:
                      <a href="https://npmjs.org/">NPM</a> and
                      <a href="http://bower.io/">Bower</a> are great package managers
                      for Node, and
                      <a href="http://bundler.io/">Bundler</a> normalizes not only
                      the version of Jekyll we&#8217;re using, but also the version
                      of Ruby itself.
                    </p>
                    <p>
                      <strong
                        >Static Assets (Say &#8220;NO&#8221; to Plain CSS)</strong
                      >
                    </p>
                    <p>
                      I may catch some flack for this, but CSS is a silly
                      language riddled with missing features and
                      <a href="http://www.w3.org/TR/css-variables/"
                        >bizarre design decisions</a
                      >. No way are we going to battle with a new documentation
                      project without tools like <a href="http://lesscss.org/"
                        >Less CSS</a
                      >
                      and
                      <a href="http://getbootstrap.com/">Twitter Bootstrap</a
                      > to support us. And if we&#8217;re compiling and
                      minifying our CSS, we might do it for Javascript as
                      well. Jekyll doesn&#8217;t support support for either
                      process out-of-the-box.
                    </p>
                    <p>
                      One way of solving these issues would be to use Jekyll
                      plugins - there are
                      <a href="https://github.com/zroger/jekyll-less">many</a>
                      <a href="https://github.com/moshen/jekyll-asset_bundler"
                        >candidates</a
                      >
                      <a
                        href="http://matthodan.com/2012/11/22/jekyll-asset-pipeline.html"
                        >available</a
                      >
                      on Github. However, we prefer to use Grunt for this kind of
                      thing, running Jekyll via
                      <a href="https://github.com/jharding/grunt-exec"
                        >grunt-exec</a
                      > and <a href="http://bundler.io/">Bundler</a>, and using
                      <a href="https://github.com/gruntjs/grunt-contrib-watch"
                        >grunt-contrib-watch</a
                      >
                      and
                      <a href="https://github.com/gruntjs/grunt-contrib-connect"
                        >grunt-contrib-connect</a
                      >
                      for preview functionality.
                    </p>
                    <p><strong>Content Navigation</strong></p>
                    <p>
                      Jekyll has built-in support for
                      <a href="http://jekyllrb.com/docs/pagination/"
                        >cataloguing and paginating blog posts</a
                      >, but it can&#8217;t natively generate navigation for a
                      hierarchical documentation site. Fortunately, this was
                      easy to work around with a couple of custom plugins:
                      <a
                        href="https://github.com/untyped/jekyll-docs/blob/master/jekyll_plugins/nav_toc.rb"
                        >one to create a table of contents</a
                      >
                      for the sidebar, and one to
                      <a
                        href="https://github.com/untyped/jekyll-docs/blob/master/jekyll_plugins/nav_pager.rb"
                        >generate next and previous buttons</a
                      >
                      at the bottom of each page.
                    </p>
                    <p><strong>Authenticating Users</strong></p>
                    <p>
                      The main navigation bar on Myna changes when users log in.
                      Ideally we want like to keep this consistent across the
                      main web site, the blog, and the documentation. Our
                      solution is to built a small Javascript app to monitor the
                      user&#8217;s login details and rewrite the navbar on
                      demand. This is a work-in-progress project and it&#8217;s
                      not part of the Github repo above.
                    </p>
                    <p><strong>Conclusion</strong></p>
                    <p>
                      If you like the idea of writing documentation in Markdown,
                      you can get started in two minutes by cloning our  <a
                        href="https://github.com/untyped/jekyll-docs"
                        >Github repo</a
                      >  and following the instructions in the README.
                      We&#8217;d love to hear from you if you find our system
                      useful, and we welcome pull requests with improvements.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/myna/" rel="category tag"
                      >Myna</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Writing Documentation using Grunt and Jekyll</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-25"
              class="post-25 post type-post status-publish format-standard hentry category-code category-front-page category-javascript category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/06/javascript-compilation-for-sbt/"
                      rel="bookmark"
                      title="Permanent Link to Javascript compilation for SBT"
                      >Javascript compilation for SBT</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over the weekend I knocked up a little <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >SBT plugin</a
                      > to wrap up the Javascript resources in our <a
                        href="http://liftweb.net/">Lift</a
                      > projects and deploy them as one big minified file. Read
                      on to find out how it works, then grab yourself a copy and
                      take it for a spin.
                    </p>
                    <p>
                      The plugin scans your <tt>webapps</tt> directory and looks
                      for files with the extensions <tt>.jsm</tt> or <tt
                        >.jsmanifest</tt
                      >. These files, called <em>Javascript Manifests</em>,
                      describe lists of Javascript sources that should be
                      combined into a single file. For example:
                    </p>
                    <pre
                      is:raw>
# You can specify remote files using URLs...

http://code.jquery.com/jquery-1.5.1.js

# ...and local files using regular paths
#    (relative to the location of the manifest):

lib/foo.js
bar.js

# Blank lines and bash-style comments are also supported</pre>
                    <p>
                      Manifest compilation happens in two phases: first, the
                      plugin downloads and caches any remote scripts specified
                      using URLs. Second, it feeds all of the sources (remote
                      and local) into Google’s<a
                        href="http://code.google.com/closure/compiler/"
                        >Closure Compiler</a
                      >, which concatenates them and minifies everything (and
                      provides excellent services like static type checking to
                      boot). The output from the compiler is a <tt>.js</tt> file
                      with the same base name and relative path as the original
                      manifest.
                    </p>
                    <p>
                      There’s not a lot more to it than that. The plugin hooks
                      into SBT’s standard compile and package phases, so your
                      Javascript gets rebuilt automatically alongside your Scala
                      code. If this sounds useful to you, please feel free to
                      grab a copy and take it for a spin. Full details are
                      available in the README on <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >Github</a
                      >.
                    </p>
                    <p>
                      I should point out that there are other useful SBT plugins
                      that do a similar job. For example, I plagiarised
                      extensively from Jon Hoffman’s<a
                        href="https://github.com/hoffrocket/sbt-yui"
                        >YUI Compressor plugin</a
                      > and Luke Amdor’s <a
                        href="https://github.com/rubbish/coffee-script-sbt-plugin"
                        >Coffee Script plugin</a
                      > when writing my code. These two particular examples
                      don’t do file combination, though, and that was an
                      important feature for our specific use case.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Javascript compilation for SBT</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-37"
              class="post-37 post type-post status-publish format-standard hentry category-code category-front-page category-fun category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 Jan 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/24/smooth-scrolling-for-mobile-safari/"
                      rel="bookmark"
                      title="Permanent Link to Smooth Scrolling for Mobile Safari"
                      >Smooth Scrolling for Mobile Safari</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I recently wrote a <a href="http://jquery.com/">jQuery</a
                      > plugin to do some smooth scrolling on the iPad, and I
                      thought I’d share the code with everyone.
                    </p>
                    <p>
                      The effect you get is very similar to the iOS home screen.
                      The user touches the screen and drags to scroll. Releasing
                      the screen causes it to spring to the most appropriate
                      page based upon the last dragging position and speed.
                    </p>
                    <p>
                      Gurus of front end development tell us that pretty much
                      the only way to get smooth transitions on the iPad is to
                      use 3D CSS transforms. After experimenting with jQuery
                      animations and 2D CSS transforms, I pretty much concur:
                      jQuery animations yield one or two frames per second, and
                      2D CSS transforms aren’t much better. 3D CSS transforms,
                      on the other hand, are hardware accelerated and smooth as
                      silk.
                    </p>
                    <p>
                      You can get the code from this <a
                        href="https://gist.github.com/791997">Gist</a
                      > on Github (contributions and enhancements welcome). Use
                      it with the following HTML:
                    </p>
                    <div>
                      <pre
                        is:raw><code> &lt;div id="viewport"&gt; &lt;div&gt;First page&lt;/div&gt; &lt;div&gt;Second page&lt;/div&gt; &lt;div&gt;Third page&lt;/div&gt; &lt;/div&gt; </code></pre>
                    </div>
                    <p>and the following Javascript:</p>
                    <div>
                      <pre
                        is:raw><code> $("#viewport").scrollpane(); </code></pre>
                    </div>
                    <p>
                      There’s a demo of it in action <a
                        href="http://boxandarrow.com/demos/ios-scroll/">here</a
                      >. A couple of notes:
                    </p>
                    <ul>
                      <li>
                        Because this hooks into touch gesture events and CSS3 3D
                        transforms, it’ll pretty much only work on iDevices and
                        possibly other Webkit-based tablets.
                      </li>
                      <li>
                        It works horizontally and vertically, but I’d recommend
                        only using it horizontally in a regular web page because
                        it interferes with Safari’s natural screen bounce. I had
                        the benefit of a working on an offline brochure where
                        the web page never scrolls naturally. In this
                        environment the plugin really shines. If you are
                        interested in doing something similar, take a look at
                        the iPad app <a
                          href="http://www.hiddenmemory.co.uk/delivery-site.html"
                          >Delivery Site</a
                        >, which lets you customise various things like this.
                      </li>
                      <li>
                        There are a couple of options you can tweak to affect
                        things like dead-zones before a drag will trigger a page
                        transition. See the top of the source code for details.
                      </li>
                      <li>
                        When the first 3D transform is added to a page, Mobile
                        Safari seems to transparently install an OpenGL panel to
                        handle the effects. This causes a rendering glitch
                        that’s just faintly visible if you’re paying attention.
                        The plugin works around this by setting an identity
                        transform on the scroll component on page load. Webkit
                        is presumably frugal about 3D-ification for a reason, so
                        you may find your web pages take more memory and CPU
                        resources with this plugin active than without.
                      </li>
                      <li>
                        Really large (read “many-page, full-screen”) scroll
                        panes can be very heavy on the browser. This is
                        presumably due to the overhead of creating a texture
                        buffer to 3D accelerate the transitions. I’ve managed
                        five-page full-screen scrolling transitions without
                        problems, but your mileage may vary.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Smooth Scrolling for Mobile Safari</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-301"
              class="post-301 post type-post status-publish format-standard hentry category-javascript"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">4 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/04/the-rumour-starts-here/"
                      rel="bookmark"
                      title="Permanent Link to The Rumour Starts Here!"
                      >The Rumour Starts Here!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Salacious rumour suggests the next version of Javascript
                      will have tail recursion. We can neither confirm nor deny
                      this rumour, but we can rock an old style: <code
                        >w00t!</code
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Rumour Starts Here!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-315"
              class="post-315 post type-post status-publish format-standard hentry category-javascript"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">20 Feb 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/02/20/more-on-the-next-javascript/"
                      rel="bookmark"
                      title="Permanent Link to More on the next Javascript"
                      >More on the next Javascript</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Brendan Eich writes on <a
                        title="Brendan's Roadmap Updates: Python and JavaScript"
                        href="http://weblogs.mozillazine.org/roadmap/archives/2006/02/js_and_python_news.html"
                        >Python and JavaScript</a
                      >. The first part discusses his plans to add generators
                      and array comprehensions to Javascript. But that’s not the
                      real news! It comes later:
                    </p>
                    <blockquote>
                      <p>
                        I’m happy to announce that we are now working with Dave
                        Herman, a fourth year graduate student at Northeastern,
                        of PLT and lambda-the-ultimate renown, whom I invited as
                        an expert to help ECMA TG1 develop sound specifications
                        for critical parts of ECMAScript Edition 4 (ES4), also
                        known as JavaScript 2 (JS2).
                      </p>
                    </blockquote>
                    <p>Go <a href="http://calculist.blogspot.com/">Dave</a>!</p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on More on the next Javascript</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-322"
              class="post-322 post type-post status-publish format-standard hentry category-javascript"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">27 Jan 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/01/27/ajax-i-fold/"
                      rel="bookmark"
                      title="Permanent Link to Ajax: I Fold!">Ajax: I Fold!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Ok, I fold. It’s time to admit I agree with what Matt has<br
                      />
                      been saying: Ajax is an immature technology. To save Matt<br
                      />
                      some effort I’ll list the things that most annoy me with the<br
                      />
                      current state of the art:
                    </p>
                    <p>
                      Matt’s already mentioned the (lack of)&lt;a<br />
                      href=&#8221;http://www.untyped.com/untyping/archives/2005/11/rich_web_client.html&#8221;&gt;type<br
                      />
                      system and&lt;a<br />
                      href=&#8221;http://www.untyped.com/untyping/archives/2005/12/printf_in_ajax.html&#8221;&gt;poor<br
                      />
                      debugging support, so I won’t go into them.
                    </p>
                    <p>
                      Memory leakage is perhaps the biggest obstacle to<br />
                      creating long-lived Ajax applications. The reasons for<br
                      />
                      memory leaks are discussed&lt;a<br />
                      href=&#8221;http://www.mozilla.org/scriptable/avoiding-leaks.html&#8221;&gt;here<br
                      />
                      and&lt;a<br />
                      href=&#8221;http://blogs.msdn.com/ericlippert/archive/2003/09/17/53028.aspx&#8221;&gt;here.<br
                      />
                      These leaks are a result of a flaw in the implementation of<br
                      />
                      (to my knowledge, all) existing browsers. This puts us back<br
                      />
                      into the bad old days of manual memory management. Either<br
                      />
                      we be very careful in our programming, or our long lived<br
                      />
                      application will eat memory till the browser crashes.
                    </p>
                    <p>
                      Browser incompatabilities and inconsistencies, admirably<br
                      />
                      documented at <a href="http://www.quirksmode.org/"
                        >Quirks<br />
                        Mode</a
                      >, are a major hassle. We have to worry about both<br />
                      browser and version — my code works in Firefox 1.0.4,<br
                      />
                      but will it work in Internet Explorer 5.0 (probably not)?
                    </p>
                    <p>
                      With the benefit of experience Javascript could be
                      improved in a number of ways.&lt;a<br />
                      href=&#8221;http://calculist.blogspot.com/2005/12/dynamic-scope.html&#8221;&gt;Javascript’s<br
                      />
                      crazy scoping rules are just bad; there’s no way of<br />
                      getting around that. Javascript would really benefit from <a
                        href="http://en.wikipedia.org/wiki/Coroutine"
                        >coroutines</a
                      >for writing all those animation loops (or heck, let’s get
                      full continuations). Javascript’s syntax is unnecessarily
                      hard to parse, mostly due to the semi-colon insertion rule
                      .
                    </p>
                    <p>
                      Finally, current implementations of Javascript are slow
                      and<br />
                      resource hungry, a major impediment to creating really<br
                      />
                      featureful applications.
                    </p>
                    <p>
                      Ok, so where does this leave us? We still want to build
                      great Internet applications, but the tools are a bit suck.
                      There are three paths forward:
                    </p>
                    <ul>
                      <li>
                        Build libraries. Requires the least amount of time, but
                        offers the least return.
                      </li>
                      <li>
                        Build a better Javascript. This has <a
                          href="http://weblogs.mozillazine.org/roadmap/archives/008325.html"
                          >already started</a
                        >. Just wait two years for the standardisation committee
                        to finish, and then another five Internet Explorer to
                        catch up.
                      </li>
                      <li>
                        Use the existing language as the target, but build a
                        better language that compiles into Javascript. Less
                        effort than standardising Javascript, but more effort
                        that writing libraries, this option has some attractive
                        benefits.
                      </li>
                    </ul>
                    <p>
                      So which path are we going to follow? Tune in next time!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Ajax: I Fold!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-333"
              class="post-333 post type-post status-publish format-standard hentry category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">22 Dec 2005</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2005/12/22/printf-in-ajax-sorry-thats-not-debugging/"
                      rel="bookmark"
                      title="Permanent Link to Printf in AJAX? Sorry, that’s not debugging."
                      >Printf in AJAX? Sorry, that’s not debugging.</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <em
                        >This post is one in a continuing series where we
                        internally debate the merits of the over-hyped promise
                        of AJAX…</em
                      >
                    </p>
                    <blockquote>
                      <p>
                        <a
                          href="http://ajaxian.com/archives/2005/12/debugging_ajax.html"
                          >Debugging Ajax Requests in Prototype</a
                        >:
                      </p>
                      <p>
                        How do we debug our Ajax applications? The <a
                          href="http://rails.techno-weenie.net/">Rails Weenie</a
                        > has taken the Ajax Responder feature in Prototype…
                      </p>
                    </blockquote>
                    <p>
                      I’d like to remind Noel that the distance of the Atlantic
                      and business of the Christmas holidays are not going to
                      keep me from pointing out that AJAX is an immature and
                      dangerous platform to build a business on. Yes, I’m glad
                      that GMail is there… and I suppose the Yahoo! Mail beta.
                      However, these are fragile technologies to build upon.
                    </p>
                    <p>
                      How do we debug things written using the Prototype
                      framework?<code>printf</code>. I mean, I’m glad that with
                      AJAX and Rails I can whip something up quickly that “just
                      works.” However, it doesn’t “just have test cases,” or
                      “just get internationalized”, or “just stand up under
                      load.” They’re rapid-prototyping tools, certainly nothing
                      more. AJAX breaks usability standards, pushes data and
                      computation to an unreliable substrate (the client’s web
                      browser), and as the post above provides some evidence
                      for, there are no good debugging or tracing tools
                      available for developers working in heterogeneous browser
                      environments in Javascript.
                    </p>
                    <p>
                      So, Noel, riddle me this: why should developers be willing
                      to take eight steps backwards and be shafted with <code
                        >printf</code
                      > as their primary debugging tool when working with AJAX?
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Printf in AJAX? Sorry, that’s not debugging.</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-354"
              class="post-354 post type-post status-publish format-standard hentry category-javascript"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">4 Nov 2005</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2005/11/04/rich-web-clients/"
                      rel="bookmark"
                      title="Permanent Link to Rich web clients"
                      >Rich web clients</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <em
                        >Matt likes to provide the dissenting Ajax voice here on
                        untyping.</em
                      >
                    </p>
                    <p>As overhead on Slashdot:</p>
                    <blockquote>
                      <p>
                        ‘Zimbra’s chief executive, Satish Dhamaraj, says that
                        when he started his company in December 2003, “I really
                        thought that Ajax was just a bathroom cleaner.” Now his
                        San Mateo, Calif., business has amassed $16 million in
                        funding from venture-capital firms including Accel
                        Partners, Redpoint Ventures and Benchmark Capital, the
                        firm that famously funded eBay Inc. Peter Fenton, an
                        Accel partner, says Ajax “has the chance to change the
                        face of how we look at Web applications” and could boost
                        technology spending by corporations, because Ajax is
                        also being used to develop software for big companies,
                        not just for consumers.’”
                      </p>
                    </blockquote>
                    <p>
                      Ajax is a dangerous and immature technology. It is, in
                      fact, a hack—a<em>kludge</em>—to provide rich-client
                      functionality in the browser.
                    </p>
                    <p>
                      While I’ll acknowledge that Javascript was intended from
                      day one for interacting with the DOM, building entire
                      applications that are predicated on dynamic, untyped
                      tree-transformations is suicide (at best) without
                      significant software development experience and rigor.
                      With that rigor, it’s just dangerous.
                    </p>
                    <p>
                      What do I mean? Pretend that every HTML element has a
                      shape. If that’s the case, then a document with a series
                      of paragraphs might look like:
                    </p>
                    <p></p>
                    <center>
                      <img
                        fetchpriority="high"
                        decoding="async"
                        src="http://www.untyped.com/untyping/images/tree1.png"
                        alt="Tree1"
                        width="309"
                        height="180"
                        border="0"
                        hspace="8"
                        vspace="8"
                      />
                    </center>
                    In this picture, the octagon represents the <code>body</code
                    > tag, and the circles represent the paragraphs. If <em
                      >emphasis</em
                    > tags look like a small square, then (zooming in) our
                    picture might look like:
                    <p></p>
                    <center>
                      <img
                        decoding="async"
                        src="http://www.untyped.com/untyping/images/tree2.png"
                        alt="Tree2"
                        width="310"
                        height="214"
                        border="0"
                        hspace="8"
                        vspace="8"
                      />
                    </center>
                    Unfortunately, to make Ajax work, you have to constantly reorganize
                    this tree. The tree is <strong>everything</strong>: it is
                    the UI, it is the content, and it is the data for the
                    program you are writing. And, I can casually replace any one
                    node with a new node of a different type, <em>or</em> I can
                    insert whole, new subtrees.
                    <p>
                      Anywhere. Anytime. And, without any validation or safety.
                      So, I can take my first picture, and insert an entire copy
                      of it anywhere I like:
                    </p>
                    <p></p>
                    <center>
                      <img
                        decoding="async"
                        src="http://www.untyped.com/untyping/images/tree3.png"
                        alt="Tree3"
                        width="368"
                        height="276"
                        border="0"
                        hspace="8"
                        vspace="8"
                      />
                    </center>
                    The only problem with this is that, if the octagon is a <code
                      >body</code
                    > tag, this is<em>completely invalid HTML</em>. But that’s
                    not the worst of it; the tree representing all of my
                    interface, content, and data is a massive, and complex,
                    piece of state. So, after part of my program modifies the
                    tree, I have to forever remember that the state has changed.
                    Keeping track of state is already a dangerous part of
                    programming; it is the cause of crashes in unithreaded
                    programs (memory leaks, for example), and a source of huge
                    problems in multithreaded programs (via problems known as
                    deadlock, livelock, race hazards, etc.). This is why Google
                    Mail and other Ajax-y applications are a miracle of hackery:
                    the fact that they run, without completely buggering up
                    constantly, is a nothing short of a holy intervention on the
                    part of some higher being.
                    <p>
                      Given that the compiler does nothing to check your typing,
                      and that you have almost no run-time debugging support,
                      Ajax (as currently exemplified by Javascript and XML over
                      HTTP) is certainly only version 0.5 as tool or solution
                      for web-based development goes. Or, perhaps it is just
                      part of a space of tools, where some produce very
                      portable/accessible applications, while others allow the
                      developer to produce richer, more interesting applications
                      (while sacrificing portability).
                    </p>
                    <p></p>
                    <center>
                      <img
                        loading="lazy"
                        decoding="async"
                        src="http://www.untyped.com/untyping/images/spectrum.png"
                        alt="Spectrum"
                        width="341"
                        height="336"
                        border="0"
                        hspace="8"
                        vspace="8"
                      />
                    </center>
                    It may be that Ajax is just the most portable, and least rich/safe
                    way to develop applications for end-users at the moment. Rich
                    clients, like<a href="http://www.openlaszlo.org/"
                      >OpenLaszlo</a
                    >, represent a greater level of safety, as well as a much
                    richer set of tools. Widgets, like Apple’s Dashboard and <a
                      href="http://widgets.yahoo.com/">Yahoo’s Widgets</a
                    > (formerly <a href="http://www.konfabulator.com/"
                      >Konfabulator</a
                    >, an excellent, cross-platform predecessor to Apple’s
                    Dashboard) provide some of the ease of development of the
                    WWW with much of the richness of the desktop—yet there is a
                    run-time engine that provides a modicum of protection and
                    safety for the end-user. And, of course, desktop
                    applications: they sacrifice portability, but give you the
                    full power of the host machine.
                    <p>
                      I started this post with a quote about people investing
                      millions in Ajaxy technology. People investing millions in
                      Ajaxy startups scare me; they’re sheep, following the
                      herd. However, Ajax (as exemplified by Javascript and
                      HTML) will mature, and we’ll see tools and frameworks
                      develop that will make application development “safer” and
                      less hack-and-slash. Or, it will be abandoned, the <code
                        >&lt;BLINK&gt;</code
                      > tag of the new millennium.
                    </p>
                    <p>
                      Then again, PHP exists, and it’s a large, steaming turd of
                      a language that grabbed significant market share entirely
                      too easily. So, what can you do?
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Rich web clients</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-375"
              class="post-375 post type-post status-publish format-standard hentry category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">15 Sep 2005</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2005/09/15/the-birmingham-course-openlaszlo-to-the-rescue/"
                      rel="bookmark"
                      title="Permanent Link to The Birmingham Course: OpenLaszlo to the Rescue!"
                      >The Birmingham Course: OpenLaszlo to the Rescue!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We needed to deliver a <a
                        href="http://birminghamcourse.untyped.com/mock-exam/"
                        >prototype on-line exam</a
                      > quickly. Despite their simple appearance, on-line exams
                      can have some complex interaction modes that are annoying
                      to deal with in a client/server model.<a
                        href="http://www.openlaszlo.org/">OpenLaszlo</a
                      > provided an excellent framework for quickly going from
                      idea to solution.
                    </p>
                    <p>&nbsp;</p>
                    <p>
                      <a href="http://www.birminghamcourse.co.uk/"
                        >The Birmingham Course</a
                      > approached us with the idea of<br />
                      placing online a mock exam for their MRCPsych course. While
                      the time constraints were tight, we thought there was an interesting
                      opportunity in the project, and enjoyed the enthusiasm that
                      The Birmingham Course brought to the table.
                    </p>
                    <p>
                      I would have liked to do some paper prototyping, and work
                      through the issues that might arise before starting.
                      However, we also wanted students currently enrolled in the
                      course to trial an on-line version of the mock exam. This
                      left us in a bit of a pickle: can you, in one-and-one-half
                      weeks, go from concept to implementation for an on-line
                      examination, and get it right? (I live far enough away
                      from Birmingham that I didn’t have the ability to take a
                      day or two and go up there to meet with the client.)
                    </p>
                    <p>
                      The mock exam had no data gathering requirements, nor were
                      there any concerns with authentication and identifying
                      users. Therefore, some of the trickier aspects of
                      web-based application development were not concerns.
                      However, we still needed to deliver 133 True/False
                      questions, and 30 multiple-choice questions in a stateful
                      way, so students could easily “go back” and change their
                      answers, as well as get their end-of-exam score.
                    </p>
                    <p>
                      While there may be AJAX gurus out there who think this
                      would be a piece of cake, I do almost all of this
                      development work in Scheme, and have no particular
                      expertise in HTML/CSS/Javascript interaction on twelve
                      different browser platforms (that’s why I <a
                        href="http://www.untyped.com/about/index.php"
                        >run with a team</a
                      >). I certainly don’t have a lot of patience for
                      developing code in an unstructured and unsupportive
                      environment. Put another way, I think the browser makes a
                      lousy run-time environment; I want my compiler to check
                      for obvious problems up front, and I want my runtime
                      environment to be rich enough that I can go about
                      debugging a running application. Your typical AJAX app
                      fails on these counts far too readily for me to think that
                      any AJAX code I develop in a hurry will be reliable. (I’d
                      like to point out that I’ve never even given AJAX enough
                      of my time to decide if my biases and opinions are right;
                      I’ve only read code and stories from others, and I don’t
                      like what I see.)
                    </p>
                    <p>
                      Enter <a href="http://www.openlaszlo.org/">OpenLaszlo</a>.
                      It has a compiler, that tells me when I make silly
                      mistakes. It has a rich run-time environment, which
                      includes an interactive debugging REPL. I can create a
                      window as easily as saying
                    </p>
                    <pre
                      is:raw>
&lt;canvas&gt;&lt;window&gt;Hi there!&lt;/window&gt;&lt;/canvas&gt;</pre>
                    <p>
                      It uses JavaScript 1.5 as it’s scripting language, and has
                      a really sweet little constraint engine built in. The
                      upcoming 3.1 release has some very swish enhancements on
                      the way as well.
                    </p>
                    <p>
                      I was able to quickly prototype ideas for the customer,
                      push them to the WWW, and let them interact with the
                      application. While it is possible to do all kinds of RPC
                      from OpenLaszlo, I chose to employ another really nice
                      feature of the environment: <a
                        href="http://openlaszlo.org/tips/2005/solo/"
                        >SOLO application deployment</a
                      >. If you’re willing to give up some (not all)
                      connectivity with remote hosts, OpenLaszlo apps can be
                      compiled to a single, static Flash file. This means that
                      any user with Flash 6 or better can interact with a very
                      rich net-based app, and get a very desktop-like
                      experience.
                    </p>
                    <p>
                      The <a
                        href="http://birminghamcourse.untyped.com/mock-exam/"
                        >end-product of a one-week mad dash</a
                      > can be seen online; I was quite pleased with it. I know
                      I made some choices that were less than optimal, but the
                      code can be refactored and improved in a future iteration
                      of the project. I was also happy working with OpenLaszlo
                      as a development tool—putting together GUIs was no more
                      complex than writing a webpage, the event model and
                      constraint system are both well-behaved and useful, and
                      being able to deliver a static Flash document as an
                      application means I don’t have to worry about a timeouts
                      on client/server interactions, nor do I have to wonder if
                      IE4/IE5/IE6/Opera/Firefox/Mozilla/Safari is going to choke
                      on my particular choice of HTML, CSS, and Javascript
                      idioms. If you’re some kind of “purist” who abhors Flash,
                      then… I can’t help you. But it’s widely deployed, and much
                      better behaved than a gaggle of browsers.
                    </p>
                    <p>
                      Food for thought. Point is, I liked it. And the customer
                      loved it; the app behaved just the way they wanted. I
                      don’t know what else I can say.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Birmingham Course: OpenLaszlo to the Rescue!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-385"
              class="post-385 post type-post status-publish format-standard hentry category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">18 Aug 2005</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2005/08/18/a-little-openlaszlo-lovin/"
                      rel="bookmark"
                      title="Permanent Link to A little OpenLaszlo lovin’"
                      >A little OpenLaszlo lovin’</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      No doubt I’ll be playing with this technology more in the
                      future, so I thought I’d introduce it now.
                    </p>
                    <p>
                      <a href="http://www.openlaszlo.org/">OpenLaszlo</a>,
                      released unto the world by <a
                        href="http://www.laszlosystems.com/">Laszlo Systems</a
                      >, is an interesting combination of languages and ideas.
                      It is an XML-based language for specifying the layout and
                      behavior of rich internet applications. For example, I
                      wrote a tabbed slideshow for photographs that you can find
                      on my personal weblog, <a
                        href="http://www.cs-ed.org/blogs/mjadud/archives/2005/08/a_few_photos_of.html"
                        >here</a
                      >….
                    </p>
                    <p>&nbsp;</p>
                    <p>
                      No doubt I’ll be playing with this technology more in the
                      future, so I thought I’d introduce it now.
                    </p>
                    <p>
                      <a href="http://www.openlaszlo.org/">OpenLaszlo</a>,
                      released unto the world by <a
                        href="http://www.laszlosystems.com/">Laszlo Systems</a
                      >, is an interesting combination of languages and ideas.
                      It is an XML-based language for specifying the layout and
                      behavior of rich internet applications. For example, I
                      wrote a tabbed slideshow for photographs that you can find
                      on my personal weblog, <a
                        href="http://www.cs-ed.org/blogs/mjadud/archives/2005/08/a_few_photos_of.html"
                        >here</a
                      >. I think it would be difficult to write in JavaScript
                      and CSS. Consider:
                    </p>
                    <ol>
                      <li>When you open a slide, audio begins playing.</li>
                      <li>
                        When you switch slides, the current audio stops, and new
                        audio is started.
                      </li>
                      <li>
                        I can layer objects (and remove them) over the photo
                        content quickly and easily, when and where I want them.
                      </li>
                    </ol>
                    <p>
                      I imagine this is all possible in JavaScript/DHTML, but… I
                      don’t know how. And, I don’t feel I need to; the
                      OpenLaszlo crew has provided a powerful platform for me to
                      work from—a compiler, GUI toolkit, RPC mechanisms, and
                      more. It seems to me that the whole JavaScript/CSS/AJAX
                      thing is nothing more but a poor reinvention of the
                      technology that OpenLaszlo provides. Granted, for full
                      RPC-functionality, OpenLaszlo currently requires a servlet
                      container, whereas AJAX-apps just need a browser with a
                      JavaScript engine. However, you don’t get much support
                      from the compiler or run-time for debugging AJAX
                      applications, whereas OpenLaszlo apps have a compiler and
                      run-time debugger. That’s worth installing a server to me.
                      (It was a double-click operation on my Mac.)
                    </p>
                    <p>
                      If I forgo the OpenLaszlo server, I can statically compile
                      my applications; although RPC is no longer available, I
                      can still do HTTP POSTs, and that’s enough to do something
                      RESTful. But, instead of a webpage, I can create a very
                      rich, interactive GUI-based environment that can be
                      delivered to any browser that is Flash-capable. I hear
                      Macromedia has pretty good penetration, and generally
                      things Just Work within that environment, regardless of
                      whether you are on Windows or Mac, IE or Firefox, etc.
                    </p>
                    <p>
                      So, I think it’s a cool technology. I’ve been poking at
                      the edges of it on-and-off for a few weeks now, and will
                      follow up with some more about what I’ve been doing with
                      it. My <a
                        href="http://www.cs-ed.org/blogs/mjadud/archives/2005/08/a_few_photos_of.html"
                        >tutorial builder/photo slideshow demo</a
                      > just met a need I had; I think <a
                        href="http://www.openlaszlo.org/">OpenLaszlo</a
                      > is capable of much, much more.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on A little OpenLaszlo lovin’</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"></span>
                  <span class="older"
                    ><a href="/untyping/category/javascript/page/2/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12 current-cat">
                      <a
                        aria-current="page"
                        href="/untyping/category/javascript/">Javascript</a
                      >
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />

    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
