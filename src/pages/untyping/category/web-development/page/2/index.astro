---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Web development - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">
          Posts in the &#8216;Web development&#8217; category
        </h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-43"
              class="post-43 post type-post status-publish format-standard hentry category-business category-front-page category-general category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 Jan 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/10/the-university-of-untyped/"
                      rel="bookmark"
                      title="Permanent Link to The University of Untyped"
                      >The University of Untyped</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve recently started a reading group at Untyped. As
                      consultants we need to maintain our expertise, so every
                      Friday we tackle something new for a few hours. Given our
                      love of Universities (we average three degrees per
                      Untypist) and our even greater love of grandiose corporate
                      training (hello, <a
                        href="http://www.aboutmcdonalds.com/mcd/careers/hamburger_university.html"
                        >Hamburger University</a
                      >!) we have named this program Untyped University.
                    </p>
                    <p>
                      Broadly, we’re covering the business of the web and the
                      business of building the web. The online business is, from
                      certain angles, quite simple. The vast majority of
                      businesses can be viewed as a big pipeline, sucking in
                      visitors from the Internet-at-large, presenting some
                      message to the user, and then hoping they click “Buy”. At
                      each stage of the pipeline people drop out. They drop out
                      right at the beginning if the site isn’t ranked high
                      enough on search terms or has poorly targetted ads. They
                      abandon the website if the design is wrong, or the site is
                      slow, or the offer isn’t targeted correctly. Each step of
                      this pipeline has tools and techniques that can be used to
                      retain users, which we’ll be covering. The flipside of
                      this is the pipeline that delivers the site, starting with
                      data stores, going through application servers, and
                      finishing at the browser or other client interface. Here
                      we’ll be looking at the technologies and patterns for
                      building great sites.
                    </p>
                    <p>
                      So far we’ve run a couple of sessions. The first covered
                      bandit algorithms, and the second Amazon’s Dynamo. We’ll
                      blog about these soon. We’ve started a <a
                        href="http://www.mendeley.com/groups/771021/untyped-university/"
                        >Mendeley group</a
                      > to store our reading (though not everything we cover in
                      future will be in published form.) Do join in if it takes
                      your fancy!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The University of Untyped</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-46"
              class="post-46 post type-post status-publish format-standard hentry category-code category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">1 Dec 2010</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/12/01/file-upload-using-comet-actors/"
                      rel="bookmark"
                      title="Permanent Link to File upload using Comet Actors"
                      >File upload using Comet Actors</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve been using the <a href="http://liftweb.net/">Lift</a
                      > web framework for a lot of web development work
                      recently, and we’re very impressed some of its features.
                      Lift’s Comet support, in particular, is a blessing for the
                      kind of data-crunching back-end web sites we typically get
                      involved in.
                    </p>
                    <p>
                      Importing data from uploaded files, for example,
                      frequently causes trouble. An import can take from a few
                      seconds to a few minutes depending on the size of the file
                      and the complexity of the data processing and validation
                      involved. If the import takes more than a few seconds
                      there is an increasing risk that the web browser will time
                      out. If this happens we fail, because the user won’t know
                      whether the import succeeded or not. Lift’s Comet actors
                      provide a simple way around this problem. But before
                      describing how they work, let’s quickly go over <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)"
                        >Comet</a
                      > and <a href="http://en.wikipedia.org/wiki/Actor_model"
                        >actors</a
                      >.
                    </p>
                    <p>
                      Comet is a way of doing push notifications over HTTP,
                      which on the face of it appears to only support pull.
                      Without the jargon, this means a way of allowing the
                      server to send information to the web browser when that
                      information is ready, not when the web browser checks for
                      it. This gives us a better interface, as the UI can
                      instantly reflect new data, and better resource
                      consumption, as the client doesn’t have to continuously
                      poll the server.
                    </p>
                    <p>
                      There are two or three common ways of <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)#Implementations"
                        >implementing Comet</a
                      >. Lift uses a mechanism called “long polling”, which
                      implements Comet using plain old AJAX. As soon as the web
                      page loads, the web browser sends an XMLHTTP request to
                      the server. Instead of replying immediately the server
                      keeps the connection around until it has information to
                      push back. When information is available, the web server
                      responds to the HTTP request, and the browser processes
                      the response and immediately makes another request.  In
                      other words, long polling uses HTTP’s pull mechanism to
                      simulate push communication. This is all well and good,
                      but it immediately raises two issues: how do we manage a
                      large number of open, but idle, connections without
                      swamping the server, and what programming model do we use
                      to manage the additional complexity of Comet applications.
                    </p>
                    <p>
                      Handing many idle open connections is relatively simple.
                      The traditional model is to use one thread per request,
                      but this doesn’t scale when many requests are idle for
                      long periods. All modern operating systems provide a
                      scalable event notification system, such as <a
                        href="http://en.wikipedia.org/wiki/Epoll">epoll</a
                      > or <a href="http://en.wikipedia.org/wiki/Kqueue"
                        >kqueue</a
                      >, allowing a single thread to simultaneously monitor many
                      connections for data. The JVM provides access to these
                      systems via the <a
                        href="http://download.oracle.com/javase/6/docs/api/java/nio/channels/Selector.html"
                        >Selector</a
                      > abstraction in the <a
                        href="http://en.wikipedia.org/wiki/New_I/O">NIO</a
                      > package. All this is taken care of in the web framework,
                      so the application programmer does not need to be aware of
                      it. (Note that other languages present the same facilities
                      in different ways. Erlang, for example, presents all IO
                      operations as blocking, but the implementation uses the
                      same scalable non-blocking OS services as the JVM. Erlang
                      can do this as it doesn’t use as many resources per thread
                      as the JVM does. This is an appealing choice as it
                      provides a uniformity not found on the JVM, but impacts
                      how Erlang handles multicore.)
                    </p>
                    <p>
                      More relevant to the application programmer is the
                      programming model used for Comet, and this is where actors
                      come in. An actor is basically a thread with the important
                      restriction that it only communicates with the outside
                      world via messages. To ask an actor to do something, you
                      send it a message. This is rather like a method call,
                      except that the actor queues the message and processes it
                      asynchronously. When an actor wants to communicate with
                      another resource, it sends that resource a message. Since
                      actors never share state with each other, there is never a
                      need to lock resources to avoid concurrent access. This is
                      a great model because all the complexities of programming
                      with locks disappear. If you are interested in more
                      information on the actor model in Scala try <a
                        href="http://lamp.epfl.ch/~phaller/actors.html"
                        >here for the original papers</a
                      >, <a href="http://akkasource.org/"
                        >here for the Akka framework</a
                      > and <a
                        href="http://blog.lostlake.org/index.php?/archives/96-Migrating-from-Scala-Actors-to-Lift-Actors.html"
                        >here for a bit on Lift’s actors</a
                      >.
                    </p>
                    <p>
                      Actors are a natural fit for Comet. On the server each
                      Comet connection is handled by a <em>Comet actor,</em
                      > whose job it is to manage communication with a connected
                      browser. Each actor is bound to a single user’s session,
                      but actors persist across web requests. We can
                      asynchronously send an actor messages (whether the user is
                      looking at the web page or not), and have the actor buffer
                      them for transmission to the browser. This means we’ve got
                      almost all of our file upload functionality straight out
                      of the box, without having to do any particularly tricky
                      development.
                    </p>
                    <p>
                      We put a proof-of-concept of the file uploader <a
                        href="https://github.com/junglebarry/CometImport"
                        >on Github</a
                      >. The basic structure of the code is:
                    </p>
                    <ul>
                      <li>
                        When a file is uploaded it is handed off to a thread for
                        processing, and a Comet actor is started to communicate
                        with the client.
                      </li>
                      <li>
                        The processing thread periodically sends messages to the
                        actor, informing it of progress on the file upload.
                      </li>
                      <li>
                        The Comet actor in turn communicates progress to the
                        client.
                      </li>
                    </ul>
                    <p>
                      The great thing about this arrangement is that the user
                      can navigate away from the page without aborting the file
                      upload, and if they later return to the page they will get
                      a progress update. It makes for a very pleasant UI.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag">Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on File upload using Comet Actors</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-62"
              class="post-62 post type-post status-publish format-standard hentry category-code category-racket category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 Jun 2010</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/06/10/selenium-client-for-racket/"
                      rel="bookmark"
                      title="Permanent Link to Selenium client for Racket"
                      >Selenium client for Racket</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://en.wikipedia.org/wiki/Acceptance_testing"
                        >Acceptance testing</a
                      > is a must for any developer of complex web
                      applications. <a href="http://www.seleniumhq.org/"
                        >Selenium</a
                      > is a suite of tools to help automate acceptance by <a
                        href="http://seleniumhq.org/projects/ide/"
                        >recording user actions</a
                      >, turning them into code, and playing them back in a <a
                        href="http://seleniumhq.org/projects/remote-control/"
                        >remote controlled web browser</a
                      >.
                    </p>
                    <p>
                      Now, thanks to a lazy Saturday afternoon and a rather nice
                      bottle of ginger beer, the joys of Selenium are available
                      to the <a href="http://www.racket-lang.org/">Racket</a
                      >community by way of our new <a
                        href="http://github.com/untyped/selenium-plt"
                        >Selenium PLT</a
                      > library. Check it out on our <a
                        href="http://github.com/untyped">Github page</a
                      > and let us know how you get on!
                    </p>
                    <p>
                      Those of you familiar with our open source libraries may
                      know about<a
                        href="http://planet.racket-lang.org/display.ss?package=delirium.plt&owner=untyped"
                        >Delirium</a
                      >, our re-implementation of Selenium using the <a
                        href="http://docs.racket-lang.org/web-server-internal/index.html"
                        >Racket HTTP Server</a
                      >. Delirium was a great project that made for an elegant
                      demonstration of the power of continuations in web
                      development.
                    </p>
                    <p>
                      You may fairly ask the question: why, if Delirium is so
                      good, are we releasing bindings for Selenium? There are
                      several answers to this. The main reason is time:
                      maintaining compatibility across all the major browsers is
                      a difficult process, and that’s time we could be devoting
                      to our other <a
                        href="http://planet.racket-lang.org/display.ss?owner=untyped"
                        >pet projects</a
                      >. Second, we’re doing a lot of web development in other
                      languages these days; for example, we’re currently working
                      on a project using <a href="http://www.scala-lang.org/"
                        >Scala</a
                      > and <a href="http://liftweb.net/">Lift</a>. There are
                      already bindings for Selenium in most of these languages,
                      and it makes sense to use the same tools across the board.
                    </p>
                    <p>
                      Current Delirium users shouldn’t worry – we will continue
                      to develop all of our libraries to maintain compatibility
                      with new versions of Racket. Our plans internally are to
                      switch to Selenium for new projects, and to keep using
                      Delirium for our existing code. If the time does come to
                      switch away from Delirium, you should find translation to
                      our Selenium bindings to be quite straightforward.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Selenium client for Racket</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-84"
              class="post-84 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">17 Apr 2009</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2009/04/17/flapjax-second-batch/"
                      rel="bookmark"
                      title="Permanent Link to Flapjax: Second Batch"
                      >Flapjax: Second Batch</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://flapjax-lang.org/">Flapjax</a> is the
                      awesome functional reactive Javascript library from<a
                        href="http://www.cs.brown.edu/research/plt/"
                        >Brown PLT</a
                      >. We had a <a
                        href="http://www.untyped.com/untyping/2007/01/19/flapjax-in-action/"
                        >good experience</a
                      > with Flapjax some time ago, but in the interim it seemed
                      that the project died. Turns out it was just hibernating.
                      In the last few days Flapjax 2.0 has been released, along
                      with a <a
                        href="http://www.cs.brown.edu/research/pubs/techreports/reports/CS-09-04.html"
                        >tech. report</a
                      > describing the system in more detail than the somewhat
                      brief documentation.
                    </p>
                    <p>
                      To celebrate I coded up a small <a
                        href="http://github.com/noelwelsh/flan/tree/master"
                        >animation library</a
                      > for Flapjax. It’s hosted on Github, not our usual <a
                        href="http://svn.untyped.com/">Subversion server</a
                      > as I wanted to gain a bit more experience with Git.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Flapjax: Second Batch</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-86"
              class="post-86 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">26 Mar 2009</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2009/03/26/more-state-on-the-web/"
                      rel="bookmark"
                      title="Permanent Link to More State on the Web"
                      >More State on the Web</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      As a followup to <a
                        href="http://www.untyped.com/untyping/2009/03/20/the-state-of-state-on-the-web/"
                        >The State of State on the Web</a
                      > I want to mention stateless servlets, a relatively new
                      feature of the PLT web server that make continuations
                      (even) more usable. <a
                        href="http://docs.plt-scheme.org/web-server/stateless-servlets.html"
                        >Stateless servlets</a
                      > are essentially a kind of servlet with serializable
                      continuations. A serialized continuation can then be
                      stored on the hard disk, in the URL, in a cookie, or using
                      any other mechanism you desire. This gets around the issue
                      of memory consumption that is a concern with normal
                      continuations. I don’t have a lot of experience with this
                      kind of servlet, but Jay’s experience is that they are
                      faster than normal servlets and the continuations are
                      typically less than 100 bytes (and so can easily be
                      encoded in a URL). Very nice!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on More State on the Web</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-88"
              class="post-88 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">20 Mar 2009</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2009/03/20/the-state-of-state-on-the-web/"
                      rel="bookmark"
                      title="Permanent Link to The State of State on the Web"
                      >The State of State on the Web</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      There seems to be a miscomprehension that continuation
                      based and RESTful web apps are mutually exclusive.
                      Witness <a href="http://www.nagare.org/">Nagare</a
                      > proudly proclaiming “no explicit URL routing / mapping …
                      no global session object … no REST” as if continuation
                      based frameworks were violently in opposition to these
                      features. This is not the case. Fundamentally the issue is
                      about managing state, and continuations, cookies, and
                      friends are all approaches to solving the problem of
                      encoding state over a stateless protocol. At Untyped we
                      develop web apps that use a combination of continuations,
                      RESTful URLs, and cookies for managing state and I believe
                      this is the correct way to approach the problem. I hope
                      this post will convince you of the merits of our approach.
                    </p>
                    <p>
                      Before looking at the tradeoffs of the different
                      approaches I want to summarise continuations and their use
                      in web applications. Simply put, the continuation of a
                      program is what happens next. In the program <code
                        >(+ 5 (+ 2 1))</code
                      > the continuation of <code>(+ 2 1)</code> is to evaluate<code
                        >(+ 5 [])</code
                      >, where I’ve written <code>[]</code> to indicate the
                      place where the value of <code>(+ 2 1)</code> goes<a
                        name="#footnote-1-src"></a>. Now in Scheme we can
                      capture a continuation, store it in a variable, and
                      generally pass it around like any other value. This means
                      we can effectively suspend a computation (by capturing a
                      continuation) and then resume it at some time in the
                      future (by invoking the continuation, which in Scheme
                      appears as any a function application).
                    </p>
                    <p>
                      Now let’s look at what continuations do for web
                      applications. A continuation-based framework associates a
                      specific server state with a URL, which it does by
                      capturing a continuation when a response is sent to a
                      user. Everytime the user visits that URL they visit the
                      same server state, invoking the captured continuation. As
                      the user navigates around the site they build a history of
                      server states that can be revisited using the back and
                      forward buttons. This has several advantages. Firstly, if
                      you don’t use mutation the back button will just work,
                      because the user is just back to the same program state.
                      Pretty neat. Furthermore, continuations give you procedure
                      call semantics in your web app. Because a continuation is
                      resumed when a URL is visited, to your program it appears
                      as if the user’s request is the returned value of the
                      function that sends your response. It’s as if you were
                      using <code>display</code> and <code>read</code> on the
                      web. This makes programming a lot simpler. For example, if
                      you want to forward the user to a login page you just call
                      the login page function, and it will return to the right
                      place. No need to pass that page a URL to redirect the
                      user to. This can be incredibly productive.
                    </p>
                    <p>
                      Now we’ve seen some of the advantages of continuations, we
                      must consider the cases where the model falls down. There
                      are two main issues: server load, and scope. Server load
                      is simple. Every time you store a continuation on the
                      server you use up some memory (RAM or disk space). At some
                      point you have to reclaim that resource, so people may see
                      “continuation expired” pages if they leave a long time
                      between visits (though this is no worse that session
                      expiry, which is quite common). Often a website has pages
                      that are just displaying the results of simple queries to
                      a database. These pages have no interesting state and
                      using continuations in this case is wasteful of resources.
                      Here RESTful approaches are appropriate, and we use them
                      with, for example, <a
                        href="http://jay-mccarthy.blogspot.com/2009/03/url-based-dispatching-in-plt-web-server.html"
                        >the web server’s dispatchers</a
                      >.
                    </p>
                    <p>
                      Scope is another issue with continuation-based apps.
                      Recall that continuation-based frameworks associate a
                      particular URL, meaning a particular browser window (or
                      tab), with a particular server state. There are some kinds
                      of state that should be shared across all browser windows.
                      Login information is a prevalent example. If I login to a
                      site via one browser window, and then visit that site in
                      another browser window I expect to already be logged in.
                      This isn’t possible with continuations, as they are per
                      window. Cookies, on the other hand, are per browser. So
                      storing my login status in a cookie is the right thing to
                      do.
                    </p>
                    <p>
                      In summary, RESTful approaches (URL routing, for example),
                      cookies, and continuations are complementary and all have
                      a place in web applications. Don’t think, for example,
                      that is you use continuations you automatically reject
                      everything RESTful! Finally, the Anton of Straaten
                      addressed this issue from a different direction in his <a
                        href="http://ll4.csail.mit.edu/slides/rest-slides.pdf"
                        >LL4 talk</a
                      >. Check it out for a different take on the problem.
                    </p>
                    <p>
                      <a name="footnote-1"></a>Equivalently we could say the
                      continuation of <code>(+ 2 1)</code> is <code
                        >(lambda (x) (+ 5 x))</code
                      >. This realisation is the key to continuation passing
                      style, a program transformation useful in compilers and,
                      perhaps surprisingly, AJAX web applications.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The State of State on the Web</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-94"
              class="post-94 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">15 Nov 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/11/15/questions-on-scheme-web-development/"
                      rel="bookmark"
                      title="Permanent Link to Questions on Scheme Web Development"
                      >Questions on Scheme Web Development</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Ben Simon asks questions about <a
                        href="http://benjisimon.blogspot.com/2008/11/more-scheme-development-envy.html"
                        >web development using PLT Scheme</a
                      >. We answer!
                    </p>
                    <ul>
                      <li>
                        <em
                          >[W]hat kind of server do I need to reliably run this
                          puppy?</em
                        > Any Linux VM will do to start with. We use <a
                          href="http://www.bytemark.com/">Bytemark</a
                        >. Amazon EC2 is another option. I recommend installing
                        PLT from source; don’t rely on your distribution’s
                        package to be up-to-date.
                      </li>
                      <li>
                        <em
                          >I wonder what kind of memory usage I’d want to plan
                          for?</em
                        > It really depends on your application but as a guide
                        we’ve run simple apps in 64MBs of memory.
                      </li>
                      <li>
                        <em
                          >I’d have to test out PostgreSQL or MySQL db support
                          to make sure it was strong.</em
                        > PostgreSQL is solid, MySQL is not.
                      </li>
                      <li>
                        <em
                          >I’d have to sort out what the deployment cycle is
                          like. Just copy over files and restart?</em
                        > Yes. <em
                          >Could I do hot deployment of some kind, by reloading
                          scheme files (one of my favorite tricks in the book)?</em
                        > The web server does have some reloading functionality
                        but we haven’t used it (no good reason; it just isn’t
                        something we do).
                      </li>
                      <li>
                        <em
                          >What’s the best production web server arrangement.</em
                        > The PLT web server is solid, but we usually proxy
                        through Apache so we can take advantage of Apache’s
                        flexibility should we need it.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Questions on Scheme Web Development</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-96"
              class="post-96 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">11 Nov 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/11/11/recent-changes-in-the-plt-web-server/"
                      rel="bookmark"
                      title="Permanent Link to Recent changes in the PLT web server"
                      >Recent changes in the PLT web server</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://jay.teammccarthy.org/">Jay McCarthy</a>,
                      maintainer of the PLT web server, has started blogging
                      about improvements he is making to the web server. Start
                      reading<a
                        href="http://jay-mccarthy.blogspot.com/2008/11/stateless-servlets-in-plt-web-server.html"
                        >here</a
                      > and go back through the last six or so posts. It is
                      great to see the web server getting more visibility.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Recent changes in the PLT web server</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-112"
              class="post-112 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Sep 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/09/02/googles-chrome-browser/"
                      rel="bookmark"
                      title="Permanent Link to Google’s Chrome Browser"
                      >Google’s Chrome Browser</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a
                        href="http://googleblog.blogspot.com/2008/09/fresh-take-on-browser.html"
                        >Google is releasing a browser</a
                      >, called Chrome and based on the WebKit engine (same
                      engine as Safari). To introduce the browser Google has
                      published <a
                        href="http://www.google.com/googlebooks/chrome/"
                        >a series of photographs</a
                      > of the Chrome developers at work, and got them to
                      explain in their own words what went into the browser.
                      This does a good job of showing that working at Google
                      really is one sun-shine filled cartoon day after another,
                      but good gracious does it make for tedious reading. Next
                      time just give the technical details as a bunch of text,
                      ok?
                    </p>
                    <p>Anyway, here are my thoughts on Chrome:</p>
                    <ul>
                      <li>
                        First, it has to be said: WE DON’T NEED ANOTHER BROWSER!
                        Working around bugs in existing browsers takes enough
                        time as it is. Google would have to create a truly
                        exceptional product to gain enough market share to make
                        developing from Chrome worthwhile. The only hope for
                        Chrome, at least in the short term, is that it is
                        attractive enough to developers that they use it as
                        their main browser, and so are motivated to make their
                        web apps support it.
                      </li>
                      <li>
                        Perhaps Chrome is going to be Google’s development
                        platform for<a href="http://code.google.com/android/"
                          >Android</a
                        >, it’s mobile phone platform. As <a
                          href="http://www.untyped.com/untyping/archives/2005/05/dashboard_a_gre.html"
                          >we’ve said before</a
                        > there are squillions of web developers and harnessing
                        them is the easiest way to get developers for your
                        platform. Offer extended APIs (e.g. saving data to the
                        local machine) using this familiar technology and you
                        might be onto a winner.
                      </li>
                      <li>
                        If Google’s follows the route suggested above I could
                        see Chrome getting some use for developing client-side
                        applications. In theory Firefox is a compelling
                        environment for cross-platform development. In practice
                        the horrors of <a
                          href="http://developer.mozilla.org/En/XUL">XUL</a
                        > and friends mean you have to be slighlty insane to go
                        down that route. If Chrome does a better job of enabling
                        client-side development I can it gaining some traction.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Google’s Chrome Browser</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-126"
              class="post-126 post type-post status-publish format-standard hentry category-functional-programming category-racket category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 May 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/05/21/the-return-of-scheme-uk/"
                      rel="bookmark"
                      title="Permanent Link to The Return of Scheme UK"
                      >The Return of Scheme UK</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Many years ago I started the <a
                        href="http://schematics.sourceforge.net/scheme-uk/"
                        >Scheme UK</a
                      > user group in merrye London Towne, and all was good.
                      Then I moved to Birmingham and Scheme UK slowly died. I
                      always had the intention I’d start it up again when I had
                      more time, but now I don’t have to! Ewan Higgs has taken
                      the initiative and organised the next meeting for the 28th
                      of May. Dave Griffiths will be talking about his fairly
                      awesome <a href="http://www.pawfal.org/fluxus/">fluxus</a
                      > system. All the details are on the <a
                        href="http://schematics.sourceforge.net/scheme-uk/"
                        >Scheme UK site</a
                      >.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag">Functional Programming</a
                    >,
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Return of Scheme UK</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/category/web-development/"
                      >&laquo; Newer Entries</a
                    ></span
                  >
                  <span class="older"
                    ><a href="/untyping/category/web-development/page/3/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5 current-cat">
                      <a
                        aria-current="page"
                        href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />

    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
