---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Web development - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">
          Posts in the &#8216;Web development&#8217; category
        </h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-246"
              class="post-246 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">11 Oct 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/10/11/debugging-file-handle-exhaustion/"
                      rel="bookmark"
                      title="Permanent Link to Debugging File Handle Exhaustion"
                      >Debugging File Handle Exhaustion</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Dave has been working like a maniac to switch our database
                      code over from SQLite to PostgreSQL. PostgreSQL has two
                      main advantages: it is much faster, and we can open up
                      ODBC connections to the database for other uses that don’t
                      require a web interface. The change is now complete,
                      however it hasn’t been without some difficulties. One
                      problem that bit us was running out of file handles. If
                      you ever have a similar problem, here is how to debug it.
                    </p>
                    <p>
                      On Linux the <code>/proc</code> filesystem reflects a
                      great many kernel resources. The particularly interesting
                      directories for our purposes are:
                    </p>
                    <ul>
                      <li>
                        The files <code>file-nr</code> and <code>file-max</code
                        > in <code>/proc/sys/fs</code>.
                      </li>
                      <li>The per process directories keyed by process ID</li>
                    </ul>
                    <p>
                      The first thing to check is the value of <code
                        >/proc/sys/fs/file-max</code
                      >, which is the maximum number of file handles allowed on
                      your system. This shouldn’t be a problem, but just ensure
                      it isn’t something ridiculously small. On our system we
                      get:
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >$ cat /proc/sys/fs/file-max<br />
                          89367<br />
                        </code>
                      </p>
                    </blockquote>
                    <p>
                      That should be plenty under any reasonable usage, but we
                      can check how many file handles are open by reading the
                      value of<code>/proc/sys/fs/file-nr</code>. On our system
                      this is:
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >$ cat /proc/sys/fs/file-nr<br />
                          920 0 89367</code
                        >
                      </p>
                    </blockquote>
                    <p>
                      This first number is the number of file handles in use.
                      Definitely no problem there. It must be that a process is
                      exceeding the per-process limit on file handles. In our
                      setup this could be either PostgreSQL or MzScheme. We need
                      the process IDs to find out how many handles each is
                      using.
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >$ ps -A | grep postmaster<br />
                          12936 ? 00:00:00 postmaster<br />
                          12937 ? 00:00:00 postmaster<br />
                          12939 ? 00:00:00 postmaster<br />
                          12940 ? 00:00:00 postmaster<br />
                          12941 ? 00:00:00 postmaster<br />
                          $ ps -A | grep mzscheme<br />
                          20382 ? 00:00:26 mzscheme</code
                        >
                      </p>
                      <p></p>
                    </blockquote>
                    <p>
                      We can see how many handles are in use by looking in the
                      directory for each process ID. For example, for the first
                      PostgeSQL process:
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >$ sudo ls -l /proc/12936/fd/ | wc -l<br />
                          4</code
                        >
                      </p>
                    </blockquote>
                    <p>
                      So that PostgreSQL process is using 4 handles. The other
                      processes are using similar numbers. So it must be our
                      MzScheme process that is using up all the handles. We
                      check that in a similar way, and the result is:
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >$ sudo ls -l /proc/20382/fd/ | grep socket | wc -l<br
                          />
                          193<br />
                        </code>
                      </p>
                    </blockquote>
                    <p>Looks like we’ve found our culprit.</p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Debugging File Handle Exhaustion</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-258"
              class="post-258 post type-post status-publish format-standard hentry category-code category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">8 Aug 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/08/08/xml-rpc-1-2/"
                      rel="bookmark"
                      title="Permanent Link to XML-RPC 1.2">XML-RPC 1.2</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Things are rolling along on <a
                        href="http://planet.plt-scheme.org/#xmlrpc.plt"
                        >our XML-RPC library</a
                      > for PLT Scheme. At this point, the client is stable and
                      well tested, and both the servlet and Apache CGI server
                      implementations work and are <em>poorly tested</em>.
                      However, one or two people were asking to make use of the
                      server-side code, so we’ve made it available. <em
                        >Caveat developer</em
                      >.
                    </p>
                    <p>
                      Implementing an XML-RPC servlet is really quite
                      straight-forward:
                    </p>
                    <pre
                      is:raw>
(require (planet "xmlrpc-servlet.ss"
("schematics" "xmlrpc.plt" 1 2)))

(define (add x y) (+ x y))
(add-handler 'math.add add)

(handle-xmlrpc-requests)</pre>
                    <p>
                      Dropping this code somewhere under the ‘/servlets’
                      directory should get you going. I’m still unhappy with the
                      current state of the CGI code:
                    </p>
                    <pre
                      is:raw>
#!/path/to/mzscheme -gqr
(require (lib "config.ss" "planet"))
(PLANET-DIR "/tmp/PLaneTWeb/dir")
(CACHE-DIR "/tmp/PLaneTWeb/cache")
(LINKAGE-FILE "/tmp/PLaneTWeb/linkage")
(LOG-FILE #f)

(require (planet "xmlrpc-cgi.ss"
("schematics" "xmlrpc.plt" 1 2)))

(add-handler 'add (lambda (a b) (+ a b)))

(output-http-headers)

(handle-xmlrpc-requests)</pre>
                    <p>
                      I imagine we’ll absorb the <code>output-http-headers</code
                      > into the <code>handle-xmlrpc-requests</code> macro, and
                      I really want to do something to improve the state of
                      affairs w.r.t. PLaneT package handling in the CGI
                      environment. As I said above: the server code in the
                      library is in motion, and it will likely change.
                    </p>
                    <p>
                      As an aside, I expect stress-testing the server-side code
                      will be interesting; Noel suggested using <a
                        href="http://www.ethereal.com/">Ethereal</a
                      > to record interactions between clients (in other
                      languages) and our server implementations, and then replay
                      those interactions in SchemeUnit unit tests. A neat idea,
                      and not something I had thought of.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on XML-RPC 1.2</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-275"
              class="post-275 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">14 Jul 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/07/14/unaccustomed-as-i-am-to-public-speaking/"
                      rel="bookmark"
                      title="Permanent Link to Unaccustomed as I am to Public Speaking"
                      >Unaccustomed as I am to Public Speaking</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you happen to be in Birmingham on the 18th I’m
                      presenting our current ideas on web development as part of
                      the School of Computer Science’s <a
                        href="http://www.cs.bham.ac.uk/events/seminars/all_seminars.html?series_id=caketalk"
                        >Cake Talk series</a
                      >. The abstract is below. If you intend to attend follow
                      the link for location and time. My slides will go up after
                      the talk.
                    </p>
                    <p><strong>Functional Programming and the Web</strong></p>
                    <p>
                      Continuations, functional reactive programming, and<br />
                      bidirectional programming. A random walk down<br />
                      <a href="http://lambda-the-ultimate.org/"
                        >Lambda the Ultimate</a
                      > or the next Big Thing in web<br />
                      development? In the long and glorious tradition of Cake<br
                      />
                      Talks I will present some half-baked ideas that argue for<br
                      />
                      the later interpretation. Turn up and decide for yourself.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Unaccustomed as I am to Public Speaking</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-263"
              class="post-263 post type-post status-publish format-standard hentry category-racket category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">12 Jul 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/07/12/unlib-unchained/"
                      rel="bookmark"
                      title="Permanent Link to Unlib unchained"
                      >Unlib unchained</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’re pleased to announce the release of <a
                        href="http://planet.plt-scheme.org/#unlib.plt1.0"
                        >Unlib</a
                      >, a library of utility functions. Like most PLT Scheme
                      libraries it is available from <a
                        href="http://planet.plt-scheme.org/">PLaneT</a
                      >. You can also track development via our Subversion
                      server. For now the URL is <code
                        >https://ssl.untyped.com/svn/repos/untyped.com/unlib/</code
                      > so you can checkout the code like this:
                    </p>
                    <blockquote>
                      <p>
                        <code
                          >svn checkout
                          https://ssl.untyped.com/svn/repos/untyped.com/unlib/trunk
                          unlib</code
                        >
                      </p>
                    </blockquote>
                    <p>
                      It’s mostly Dave G’s work, so congratulations to Dave!
                      (And extra congratulation to Dave G who graduated
                      yesterday with a PhD in Computer Science!!)
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Unlib unchained</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-284"
              class="post-284 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Jun 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/06/06/oo-is-convenient/"
                      rel="bookmark"
                      title="Permanent Link to OO is convenient"
                      >OO is convenient</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      One of the recurring themes of the Dagstuhl workshop was
                      “convenience matters”. This is clearly true. All Turing
                      complete programming languages have equivalent power yet
                      we prefer some over others. It’s about what they make
                      easy.
                    </p>
                    <p>
                      This point came to mind when looking at the various
                      abstraction mechanisms in PLT Scheme. The designers of PLT
                      Scheme have analysed the types of abstractions people
                      often use, carefully separated them into different
                      classes, and provided separate mechanisms for each class.
                      If you want to create a unit of functionality you can use
                      the module system. If you want to parameterise code you
                      can use the unit system. If you want to dispatch on type
                      you can use the OO system. This is in contrast to Java,
                      where you get one main abstraction mechanism, the class,
                      which is a module system, a way of parameterising code,
                      and a dispatch mechanism all mashed up into one. This is
                      considered undesireable as you are forced to consider
                      interactions with other mechanisms when you only want to
                      use one. However it has one big advantage: convenience. I
                      don’t often use PLT Scheme’s unit system, so when I do I
                      have to look up the documentation. Same with PLT’s OO
                      system. This tends to make me avoid using them, as I don’t
                      like to spend time reading the docs or figuring out the
                      system. However with Java you’re always writing classes,
                      so it’s familiar and the barrier to use is lower.
                      Convenience matters.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on OO is convenient</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-286"
              class="post-286 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">31 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/31/compile-your-code/"
                      rel="bookmark"
                      title="Permanent Link to Compile Your Code!"
                      >Compile Your Code!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Here at Untyped Central Dave and I are hacking away like
                      lumberjacks, which is a good thing as the project we’re
                      working on is due soon. We’re constantly running tests and
                      loading code into the web server, and we’ve noticed that
                      these processes have been getting slower and slower. It
                      turns out the bottleneck is the time to parse and byte
                      compile our Scheme code. Simply byte compiling the code
                      beforehand has made an incredible difference. Tests that
                      used to take minutes now run in seconds. Two features of
                      PLT Scheme make it really easy to integrate byte
                      compilation into our development process. Firstly, <code
                        >mzc</code
                      > will follow dependencies when given the <code>-k</code
                      > flag. So we just run <code>mzc -k main.ss</code> and all
                      our code is compiled. Also useful is that PLT Scheme does
                      the Right Thing and loads source code if it’s newer than
                      byte compiled code, so we don’t have to constantly
                      recompile our code. So we can just code away as normal,
                      except every time we take a break we run <code>mzc</code>.
                      Eventually we might write some code to recompile at
                      regular intervals (say, every 10 minutes) but for now it
                      isn’t worth the effort.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Compile Your Code!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-313"
              class="post-313 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 Feb 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/02/24/nancy-typing/"
                      rel="bookmark"
                      title="Permanent Link to Nancy Typing">Nancy Typing</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Dave’s on a roll. A few days ago we heard he’s on the
                      ECMAScript committee. Now he follows up with a great post
                      on <a
                        title="The Little Calculist: Nancy typing"
                        href="http://calculist.blogspot.com/2006/02/nancy-typing.html"
                        >Nancy typing</a
                      >(read the post to get the joke), and a PLT Scheme
                      language that implements Javascript (available from <a
                        href="http://planet.plt-scheme.org/300/docs/dherman/javascript.plt/1/0/doc.txt"
                        >PLaneT</a
                      >, of course).
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Nancy Typing</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-319"
              class="post-319 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">15 Feb 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/02/15/lessons-learned-from-big-web-apps/"
                      rel="bookmark"
                      title="Permanent Link to Lessons Learned from Big Web Apps"
                      >Lessons Learned from Big Web Apps</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      There’s a good summary of <a
                        title=""
                        href="http://simon.incutio.com/notes/2006/summit/schachter.txt"
                        >lessons learned from building del.icio.us</a
                      >. It’s a bit telepathic at times but there’s a lot of
                      good stuff in there.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Lessons Learned from Big Web Apps</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-317"
              class="post-317 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">15 Feb 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/02/15/design-patterns-for-web-applications/"
                      rel="bookmark"
                      title="Permanent Link to Design Patterns for Web Applications"
                      >Design Patterns for Web Applications</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      The <a
                        title="Yahoo! Design Pattern Library"
                        href="http://developer.yahoo.net/ypatterns/"
                        >Yahoo! Design Pattern Library</a
                      > is a collection of design patterns for web applications,
                      along with links to the also-newly-released Yahoo! User
                      Interface Code Library. Most of the patterns should be
                      familiar to web application developers but it is good to
                      have them all collected in one place. The code should be
                      good to, though I haven’t had a chance to look at it yet.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Design Patterns for Web Applications</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-333"
              class="post-333 post type-post status-publish format-standard hentry category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">22 Dec 2005</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2005/12/22/printf-in-ajax-sorry-thats-not-debugging/"
                      rel="bookmark"
                      title="Permanent Link to Printf in AJAX? Sorry, that’s not debugging."
                      >Printf in AJAX? Sorry, that’s not debugging.</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <em
                        >This post is one in a continuing series where we
                        internally debate the merits of the over-hyped promise
                        of AJAX…</em
                      >
                    </p>
                    <blockquote>
                      <p>
                        <a
                          href="http://ajaxian.com/archives/2005/12/debugging_ajax.html"
                          >Debugging Ajax Requests in Prototype</a
                        >:
                      </p>
                      <p>
                        How do we debug our Ajax applications? The <a
                          href="http://rails.techno-weenie.net/">Rails Weenie</a
                        > has taken the Ajax Responder feature in Prototype…
                      </p>
                    </blockquote>
                    <p>
                      I’d like to remind Noel that the distance of the Atlantic
                      and business of the Christmas holidays are not going to
                      keep me from pointing out that AJAX is an immature and
                      dangerous platform to build a business on. Yes, I’m glad
                      that GMail is there… and I suppose the Yahoo! Mail beta.
                      However, these are fragile technologies to build upon.
                    </p>
                    <p>
                      How do we debug things written using the Prototype
                      framework?<code>printf</code>. I mean, I’m glad that with
                      AJAX and Rails I can whip something up quickly that “just
                      works.” However, it doesn’t “just have test cases,” or
                      “just get internationalized”, or “just stand up under
                      load.” They’re rapid-prototyping tools, certainly nothing
                      more. AJAX breaks usability standards, pushes data and
                      computation to an unreliable substrate (the client’s web
                      browser), and as the post above provides some evidence
                      for, there are no good debugging or tracing tools
                      available for developers working in heterogeneous browser
                      environments in Javascript.
                    </p>
                    <p>
                      So, Noel, riddle me this: why should developers be willing
                      to take eight steps backwards and be shafted with <code
                        >printf</code
                      > as their primary debugging tool when working with AJAX?
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Printf in AJAX? Sorry, that’s not debugging.</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/category/web-development/page/3/"
                      >&laquo; Newer Entries</a
                    ></span
                  >
                  <span class="older"
                    ><a href="/untyping/category/web-development/page/5/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5 current-cat">
                      <a
                        aria-current="page"
                        href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
