---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Web development - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">
          Posts in the &#8216;Web development&#8217; category
        </h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-130"
              class="post-130 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 Apr 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/04/21/the-biographicon/"
                      rel="bookmark"
                      title="Permanent Link to The Biographicon"
                      >The Biographicon</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://www.biographicon.com/">The Biographicon</a
                      > is a very pretty web site of user contributed
                      biographies. It is also written in Scheme, and <a
                        href="http://www.justin.tv/hackertv/62250/Ethan_Herdrick_on_Running_a_startup_on_Sc"
                        >here’s one of the developers</a
                      > discussing how it was done.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Biographicon</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-143"
              class="post-143 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">29 Feb 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/02/29/announcing-instaservlet/"
                      rel="bookmark"
                      title="Permanent Link to Announcing: Instaservlet"
                      >Announcing: Instaservlet</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve just released a package called <a
                        href="http://planet.plt-scheme.org/display.ss?package=instaservlet.plt&owner=untyped"
                        >Instaservlet</a
                      >, which enables you to get a servlet running in two lines
                      of code, plus the servlet code. Here’s a simple example:
                    </p>
                    <div>
                      <pre
                        is:raw>
  (require (planet "instaservlet.ss" ("untyped" "instaservlet.plt" 1)))

(define (servlet request)
'(html (head (title "It's working!"))
(body (h1 "Instaservlet is in the house!"))))

(go! servlet)</pre>
                    </div>
                    <p>
                      Try it in <a href="http://pre.plt-scheme.org/installers/"
                        >PLT Scheme 3.99</a
                      > and see!
                    </p>
                    <p>
                      This package arose out of the development work I did on <a
                        href="http://smutshorts.com/">Smut Shorts</a
                      >, which made me I realise we needed to support a quick
                      start for web development. Instaservlet is the first step
                      in doing this. Not only does it setup the servlet, it does
                      it in a robust manner. Continuations are managed using
                      the <a
                        href="http://docs.plt-scheme.org/web-server/lru_ss.html"
                        >LRU manager</a
                      >, which can be a bit difficult to setup but it much more
                      robust than the time-out manager. Instaservlet uses some
                      sensible defaults which should work for most small to
                      medium size sites — they’re the setting used on Smut
                      Shorts, so we know they can handle a reasonable load. It
                      also sets up a nice default page to handle continuation
                      expiry. Instaservlet is good enough to get you started
                      with, and future versions will enable more customisations
                      so it can scale to any website build using PLT Scheme.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Announcing: Instaservlet</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-149"
              class="post-149 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">14 Feb 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/02/14/happy-valentines-from-untyped/"
                      rel="bookmark"
                      title="Permanent Link to Happy Valentine’s from Untyped"
                      >Happy Valentine’s from Untyped</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      For Valentine’s Day we have created a new website,&lt;a<br
                      />
                      href=&#8221;http://smutshorts.com/&#8221;&gt;Smut Shorts. If
                      you have<br />
                      something to say about love or lust, and can do so in 500<br
                      />
                      characters or less, then please add it to the growing number<br
                      />
                      of “shorts”. It’s anonymous and fun. Just, no<br />
                      porn thanks.
                    </p>
                    <p>
                      If you’re reading this site, you’re probably interested<br
                      />
                      in the technical details behind Smut Shorts. It is a<br />
                      collaboration between a number of people, most of whom have<br
                      />
                      chosen to be anonymous. The majority of the coding was done<br
                      />
                      by yours truly, and therefore in Scheme. It is running on<br
                      />
                      the PLT Scheme webserver (version 3.99) and uses PostgreSQL<br
                      />
                      as the back-end. I coded it up in about two days. It was a<br
                      />
                      side-project, so it was a bit of rush job and there is lots<br
                      />
                      still to do. If you break the site let me know and I’ll try<br
                      />
                      to fix it.
                    </p>
                    <p>
                      A few interesting lessons were learned from doing this<br
                      />
                      site. It all comes down to scalability, which is something<br
                      />
                      that has recently been on my mind a lot. In this case we<br
                      />
                      want to scale down to the low end — the guy who is<br />
                      just hacking up something in his spare time and wants to get<br
                      />
                      it done in a hurry. Our frameworks, Snooze and Lylux, are<br
                      />
                      pretty good but they don’t support a fast start. You have<br
                      />
                      to create a whole bunch of files before you’ve even got your<br
                      />
                      first page up. Furthermore, we’ve always avoided creating a<br
                      />
                      templating mechanism, as we’ve said that we’d rather use<br
                      />
                      smart people who can balance parens than create this<br />
                      unnecessary divide between designers and programmers. I now<br
                      />
                      recognise this is a mistake. Had we a templating mechanism<br
                      />
                      I could have pushed more design work to my collaborators.<br
                      />
                      It’s not that they’re stupid (far far from it) but they’re<br
                      />
                      busy and don’t have time to learn even Scheme basics just so<br
                      />
                      they change a few lines of text. If we’re gonna grow the<br
                      />
                      Scheme web-hacking community it has to start with dudes<br
                      />
                      messing around in their spare time, so we need to address<br
                      />
                      the low-end of scale. The high end of scale can wait till<br
                      />
                      the IPO <img
                        decoding="async"
                        src="http://untyped.wpengine.com/wp-includes/images/smilies/icon_wink.gif"
                        alt=";-)"
                      />
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Happy Valentine’s from Untyped</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-159"
              class="post-159 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Dec 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/12/07/announcing-delirium/"
                      rel="bookmark"
                      title="Permanent Link to Announcing: Delirium"
                      >Announcing: Delirium</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Delirium is a web-browser automation toolkit, which means
                      it’s a Scheme library that provides a bunch of functions
                      that you can use to control a web browser. We expect the
                      primary use will be for web testing, and Delirium can be
                      used inside SchemeUnit like any other Scheme library.
                    </p>
                    <p>
                      For the Schemers Delirium isn’t anything special, but we
                      believe the use of continuations make Delirium a major
                      advance over similar web testing tools like Selenium. If
                      you write your server code in Scheme you can directly test
                      how your server side responds to web tests with tests
                      running on the same server. That is to say a test can
                      interleave calls to the web browser and to the server side
                      code, which is impractical without continuations. This
                      features makes it much easier to write reliable and
                      comprehensive tests.
                    </p>
                    <p>
                      Delirium is on <a
                        href="http://planet.plt-scheme.org/display.ss?package=delirium.plt&owner=untyped"
                        >PLaneT</a
                      >. Note the documentation was translated by hand from
                      Scribble source. Some errors may have been introduced
                      during the translation.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Announcing: Delirium</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-163"
              class="post-163 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 Nov 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/11/23/custom-dispatchers-in-the-plt-scheme-web-server/"
                      rel="bookmark"
                      title="Permanent Link to Custom Dispatchers in the PLT Scheme Web Server"
                      >Custom Dispatchers in the PLT Scheme Web Server</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve just released &lt;a<br />
                      href=&#8221;http://planet.plt-scheme.org/display.ss?package=instaweb.plt&amp;owner=schematics&#8221;&gt;Instaweb<br
                      />
                      2.0. Instaweb is our utility that takes care of setting<br
                      />
                      up the PLT web-server and running servlets. If you have a<br
                      />
                      servlet in a file called <code>servlet.ss</code> with<br
                      />
                      Instaweb you just need to write the following lines to get<br
                      />
                      it running:
                    </p>
                    <pre
                      is:raw>
(require (planet "instaweb.ss" ("schematics" "instaweb.plt" 2)))
(instaweb)</pre>
                    <p>
                      The new version of Instaweb includes many new options and<br
                      />
                      works in a slightly different way to the 1.0 branch. To my<br
                      />
                      mind the best new feature is that Instaweb now configures<br
                      />
                      the web-server to pass to the servlet <em>all</em
                      > requests<br />
                      that don’t match a file in the <code>htdocs</code><br />
                      directory. This means your servlet no longer has to live<br
                      />
                      under a URL starting with <code>/servlets</code>. You can<br
                      />
                      &lt;a<br />
                      href=&#8221;http://planet.plt-scheme.org/package-source/schematics/instaweb.plt/2/1/doc.txt&#8221;&gt;read<br
                      />
                      the documentation to get the full details of what’s new.<br
                      />
                      What I want to talk about here is how we implelemented this,<br
                      />
                      as it illustrates some very nice features of the web-server<br
                      />
                      that aren’t well known.
                    </p>
                    <p>
                      In the web-server’s terminology a dispatcher is a<br />
                      function that may generate a response given a request.<br
                      />
                      Examples includes the filesystem dispatcher, which responds<br
                      />
                      to requests with the contents of a file, and the servlet<br
                      />
                      dispatcher, which invokes a servlet. Dispatchers are<br />
                      arranged in a list. The first dispatcher in the list<br />
                      inspects the request and, if it decides the request is<br
                      />
                      relevant, generates a response. Otherwise control is passed<br
                      />
                      to the next dispatcher in the list. For some time now the<br
                      />
                      web-server has had a configurable dispatcher pipeline, which<br
                      />
                      can be set by simply passing a value with the<br />
                      <code>#:dispatch</code> keyword to the <code>serve</code
                      ><br />
                      function.
                    </p>
                    <p>
                      The web-server provides a number of dispatchers, all in<br
                      />
                      the <code
                        >&lt;a<br />
                        href="http://svn.plt-scheme.org/plt/trunk/collects/web-server/dispatchers/"&gt;dispatchers</code
                      ><br />
                      subdirectory of the <code>web-server</code> collection.<br
                      />
                      They all provide a <code>make</code> function that does
                      most<br />
                      of the work. Here’s how to use the file, servlet, and<br
                      />
                      sequence dispatchers, the most generally useful ones:
                    </p>
                    <ol>
                      <li>
                        The file dispatcher, in<br />
                        <code>dispatch-files.ss</code>, takes a single
                        parameter, a<br />
                        function that converts a URL to a path (and another value<br
                        />
                        that the dispatcher ignores). The path can name a file,<br
                        />
                        which the dispatcher will serve if such a file actually<br
                        />
                        exists, or it can name a directory, in which case the<br
                        />
                        dispatcher will look for a file within that directory called<br
                        />
                        <code>index.html</code> or <code>index.htm</code>.
                        <p>
                          To use the file dispatcher you will probably want the<br
                          />
                          handy <code>make-url-&gt;path</code> function in<br />
                          <code>filesystem-map.ss</code>. Pass this function a
                          base<br />
                          path (the directory where your files live), and it will<br
                          />
                          return a function suitable to pass to the file<br />
                          dispatcher.
                        </p>
                        <p>Here’s an example of use:</p>
                        <pre
                          is:raw>
(require
(prefix file: (lib "dispatch-files.ss" "web-server" "dispatchers"))
(lib "filesystem-map.ss" "web-server" "dispatchers"))

(define base-path (string-&gt;path "/my/directory/of/files"))

;; htdocs-url-&gt;path : path -&gt; (url -&gt; path (list-of path-element))
(define (htdocs-url-&gt;path path)
(make-url-&gt;path (path-&gt;complete-path path)))

;; dispatch-htdocs : (connection request -&gt; response)
(define dispatch-htdocs
(file:make #:url-&gt;path (htdocs-url-&gt;path base-path)))</pre>
                      </li>
                      <li>
                        The servlet dispatcher, in <code
                          >dispatch-servlets.ss</code
                        > is a bit more difficult to use as you need a function
                        from the <code>private</code>subcollection of the
                        web-server, suggesting the code reorganisation isn’t
                        quite finished. The <code>make</code> function takes two
                        arguments, the first being a <code>cache-table</code>,
                        and the second being a function that, like for the file
                        dispatcher, maps URLs to paths. To construct a <code
                          >cache-table</code
                        > use the following lines of code:
                        <pre
                          is:raw>
(require
(lib "cache-table.ss" "web-server" "private"))

(define cache-table (box (make-cache-table)))</pre>
                        <p>
                          If you want all URLs to go a particular servlet, as in
                          Instaweb, the URL to path function just needs to
                          return the path of the servlet. The function used in
                          Instaweb is this:
                        </p>
                        <pre
                          is:raw>
;; serlvet-url-&gt;path : url -&gt; path (list-of path-element)
(define (servlet-url-&gt;path url)
(let ([complete-servlet-path (path-&gt;complete-path servlet-path)])
(values complete-servlet-path (explode-path* complete-servlet-path))))</pre>
                        <p>Now we can create a dispatcher as follows:</p>
                        <pre
                          is:raw>
;; clear-servlet-cache! : -&gt; void
;; dispatch-servlets:    connection request -&gt; response
(define-values (clear-servlet-cache! dispatch-servlets)
(servlet:make (box (make-cache-table))
#:url-&gt;path servlet-url-&gt;path))</pre>
                      </li>
                      <li>
                        The sequencer dispatcher couldn’t be easier to use. It
                        just takes any numbe of dispatchers and creates new
                        dispatcher that tries them in sequence. For example:
                        <pre
                          is:raw>
;; dispatch-all : connection request -&gt; response
(define dispatch-all
(sequencer:make dispatch-htdocs
dispatch-servlets))</pre>
                      </li>
                    </ol>
                    <p>
                      With the above you should be able to create your own
                      custom dispatchers. If you have problems just read the
                      (very short) Instaweb code!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Custom Dispatchers in the PLT Scheme Web Server</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-177"
              class="post-177 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/02/a-scheme-case-study/"
                      rel="bookmark"
                      title="Permanent Link to A Scheme Case Study"
                      >A Scheme Case Study</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you’ve looked at the <a
                        href="http://www.informatik.uni-bonn.de/~ralf/icfp07.html"
                        >ICFP 2007</a
                      > preliminary program you’ll have noticed we’re presenting
                      “Experience Report: Scheme in Commercial Web Application
                      Development”. We submitted the final version of the paper
                      a couple of weeks ago, and I’ve finally got around to
                      putting it<a href="/downloads/icfp068-welsh.pdf">online</a
                      > for your reading pleasure. The contents shouldn’t come
                      as a surprise: a summary of our experiences developing
                      commercial web applications in PLT Scheme over the last
                      year. We’ve tried to be honest, including the good and
                      bad. Hopefully the points you’ll take away are that we’ve
                      been able to overcome initial problems with stability, and
                      in a fairly short time we’ve developed a framework that
                      compares well to popular alternatives such as Ruby on
                      Rails.
                    </p>
                    <p>
                      The four page limit on experience reports is very tight,
                      and unfortunately our experiences with <a
                        href="http://www.flapjax-lang.org/">Flapjax</a
                      > were cut from the final version. So let me say here that
                      if you write Javascript code you need to check out
                      Flapjax! Our Flapjax code is about half the size of the
                      equivalent Javascript, and this is without using the
                      Flapjax compiler. The only problem with Flapjax is
                      performance in large networks. This is more a property of
                      the poor quality of Javascript interpreters: Wolfenstein
                      3D on my 286 back in 1990-something was smoother than <a
                        href="http://developer.mozilla.org/samples/raycaster/RayCaster.html"
                        >Javascript raycaster</a
                      > running today on my Powerbook. Luckily the new
                      developments taking place at Mozilla will alleviate this
                      problem in the next few years.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on A Scheme Case Study</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-186"
              class="post-186 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">20 Jun 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/06/20/selenium-code-released/"
                      rel="bookmark"
                      title="Permanent Link to Selenium Code Released"
                      >Selenium Code Released</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      The Selenium code I talked about in <a
                        href="http://www.untyped.com/untyping/archives/2007/05/xml_transformat.html"
                        >an earlier post</a
                      > has been<a
                        href="http://planet.plt-scheme.org/display.ss?package=selenium.plt&owner=untyped"
                        >released to PLaneT</a
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Selenium Code Released</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-222"
              class="post-222 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">22 Jan 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/01/22/large-scale-web-site-development/"
                      rel="bookmark"
                      title="Permanent Link to Large Scale Web Site Development"
                      >Large Scale Web Site Development</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Two interesting case studies on large web sites: <a
                        href="http://www.baselinemag.com/print_article2/0,1217,a=198614,00.asp"
                        >MySpace</a
                      > and <a
                        href="http://www.addsimplicity.com/downloads/eBaySDForum2006-11-29.pdf%3Cbr%20/%3E"
                        >EBay</a
                      >. They are remarkably similar. Or perhaps it should be
                      unremarkable. You don’t get many chances to get that sort
                      of system wrong, so it is natural that different groups
                      should converge to tried and tested solutions. Ezra Kilty <a
                        href="http://ezrakilty.net/research/2006/12/transactions.html"
                        >offers some thoughts on EBay and the great Goog</a
                      >, who of course have a system way different and way
                      cooler than anyone else’s.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Large Scale Web Site Development</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-224"
              class="post-224 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">19 Jan 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/01/19/flapjax-in-action/"
                      rel="bookmark"
                      title="Permanent Link to Flapjax in Action"
                      >Flapjax in Action</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      In a few days we’ll be releasing our first code using <a
                        href="http://www.flapjax-lang.org/">Flapjax</a
                      > to drive the user interface. The core of the system is
                      a <a href="http://en.wikipedia.org/wiki/Grid_view"
                        >grid view</a
                      > that runs in the browser. The user can edit data in
                      place, and when they move to a new row changes are sent to
                      the server. Invalid data is flagged in the grid, and
                      mousing over shows the reason for the error. Given we’re
                      probably the first people in the world to release
                      commercial code using Flapjax a few notes on our
                      experience are worthwhile.
                    </p>
                    <p>
                      The summary is: Flapjax worked very well for us. Flapjax
                      code is much smaller and faster to write than the
                      equivalent plain Javasscript, and Flapjax insulates you
                      from most of the cross-browser issues. If your application
                      revolves around events, and most Javscript applications
                      do, Flapjax will probably be a good fit. However current
                      Javascript implementations are so slow that they can limit
                      how much you can take advantage of Flapjax.
                    </p>
                    <p>
                      Now, the details. We went through two design. Our first
                      prototype rendered the <code>TABLE</code> that contained
                      the grid data as one enormous Behaviour. Every field was
                      an “edit in place” field, using more Flapjax code. (See <a
                        href="http://josephscott.org/code/js/eip/example.html"
                        >here</a
                      > if you don’t know what an edit in place field is, though
                      note that this isn’t the code we used.) This plays very
                      nicely with the Flapjax model, as changes to any part grid
                      automatically get updated in the browser. It worked fine
                      for small tables, but scaled really badly; for large
                      tables it was so slow to load and redraw that the browser
                      would kill the script.
                    </p>
                    <p>
                      The main problem with our first prototype is that <a
                        href="http://www.quirksmode.org/dom/innerhtml.html"
                        >browsers are really slow at rendering elements inserted
                        using the DOM</a
                      >. Our second design made two major changes to overcome
                      these problems. First we dropped edit in place fields in
                      favour of plain old <code>INPUT</code> elements, and then
                      got the server to render the HTML instead of building the
                      grid dynamically on the client side. So essentially we
                      used Flapjax to handle events from the grid, but not to
                      render the grid. This design is much faster; for example a
                      grid with a thousand cells renders in about a second.
                    </p>
                    <p>
                      As with any new technology, the community still has to
                      develop best practices and design patterns to make it
                      easier to adopt Flapjax. The best design for error
                      handling is <a
                        href="http://groups.google.com/group/flapjax/browse_frm/thread/dd3da7c6991d6d6e/#"
                        >still an open issue</a
                      >. Architectures for mixing OO and FRP (Flapjax) code are
                      not well defined, though there is <a
                        href="http://www.cs.brown.edu/~sk/Publications/Papers/Published/ick-adapt-oo-fwk-frp/"
                        >prior work</a
                      >. However we feel the benefit we got from Flapjax, in
                      terms of shorter code and a faster development cycle,
                      outweighed the cost.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Flapjax in Action</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-244"
              class="post-244 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">25 Oct 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/10/25/firefox-2-0-review/"
                      rel="bookmark"
                      title="Permanent Link to Firefox 2.0 Review"
                      >Firefox 2.0 Review</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I’m editing this post using the<br />
                      <a href="https://addons.mozilla.org/firefox/1730/"
                        >Performancing</a
                      > extension for the new <a
                        href="http://www.mozilla.com/en-US/press/mozilla-2006-10-24.html"
                        >Firefox 2.0</a
                      > browser. Being a web whore I simply had to download the
                      latest version of Firefox as soon as it was out.
                    </p>
                    <p>
                      If anything, Firefox 2.0 is proof that the browser is now
                      a stable product. The changes from 1.5 are incremental.
                      There is nothing that particularly excites me on the user
                      end.
                    </p>
                    <p>
                      From the point of view of a <a
                        href="http://developer.mozilla.org/en/docs/Firefox_2_for_developers"
                        >developer</a
                      >, it’s a different story. Javascript 1.7 continues the
                      evolution of Javascript from a hairball to a language you
                      wouldn’t be embarassed to take to school to meet your
                      Professors. Array comprehensions, proper lexical scoping,
                      and generators are the main features. Support for the <a
                        href="http://www.whatwg.org/specs/web-apps/current-work/#scs-client-side"
                        >WhatWG client-side session and persistent store</a
                      > adds more possibilities for storing continuations on the
                      client-side. I’m interested to see that their motivating
                      example is exactly the same as the one <a
                        href="http://www.cs.brown.edu/~sk/">Shriram</a
                      > uses when proselytizing continuations (the “Orbitz
                      bug”).
                    </p>
                    <p>
                      Of course, to use most of this you’re stuck with Firefox.
                      However, as Firefox evolves further from the functionality
                      offered by IE it becomes more compelling as a platform is
                      its own right. Some<a
                        href="http://37signals.com/svn/archives2/browser_stats.php"
                        >browser stats</a
                      > show encouraging numbers of people are using Firefox.
                      Give it a few years and IE support may legitimately be
                      optional.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Firefox 2.0 Review</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/category/web-development/page/2/"
                      >&laquo; Newer Entries</a
                    ></span
                  >
                  <span class="older"
                    ><a href="/untyping/category/web-development/page/4/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5 current-cat">
                      <a
                        aria-current="page"
                        href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
