---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Code - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">Posts in the &#8216;Code&#8217; category</h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-116"
              class="post-116 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">31 Jul 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/07/31/schemeunit-3-a-new-approach-to-testing/"
                      rel="bookmark"
                      title="Permanent Link to SchemeUnit 3: A New Approach to Testing"
                      >SchemeUnit 3: A New Approach to Testing</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a
                        href="http://planet.plt-scheme.org/display.ss?package=schemeunit.plt&owner=schematics"
                        >SchemeUnit</a
                      > 3 has been released. Although the interface remains
                      compatible with version 2 the underlying philosophy of
                      SchemeUnit has changed in a significant way. The following
                      is extract from the SchemeUnit manual, describing the new
                      approach.
                    </p>
                    <p>
                      SchemeUnit is designed to allow tests to evolve in step
                      with<br />
                      the evolution of the program under testing. SchemeUnit<br
                      />
                      scales from the unstructed checks suitable for simple<br
                      />
                      programs to the complex structure necessary for large<br
                      />
                      projects.
                    </p>
                    <p>
                      Simple programs, such as those in How to Design Programs,<br
                      />
                      are generally purely functional with no setup required to<br
                      />
                      obtain a context in which the function may operate.<br />
                      Therefore the tests for these programs are extremely simple:<br
                      />
                      the test expressions are single checks, usually for<br />
                      equality, and there are no dependencies between expressions.<br
                      />
                      For example, a HtDP student may be writing simple list<br
                      />
                      functions such as length, and the properties they are<br
                      />
                      checking are of the form:
                    </p>
                    <div>
                      <pre
                        is:raw>
(equal? (length null) 0)
(equal? (length '(a)) 1)
(equal? (length '(a b)) 2)</pre>
                    </div>
                    <p>
                      SchemeUnit directly supports this style of testing. A
                      check<br />
                      on its own is a valid test. So the above examples may be<br
                      />
                      written in SchemeUnit as:
                    </p>
                    <div>
                      <pre
                        is:raw>
(check-equal? (length null) 0)
(check-equal? (length '(a)) 1)
(check-equal? (length '(a b)) 2)</pre>
                    </div>
                    <p>
                      Simple programs now get all the benefits of SchemeUnit
                      with<br />
                      very little overhead.
                    </p>
                    <p>
                      There are limitations to this style of testing that more<br
                      />
                      complex programs will expose. For example, there might be<br
                      />
                      dependencies between expressions, caused by state, so that<br
                      />
                      it does not make sense to evaluate some expressions if<br
                      />
                      earlier ones have failed. This type of program needs a way<br
                      />
                      to group expressions so that a failure in one group causes<br
                      />
                      evaluation of that group to stop and immediately proceed to<br
                      />
                      the next group. In SchemeUnit all that is required is to<br
                      />
                      wrap a test-begin expression around a group of<br />
                      expressions:
                    </p>
                    <div>
                      <pre
                        is:raw>
(test-begin
(setup-some-state!)
(check-equal? (foo! 1) 'expected-value-1)
(check-equal? (foo! 2) 'expected-value-2))</pre>
                    </div>
                    <p>Now if any expression within the test-begin</p>
                    <p>
                      expression fails no further expressions in that group will<br
                      />
                      be evaluated.
                    </p>
                    <p>
                      Notice that all the previous tests written in the simple<br
                      />
                      style are still valid. Introducing grouping is a local<br
                      />
                      change only. This is a key feature of SchemeUnit’s support<br
                      />
                      for the evolution of the program.
                    </p>
                    <p>
                      The programmer may wish to name a group of tests. This is<br
                      />
                      done using the test-case expression, a simple<br />
                      variant on test-begin:
                    </p>
                    <div>
                      <pre
                        is:raw>
(test-case
"The name"
... test expressions ...)</pre>
                    </div>
                    <p>
                      Most programs will stick with this style. However,<br />
                      programmers writing very complex programs may wish to<br
                      />
                      maintain separate groups of tests for different parts of the<br
                      />
                      program, or run their tests in different ways to the normal<br
                      />
                      SchemeUnit manner (for example, test results may be logged<br
                      />
                      for the purpose of improving software quality, or they may<br
                      />
                      be displayed on a website to indicate service quality). For<br
                      />
                      these programmers it is necessary to delay the execution of<br
                      />
                      tests so they can processed in the programmer’s chosen<br
                      />
                      manner. To do this, the programmer simply wraps a test-suite<br
                      />
                      around their tests:
                    </p>
                    <div>
                      <pre
                        is:raw>
(test-suite
"Suite name"
(check ...)
(test-begin ...)
(test-case ...))</pre>
                    </div>
                    <p>
                      The tests now change from expressions that are immediately<br
                      />
                      evaluated to objects that may be programmatically<br />
                      manipulated. Note again this is a local change. Tests<br
                      />
                      outside the suite continue to evaluate as before.
                    </p>
                    <h4>
                      2.1<tt> </tt><a name="(part._.Historical_.Context)"
                      ></a>Historical Context
                    </h4>
                    <p>
                      Most testing frameworks, including earlier versions of<br
                      />
                      SchemeUnit, support only the final form of testing. This is<br
                      />
                      likely due to the influence of the SUnit testing framework,<br
                      />
                      which is the ancestor of SchemeUnit and the most widely used<br
                      />
                      frameworks in Java, .Net, Python, and Ruby, and many other<br
                      />
                      languages. That this is insufficient for all users is<br
                      />
                      apparent if one considers the proliferation of “simpler”<br
                      />
                      testing frameworks in Scheme such as SRFI-78, or the the<br
                      />
                      practice of beginner programmers. Unfortunately these<br
                      />
                      simpler methods are inadequate for testing larger<br />
                      systems. To the best of my knowledge SchemeUnit is the only<br
                      />
                      testing framework that makes a conscious effort to support<br
                      />
                      the testing style of all levels of programmer.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on SchemeUnit 3: A New Approach to Testing</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-120"
              class="post-120 post type-post status-publish format-standard hentry category-code category-racket"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">13 Jun 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/06/13/plt-scheme-4-is-out/"
                      rel="bookmark"
                      title="Permanent Link to PLT Scheme 4 is out"
                      >PLT Scheme 4 is out</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://www.plt-scheme.org/">PLT Scheme 4.0</a> is
                      out. We’ve been using the pre-releases for months so this
                      release isn’t particularly significant to us. However, for
                      Universities and other institutions having an official
                      release is important. I do think that too many individual
                      developers stick with out-dated versions of PLT Scheme.
                      The number of questions about 372, which is at least a
                      year old, amazes me. Pre-releases are so much better! Go
                      upgrade!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on PLT Scheme 4 is out</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-132"
              class="post-132 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Apr 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/04/06/science-and-self-directed-learners/"
                      rel="bookmark"
                      title="Permanent Link to Science and Self-Directed Learners"
                      >Science and Self-Directed Learners</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over on <a
                        href="http://lambda-the-ultimate.org/node/2691#comment"
                        >LtU</a
                      > I was asked how to help beginning programmers become
                      self-directed learners. I have taught a number of
                      students, but not in a context where I’ve been able to
                      really make a difference in their programming practice, so
                      I don’t have an answer to the whole question (though my
                      instinct is that the <a
                        href="http://softwarecraftsmanship.oreilly.com/wiki"
                        >apprenticeship</a
                      > method is the right way to go). However I try to teach
                      one process that I think is an essential step towards
                      becoming a self-directed learner. That process is <strong
                        >the big idea called science</strong
                      >, and I’m not talking about <a
                        href="http://www.qwantz.com/archive/000067.html"
                        >lab coats and chunky glasses</a
                      >
                    </p>
                    <p>
                      When working with students I always get asked what the
                      result of evaluating some piece of code will be. What I
                      tell the students is to<strong>ask the computer</strong
                      > via a test case or the REPL. Testing ideas by
                      experimentation is <a href="http://xkcd.com/397/"
                        >science in its simplest and most immediate form</a
                      >, and a crucial step in developing the student’s ability
                      to solve their own problems.
                    </p>
                    <p>
                      Application of science to programming is not restricted to
                      students;<strong
                        ><a
                          href="http://en.wikipedia.org/wiki/Test-driven_development"
                          >test-driven development</a
                        > is science</strong
                      >. So what is science then? I simplify, but basically
                      three things: <strong
                        >a theory to test, an experiment to test it, and a
                        standard of proof</strong
                      > (note we can never truly prove a theory, just simply not
                      be able to disprove it). This is exactly when a unit test
                      is. For example, a Scheme programmer might pose the theory
                      “the <code>string-&gt;number</code> function will convert
                      strings padded with whitespace characters to numbers”,
                      formulate the experiment<code
                        >(equal? (string-&gt;number “ 200”) 200)</code
                      >, and have as the standard of proof the boolean output of
                      this single experiment.
                    </p>
                    <p>
                      When most people think of the scientific method they think
                      of the lengthy and expensive double-blind trials used in,
                      for example, medical trials. A really important point is
                      to realise that when <em>you</em> do science, <strong
                        >you choose the standard of proof</strong
                      >. For example, as most computer programs are
                      deterministic a few tests can be sufficient to show a
                      property holds. When dealing with a concurrent program, or
                      some other non-deterministic system, you may need to be
                      more rigourous.
                    </p>
                    <p>
                      So there we have it. All programmers are scientists to
                      some extent, though they might not know it. We can extend
                      the use of experimentation to answer other questions, such
                      as determining if productivity is affected by changes to
                      software development process. Doing this in a lightweight
                      way is the intention of the <a
                        href="http://planet.plt-scheme.org/display.ss?package=si.plt&owner=schematics"
                        >Simple Improvement</a
                      > package, though I haven’t had the time to get that
                      library to a really useful state. Perhaps in a later post
                      I’ll go through the ideas behind it. In the mean time, get
                      experimenting (lab coats optional).
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Science and Self-Directed Learners</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-147"
              class="post-147 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">15 Feb 2008</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2008/02/15/requiring-up-and-down-syntax-levels/"
                      rel="bookmark"
                      title="Permanent Link to Requiring up and down syntax levels"
                      >Requiring up and down syntax levels</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you do any macro programming in PLT Scheme you are sure
                      to run into the dreaded “<code
                        >no #%app syntax transformer is bound</code
                      >” error message at some point. Though puzzling, the fix
                      is actually quite simple in almost all cases. Assuming
                      you’re using 3.99, you either need to:
                    </p>
                    <ol>
                      <li><code>(require (for-syntax scheme/base))</code></li>
                      <li><code>(require (for-template scheme/base))</code></li>
                    </ol>
                    <p>
                      What the error means is that some syntax has expanded in a
                      function application, but <code>#%app</code>, the PLT
                      Scheme primitive that actually handles application, is not
                      bound in the phase in which the syntax is being evaluated.
                      Requiring <code>for-syntax</code> will bind <code
                        >#%app</code
                      > in the phase before the current evaluation phase, while
                      requiring <code>for-template</code> will bind <code
                        >#%app</code
                      > in the phase after. In most cases you want<code
                        >for-syntax</code
                      >. However, if you are writing functions that return
                      syntax that is then inserted into a program (such a
                      function would be required <code>for-syntax</code
                      > elsewhere) you must use the other form, to make sure the
                      syntax has <code>#%app</code> available to it.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Requiring up and down syntax levels</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-157"
              class="post-157 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Dec 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/12/07/icfp-2007-in-review/"
                      rel="bookmark"
                      title="Permanent Link to ICFP 2007 In Review"
                      >ICFP 2007 In Review</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      At last — the long awaited ICFP post! In summary: ICFP was
                      awesome. Freiburg is lovely, the German beer is fantastic,
                      and everyone at the conference was very friendly. It was
                      great to put faces to people we’ve conversed with for
                      years, to meet old friends, and to make new ones.
                    </p>
                    <p>
                      We gave two talks, one at ICFP on our work building web
                      sites in Scheme (<a
                        href="http://www.untyped.com/downloads/icfp068-welsh.pdf"
                        >paper here</a
                      >), and one at <a href="http://cufp.galois.com/">CUFP</a
                      > (<a
                        href="http://cufp.galois.com/slides/2007/NoelWelsh.tar.gz"
                        >PLT Slideshow slides</a
                      >
                      <a href="http://cufp.galois.com/slides/2007/NoelWelsh.pdf"
                        >PDF slides</a
                      >). Both were, I think, well received: a few people
                      expressed some interest in having us come and talk to
                      their groups, and the CUFP organisers invited us to join
                      them at dinner.
                    </p>
                    <p>
                      There was a definite buzz about ICFP. It seems functional
                      languages are beginning to take off — CUFP doubled its
                      attendence over last year, and ICFP strained the capacity
                      of the hotel. There was something of a reality distortion
                      field in place though. After a few days at the conference
                      you could begin to believe the entire software market
                      consisted of either program verification tools in Haskell
                      or telephony apps in Erlang. There was little
                      representation from web developers, who I think must make
                      up the largest group of commercial developers. I believe
                      this is because Haskell users really dominate ICFP, and
                      Haskell doesn’t have a particularly good web development
                      story as far as I know.
                    </p>
                    <p>
                      It was interesting to see how the other communities are
                      developing. The Haskell guys had a <a
                        href="http://www.haskell.org/haskellwiki/Hac_2007_II"
                        >3-day Hackathon</a
                      > right after ICFP, which is pretty impressive, and there
                      is a <a href="http://www.realworldhaskell.org/blog/"
                        >practical Haskell</a
                      > book in development, something which is needed for
                      Scheme. Erlang seemed to have slightly better industry
                      representation and also has several recent
                      practically-oriented publications. I heard that many
                      people had arrived just for the Erlang workshop, which was
                      held the day after CUFP.
                    </p>
                    <p>
                      Of course the conference revolved around the paper
                      presentations. There were too many to review them all, so
                      I’ll just note the ones that were particularly relevant to
                      our work at Untyped.
                    </p>
                    <p>
                      Matthew Flatt’s talk on <a
                        href="http://www.cs.utah.edu/plt/publications/icfp07-fyff.pdf"
                        >Adding Delimited and Composable Control to a Production
                        Programming Environment</a
                      > was a great presentation on a new feature in PLT Scheme,
                      delimited continuations, that will be very useful in the
                      web server. Matthew hacked <a
                        href="http://www.plt-scheme.org/software/slideshow/"
                        >Slideshow</a
                      > (something you can do when you’re the core developer) to
                      support animations by quickly fading between slides. His
                      1028 slides made for some slick animations that quickly
                      and clearly got across the concept of delimited
                      continuations. This was perhaps the best presentation I
                      saw at the conference and it was on something we’ll
                      definitely be using.
                    </p>
                    <p>
                      The <a
                        href="ftp://ftp.cs.kun.nl/pub/Clean/papers/2006/plar2006-FLOPS06-iDataForTheWeb.pdf"
                        >iData toolkit</a
                      > is a <a href="http://clean.cs.ru.nl/">Clean</a> library
                      that uses meta-programming to generate code for viewing
                      and editing arbitrary data online (like Ruby on Rail’s
                      scaffolding, but better). At ICFP this year the followup,<a
                        href="http://www.cs.ru.nl/~rinus/iTaskIntro.html"
                        >iTasks: Executable Specifications of Interactive Work
                        Flow Systems for the Web</a
                      >, was presented. Essentially it is a combinator library
                      for specifying workflows, including higher-order
                      workflows. At is happens we may soon be involved in a
                      project that deals with workflows, in which case we’ll
                      review this work.
                    </p>
                    <p>
                      I really liked <a
                        href="http://www.ccs.neu.edu/scheme/pubs/scheme2007-ctf.pdf"
                        >Advanced Macrology and the Implementation of Typed
                        Scheme</a
                      > by Ryan Culpepper, Sam Tobin-Hochstadt, and Matthew
                      Flatt. <a
                        href="http://www.ccs.neu.edu/home/samth/typed-scheme.html"
                        >Typed Scheme</a
                      > is pretty cool, and we’ll probably use it when it has
                      matured a bit more, but my favourite bit of this paper is
                      the first half which is essentially a tutorial on
                      intermediate to advanced macrology. There is precious
                      little material available on this corner of Scheme, so it
                      is very welcome addition.
                    </p>
                    <p>
                      Also of particular interest to us were <a
                        href="http://wingolog.org/archives/2007/10/04/vignettes"
                        >Applications of Fold to XML Transformation</a
                      >, and <a
                        href="http://www.cs.washington.edu/homes/djg/papers/transactions_continuations.pdf"
                        >Software Transactions Meet First-Class Continuations</a
                      >. We’ve already had occasion to use ideas from the
                      former, while the later gave us some food for thought with
                      regards to<a
                        href="http://planet.plt-scheme.org/display.ss?package=snooze.plt&owner=untyped"
                        >Snooze</a
                      > We had an interesting conversation with Adam Wingo,
                      author of the paper on folds, about the advantages of
                      distributed version control. Something we need to look
                      into. Adam also has a great job that allows him to spend
                      two days a week hanging out in Barcelona’s cafes. Some
                      people get all the luck.
                    </p>
                    <p>
                      One point from ICFP that is particularly relevant for this
                      blog: Dave Herman told me he’d like to see more technical
                      posts. I’ve tried to make the content a bit more technical
                      of late, but if there is anything in particular you’d like
                      me to write about drop me a line.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on ICFP 2007 In Review</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-171"
              class="post-171 post type-post status-publish format-standard hentry category-code category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/23/as-recently-seen-on-the-untyped-subversion-commit-list/"
                      rel="bookmark"
                      title="Permanent Link to As recently seen on the Untyped Subversion commit list…"
                      >As recently seen on the Untyped Subversion commit list…</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I personally watch commits go by for several projects, and
                      it is instructive in many ways to read the commit messages
                      and code. It is a way to learn new things about the
                      software process as well as the implementation of
                      solutions in code. That said, very occasionally, you
                      actually get a giggle from the process…
                    </p>
                    <p>Today was one of those times.</p>
                    <pre
                      is:raw>
Date: 2007-08-22 12:22:06 +0100 (Wed, 22 Aug 2007)
New Revision: 1398
Log:
[DJG] IDCheck trunk:

Tests tests tests.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:41:46 +0100 (Wed, 22 Aug 2007)
New Revision: 1399
Log:
[DJG+NHW] IDCheck trunk:

Testing all the way.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:49:21 +0100 (Wed, 22 Aug 2007)
New Revision: 1400
Log:
[NHW+DJG] IDCheck trunk:

Oh what fun it is to ride on a one horse testing sleigh.</pre>
                    <p>
                      The song ends there, I’m afraid… but it does seem like
                      Dave and Noel are a bit cracked out today. Perhaps they
                      should be out playing frisbee instead of coding this fine
                      Thursday. As I’m not in the same timezone, it’s difficult
                      to say what’s going on over there…
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on As recently seen on the Untyped Subversion commit
                        list…</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-175"
              class="post-175 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/06/refactoring-functional-programs/"
                      rel="bookmark"
                      title="Permanent Link to Refactoring Functional Programs"
                      >Refactoring Functional Programs</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      A little while ago we&lt;a<br />
                      href=&#8221;http://www.untyped.com/untyping/archives/2007/06/selenium_code_r.html&#8221;&gt;released<br
                      />
                      an interface to Selenium, a web testing framework.<br />
                      Since then we’ve learned that Selenium is simply too slow to<br
                      />
                      use in our work-flow. Hence we started on a faster<br />
                      reimplementation of the Selenium Remote Control.
                    </p>
                    <p>
                      A key part of this system is a proxy server, which is
                      necessary to get around the <a
                        href="http://www.mozilla.org/projects/security/components/same-origin.html"
                        >same origin</a
                      > security restriction in Javascript. I’ve just finished a
                      large refactoring of the proxy code, and I think the
                      experience is interesting enough to warrant a blog post.
                      While there is a <a href="http://www.refactoring.com/"
                        >large</a
                      >
                      <a href="https://netfiles.uiuc.edu/dig/RefactoringInfo/"
                        >literature</a
                      > on refactoring object-oriented programs, there is rather
                      less on <a
                        href="http://www.cs.kent.ac.uk/projects/refactor-fp/"
                        >refactoring functional programs</a
                      >, and what there is tends to concentrate on program
                      transformation tools (long a FP strength) at the expense
                      of collecting useful FP refactorings. This post is a small
                      contribution to redressing the balance.
                    </p>
                    <p>
                      The code I spent most time on was the HTTP parser. It is
                      structured as a state machine, so the initial version used
                      the classic FP pattern of<a
                        href="http://www.cs.brown.edu/~sk/Publications/Papers/Published/sk-automata-macros/"
                        >mutually tail recursive functions</a
                      >. The code for parsing an HTTP request looked something
                      like this:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define request-line #f)
(define headers #f)

(define (parse-request-line)
(set! request-line (read-request-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-request-line))</pre>
                    </div>
                    <p>
                      The code for parsing an HTTP response was very similar:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-response)
(define response-line #f)
(define headers #f)

(define (parse-response-line)
(set! response-line (read-response-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something-different))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-response-line))</pre>
                    </div>
                    <p>
                      The real code was several screens long. I wanted to make
                      it<br />
                      simpler by changing to a functional style, and reusing<br
                      />
                      common code between the request and response parsing<br />
                      functions. Converting to functional style is simple:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define (parse-request-line)
(define request-line (read-request-line))
(parse-headers request-line))

(define (parse-headers request-line)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(do-something request-line headers))

(parse-request-line))</pre>
                    </div>
                    <p>
                      Reusing common code is not simple. The finite state
                      machine<br />
                      pattern doesn’t abstract the next state. For example<br />
                      <code>parse-headers</code> in <code>parse-request</code
                      ><br />
                      always calls <code>do-something</code> whereas the
                      otherwise<br />
                      identical version in <code>parse-response</code> calls<br
                      />
                      <code>do-something-different</code>.
                    </p>
                    <p>
                      I solved this by refactoring the code into&lt;a<br />
                      href=&#8221;http://library.readscheme.org/page6.html&#8221;&gt;continuation-passing<br
                      />
                      style, leading to code that looks like the following:
                    </p>
                    <div>
                      <pre
                        is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line k)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(k request-line headers))

(define (parse-request)
(define (parse-request-line k)
(define request-line (read-request-line))
(k request-line))

(parse-request-line
(cut parse-headers &lt;&gt; do-something)))</pre>
                      <p>
                        Note that I’ve used &lt;a<br />
                        href=&#8221;http://srfi.schemers.org/srfi-26/srfi-26.html&#8221;&gt;cut<br
                        />
                        as a short-cut for <code>lambda</code>.
                      </p>
                      <p>
                        I’ve got code reuse but the code itself isn’t nice. The<br
                        />
                        arguments lists were quite a bit longer in the real code
                        and<br />
                        most of the time arguments are just passed from function
                        to<br />
                        function without being used (I’ve seen these sort of<br
                        />
                        arguments called “tramp data”). I also find<br />
                        that CPSed code can be quite difficult to read — you<br
                        />
                        have to construct the control flow graph in your head and<br
                        />
                        then look at the application site to fill in all the<br
                        />
                        continuations. Ugh.
                      </p>
                      <p>
                        One way to get rid of tramp data is to use <code
                          >parameters</code
                        >, and this something we talk about in our <a
                          href="http://www.untyped.com/untyping/archives/2007/08/a_scheme_case_s_1.html"
                          >experience report</a
                        >. However that solution isn’t appropriate here. It
                        forces me to stick with CPS so I can set the parameters
                        in the dynamic extent of the succeeding code, and it
                        extends the lifetime of the values beyond what is
                        strictly necessary. This could be an issue if storing,
                        say, a large request body in a parameter.
                      </p>
                      <p>
                        Notice that the different versions of<br />
                        <code>parse-request</code> only differed in which
                        function<br />
                        they called with the value they computed. If I separate out<br
                        />
                        the computation of that value, and the decision of which<br
                        />
                        function to call I can get code reuse without CPS, and I<br
                        />
                        don’t have long argument lists! This is what my final solution
                        looks like:
                      </p>
                      <div>
                        <pre
                          is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line)
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))

(define (parse-request)
(define (parse-request-line)
(read-request-line))

(do-something (parse-request-line)
(parse-headers)))

(define (parse-response)
(define (parse-response-line)
(read-response-line))

(do-something-different (parse-response-line)
(parse-headers)))</pre>
                      </div>
                      <p>It’s short and sweet, and easy to understand.</p>
                      <p>So let’s recap what I did:</p>
                      <ul>
                        <li>
                          I started with the mutually tail-recursive FSM pattern
                          (that’s a mouthful!)
                        </li>
                        <li>I refactored into continuation-passing style.</li>
                        <li>
                          I separated computation and control, and refactored
                          back to direct style.
                        </li>
                      </ul>
                      <p>
                        So three refactoring (direct style to CPS, separating<br
                        />
                        computation and control, and CPS to direct style), two of<br
                        />
                        which are particular to functional languages, and one<br
                        />
                        pattern. I could do with a better name than<br />
                        “separating computation and control”. If you’re<br />
                        aware of some prior work or can think of a better name do<br
                        />
                        let me know.
                      </p>
                      <p>
                        Although they use different terminology, the programming<br
                        />
                        language theory and software engineering communities have<br
                        />
                        explored a lot of the same ground from different<br />
                        perspectives. Program transformations are pretty much the<br
                        />
                        same thing as refactorings, though the former are often<br
                        />
                        presented in the context of compiler optimisations.&lt;a<br
                        />
                        href=&#8221;http://www.haskell.org/haskellwiki/Research_papers/Functional_pearls&#8221;&gt;Functional<br
                        />
                        Pearls are very similar to design patterns.
                      </p>
                      <p>
                        If you’re a student of software engineering in
                        functional<br />
                        languages it is necessary to familiarise yourself with this<br
                        />
                        literature. This can be difficult. There are no books<br
                        />
                        summarising this literature, as you’ll find for OO<br />
                        languages, and the papers are often terse and are not<br
                        />
                        focused on software engineering. This means they can be<br
                        />
                        difficult to read if you don’t have a background in<br
                        />
                        programming languages, and you have to read between the<br
                        />
                        lines a bit.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Refactoring Functional Programs</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-194"
              class="post-194 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 May 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/05/10/xml-transformation-in-scheme/"
                      rel="bookmark"
                      title="Permanent Link to XML Transformation in Scheme"
                      >XML Transformation in Scheme</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://www.openqa.org/selenium/">Selenium</a> is
                      a tool for testing web applications, the core of which is
                      a Javascript library that controls a web browser. With
                      the <a href="http://www.openqa.org/selenium-ide/"
                        >Selenium IDE</a
                      > you can convert your actions in a web browser into
                      tests, and with the <a
                        href="http://www.openqa.org/selenium-rc/"
                        >Selenium Remote Control</a
                      > you can control a web browser from code. I’ve recently
                      been working on adding Selenium Remote Control bindings to
                      PLT Scheme, which has resulted in a nice and hopefully
                      instructional demonstration of XML transformation in PLT
                      Scheme
                    </p>
                    <p>
                      The Selenium Remote Control is controlled by sending
                      simple messages over HTTP. The format of the messages
                      isn’t important. What is, is that there are a lot of them,
                      and the API is specified in a file called <code
                        >iedoc.xml</code
                      > that comes with Selenium. The Java/Python/Ruby bindings
                      are generated using <a href="http://www.w3.org/Style/XSL/"
                        >XSL</a
                      >. If I was to use XSL I’d have a processing pipeline that
                      uses three languages (XSL, Java, Scheme) which is two more
                      than I’d like. Hence I turned to<a
                        href="http://planet.plt-scheme.org/display.ss?package=webit.plt&owner=jim"
                        >WebIt!</a
                      >, an XML transformation DSL written in Scheme, to create
                      an all Scheme pipeline. The rest of this post wshows the
                      steps I used to transform the Selenium API into Scheme
                      code using WebIt! I think this is interesting in its own
                      right, but also serves as a nice demonstration of the
                      power of macros, which WebIt! makes extensive use of.
                    </p>
                    <p>
                      My first step is to get an idea of the structure of the
                      XML. The bits I’m interested in look like this:
                    </p>
                    <pre
                      is:raw>
&lt;function name="click"&gt;
&lt;param name="locator"&gt;an element locator&lt;/param&gt;
&lt;comment&gt;Clicks on a link, button, checkbox or radio button.
If the click action causes a new page to load (like a link usually
does), call waitForPageToLoad.&lt;/comment&gt;
&lt;/function&gt;</pre>
                    <p>
                      Let’s read in the XML file and extract all the <code
                        >function</code
                      > elements. For this I’ll use SSAX and SXPath:
                    </p>
                    <div>
                      <pre
                        is:raw>
(require
(planet "ssax.ss" ("lizorkin" "ssax.plt" 1))
(only (planet "sxml.ss" ("lizorkin" "sxml.plt" 1)) sxpath))

(define api
(with-input-from-file "iedoc.xml"
(lambda () (ssax:xml-&gt;sxml (current-input-port) '()))))

(define functions
((sxpath '(// function)) api))</pre>
                    </div>
                    <p>
                      Ok, so we have all the functions. Now let’s parse them
                      into a more useful datastructure. Here’s my first attempt:
                    </p>
                    <div>
                      <pre
                        is:raw>
(require (planet "xml.ss" ("jim" "webit.plt" 1 5)))

;; struct function : string (listof string)
(define-struct function (name params))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))
(make-function name (list param-name ...))]))

(map parse-function functions)</pre>
                    </div>
                    <p>
                      The <code>xml-match</code> macro is a pattern matcher for
                      SXML. You specify the “shape” of the SXML, and if the
                      input matches the pattern the following expressions are
                      evaluated:
                    </p>
                    <pre
                      is:raw>
(xml-match value
[(pattern expression <em>...</em>)]<em>...</em>)</pre>
                    <p>The simplified form of a pattern is:</p>
                    <ul>
                      <li>
                        <code>(element <em>...</em>)</code> matches an element
                        with the given name.
                      </li>
                      <li>
                        <code>name: value</code> matches an attribute with the
                        given name and value.
                      </li>
                      <li>
                        <code>,binding</code> binds the value of <code
                          >binding</code
                        > to the given name in the scope of the following
                        expressions.
                      </li>
                      <li>
                        <code>...</code> matches zero or more of the preceeding
                        patterns.
                      </li>
                    </ul>
                    <p>In our example the pattern is:</p>
                    <div>
                      <pre
                        is:raw>
     (function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))</pre>
                    </div>
                    <p>
                      So we’re looking for an element called <code
                        >function</code
                      > with an attribute called <code>name</code> the value of
                      which is bound to <code>name</code>. Then follows zero or
                      more <code>param</code> elements, with attribute <code
                        >name</code
                      >, the value of which is bound to <code>param-name</code>.
                      Finally we expect a <code>comment</code> element which can
                      contain any amount of data. The use of <code>_</code> as
                      the binding name is a common convention to indicate data
                      we don’t care about but must still match to make our
                      pattern complete.
                    </p>
                    <p>I run the code in DrScheme and see the result:</p>
                    <div><em>xml-match: no matching clause found</em></div>
                    <p>
                      Oops. So our pattern isn’t complete. We’ve also seen one
                      flaw of WebIt!: it doesn’t give very good error messages.
                      However we can easily fix this by adding a catch all
                      pattern that raises an error telling us what we failed to
                      match. The code follows. Notice that I’ve also added
                      pretty printing to make the unmatched SXML easier to read.
                    </p>
                    <div>
                      <pre
                        is:raw>
(require (lib "pretty.ss"))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))
(make-function name (list param-name ...))]
[,err (let ([op (open-output-string)])
(pretty-print err op)
(error (format "Didn't match ~n~a~n" (get-output-string op))))]))</pre>
                    </div>
                    <p>
                      Run this code and you’ll see the error occurs as we don’t
                      allow the description to contain more than one element.
                      This is easily fixed by extending the pattern to <code
                        >,desc ...</code
                      >. The next error is more interesting. The <code
                        >function</code
                      > element contains a <code>return</code> element. The
                      WebIt! pattern language doesn’t allows us to express
                      optional patterns, so we have to duplicate our pattern and
                      include the case of<code>return</code>. This also requires
                      we extend the defintion of the <code>function</code
                      >structure.
                    </p>
                    <div>
                      <pre
                        is:raw>
;; struct function : string string (listof string)
(define-struct function (name return params))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc ...) ...
(comment ,_ ...))
(make-function name "void" (list param-name ...))]
[(function name: ,name
(return type: ,type ,return-desc ...)
(param name: ,param-name ,desc ...) ...
(comment ,_ ...))
(make-function name type (list param-name ...))]
[,err (let ([op (open-output-string)])
(pretty-print err op)
(error (format "Didn't match ~n~a~n" (get-output-string op))))]))</pre>
                    </div>
                    <p>
                      This works! This is as far as I want to go in this
                      article. We’ve seen how we can use SSAX. SXPath, and
                      WebIt! to create XML transforms in pure Scheme. There is a
                      lot more to all of these packages but what we’ve used is
                      sufficient for many uses. The rest of the code to create
                      Scheme from the API is quite straightforward and specific
                      to Selenium. If you’re curious read the source of the
                      Selenium PLaneT package, which will be released soon.
                    </p>
                    <p>
                      <em
                        >This post also appears on the <a
                          href="http://blog.plt-scheme.org/">PLT Scheme Blog</a
                        ></em
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on XML Transformation in Scheme</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-210"
              class="post-210 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">14 Mar 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/03/14/its-snow-time/"
                      rel="bookmark"
                      title="Permanent Link to It’s Snow Time!"
                      >It’s Snow Time!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      The <a
                        title="Snowfort"
                        href="http://snow.iro.umontreal.ca/">Snowfort</a
                      > is “a repository of Scheme packages that are portable to
                      several popular implementations of Scheme”. I think the
                      developers of Snow have taken the correct approach by
                      targeting the more featureful Scheme implementations,
                      which share quite a bit of useful functionality in excess
                      of R5RS. However, at the moment the packages look like
                      they’re written under the assumption the host Scheme has
                      no useful module system, as the packages I looked at all
                      prefixed their exports with <code>snow-</code>. The <a
                        href="http://www.r6rs.org/document/html/r6rs-Z-H-9.html#node_chap_6"
                        >module system in R6RS</a
                      >should fix this, so hopefuly these annoying prefixes will
                      go away.
                    </p>
                    <p>
                      <em
                        >There’s snow business like snow business, snow business
                        I snow…</em
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on It’s Snow Time!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-230"
              class="post-230 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">13 Nov 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/11/13/new-software-for-you/"
                      rel="bookmark"
                      title="Permanent Link to New Software, For You!"
                      >New Software, For You!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We released two bits of code a little while ago, both at<br
                      />
                      <a href="http://planet.plt-scheme.org/">PLaneT</a>:
                    </p>
                    <ul>
                      <li>
                        A new minor version of &lt;a<br />
                        href=&#8221;http://planet.plt-scheme.org/300/#schemeunit.plt&#8221;&gt;SchemeUnit<br
                        />
                        that adds a <code>check-=</code> form for comparing
                        numbers<br />
                        within a specified tolerance, and fixes a few bugs.
                      </li>
                      <li>
                        A new add-on to SchemeUnit, called &lt;a<br />
                        href=&#8221;http://planet.plt-scheme.org/300/#benchmark.plt&#8221;&gt;Benchmark<br
                        />
                        that, as the name suggests, adds forms for benchmarking<br
                        />
                        code.
                      </li>
                    </ul>
                    <p>A simple example of using the Benchmark library:</p>
                    <p>
                      Suppose you were benchmarking some functions that worked<br
                      />
                      on vectors of numbers, and you wanted to see if the SRFI-43<br
                      />
                      <code>vector-map</code> was faster than writing a loop by<br
                      />
                      hand. You can test this assumption using the<br />
                      <code>check-faster</code> form:
                    </p>
                    <pre
                      is:raw>
(module test mzscheme

(require
(lib "vector-lib.ss" "srfi" "43")
(planet "test.ss" ("schematics" "schemeunit.plt" 2))
(planet "text-ui.ss" ("schematics" "schemeunit.plt" 2))
(planet "benchmark.ss" ("schematics" "benchmark.plt" 1)))

(define big-vector
(vector-unfold
(lambda (i x) (values i x))
1000
0))

(define check-map
(test-case
"Check vector-map is faster than hand-written loop"
(check-faster
(lambda ()
(vector-map - big-vector))
(lambda ()
(let loop ([vec (make-vector 1000)]
[idx 1000])
(if (zero? idx)
vec
(begin
(let ([idx (sub1 idx)])
(vector-set! vec idx (- (vector-ref big-vector idx)))
(loop vec idx)))))))))

(test/text-ui check-map)
)</pre>
                    <p>
                      On my computer the hand-written loop is a fraction faster<br
                      />
                      than <code>vector-map</code>, so if performance is
                      essential<br />
                      than the loop is to be preferred.
                    </p>
                    <p>
                      By formalising assumptions as tests you automatically get<br
                      />
                      notified when implementation changes render them invalid.<br
                      />
                      So if changes in the JIT compiler made<br />
                      <code>vector-map</code> faster this test would fail and I<br
                      />
                      would know to rewrite my performance critical code.
                    </p>
                    <p>
                      Often it isn’t convenient to keep two versions of a<br />
                      function around, perhaps because the implementation depends<br
                      />
                      on many modules. In this case it is useful to benchmark the<br
                      />
                      implementation against its past performance. You can do<br
                      />
                      this by creating a <code>benchmark-case</code> where you<br
                      />
                      would otherwise create a <code>test-case</code>. An
                      example<br />
                      is in order: Say you have a complicated function<br />
                      <code>foo</code> and you want to ensure your optimisations<br
                      />
                      are making it faster. Then you simply write:
                    </p>
                    <pre
                      is:raw>
(benchmark-case
"foo benchmark 1"
(foo some-big-input))</pre>
                    <p>
                      The Benchmark library automatically saves performance<br
                      />
                      data and fails this test if <code>foo</code> becomes
                      slower.<br />
                      The name of the test case is important, as this is what<br
                      />
                      the Benchmark library uses to find historical data.
                    </p>
                    <p>
                      That’s it. As you can see the Benchmark library is quite
                      simple, but I have found it very useful when optimising
                      code. I hope you do as well!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on New Software, For You!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/category/code/page/2/"
                      >&laquo; Newer Entries</a
                    ></span
                  >
                  <span class="older"
                    ><a href="/untyping/category/code/page/4/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7 current-cat">
                      <a aria-current="page" href="/untyping/category/code/"
                        >Code</a
                      >
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
