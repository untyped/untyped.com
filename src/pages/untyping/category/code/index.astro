---
import Footer from "@components/Footer.astro";
---
<!DOCTYPE html>
<html id="untyping" lang="en">
  <head>
    <title>Code - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">Posts in the &#8216;Code&#8217; category</h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-663"
              class="post-663 post type-post status-publish format-standard hentry category-code category-front-page category-fun category-general category-javascript category-myna category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Aug 2013</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                      rel="bookmark"
                      title="Permanent Link to Writing Documentation using Grunt and Jekyll"
                      >Writing Documentation using Grunt and Jekyll</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Running a startup is a lot of work. All manner of tasks
                      constantly compete for the team&#8217;s attention
                      mandating a careful dance to keep on top of everything. We
                      haven&#8217;t nailed all the footwork to this dance yet,
                      but we have learned that choosing the right tool for each
                      job can drastically simplify the choreography.
                    </p>
                    <p>
                      We recently rewrote a large portion of <a
                        href="http://mynaweb.com/"
                        >Myna</a
                      >
                      in the march towards version 2 of the platform. Most of
                      the customer-facing software - the dashboard, client
                      libraries, HTTP API, and so on - were completely new
                      and required new documentation. Our existing help pages
                      were in need of an overhaul, so we decided to move them
                      out into their own project using a build system based
                      on <a href="http://gruntjs.com/">Grunt</a> and
                      <a href="http://jekyllrb.com/">Jekyll</a>.
                    </p>
                    <p>
                      The new documentation is still a work-in-progress -
                      you can watch its evolution <a
                        href="http://help.mynaweb.com/"
                        >on the Myna website</a
                      > and its <a href="http://github.com/myna/help"
                        >repository on Github</a
                      >
                      (yes, it&#8217;s open source - another experiment
                      we&#8217;re trying). We&#8217;re really happy with the way
                      it&#8217;s all working out, so we&#8217;ve <a
                        href="https://github.com/untyped/jekyll-docs"
                        >published the build system</a
                      > as a separate project that you can use to bootstrap your
                      own documentation. Go forth, fork, and profit!
                    </p>
                    <p><strong>Why Jekyll?</strong></p>
                    <p>
                      Our old documentation was implemented as a set of
                      templates in the <a href="http://playframework.org/"
                        >Play 2</a
                      > web app that runs our marketing site and original
                      customer dashboard. Publishing the app requires a PhD in
                      SBT, Mongo and Redis, and if you&#8217;re writing
                      documentation on the train (as we are prone to do) it
                      isn&#8217;t uncommon to have your plans abruptly
                      terminated by one of SBT&#8217;s frequent unavoidable
                      urges to
                      <a
                        href="http://blog.sonatype.com/people/2011/04/how-not-to-download-the-internet/"
                        >download the whole internet</a
                      > (unadvisable in the middle of signal-free rural
                      England).
                    </p>
                    <p>
                      We considered moving to a CMS such as WordPress, but our
                      support team are all developers with their own preferred
                      editors and IDEs. Forcing them to write documentation
                      (painful) in a tiny WYSIWYG editor embedded into a web
                      site seemed like torture. Also, CMSs require internet
                      connections&#8230; it kinda goes with the territory.
                    </p>
                    <p>
                      Grunt and Jekyll, in contrast, run completely offline, and
                      have a number of other advantages too. Plugins like
                      <a href="https://github.com/gruntjs/grunt-contrib-watch"
                        >grunt-contrib-watch</a
                      >
                      provide instant previews via
                      <a href="http://livereload.com/">Livereload</a>,
                      and Jekyll&#8217;s syntax highlighting (provided by <a
                        href="http://pygments.org/"
                        >Pygments</a
                      >) can highlight any syntax you throw at it (including, to
                      my amazement, <a
                        href="http://help.mynaweb.com/api/experiment-create.html"
                        >HTTP</a
                      >).<br />
                      Jekyll isn&#8217;t completely perfect for the job. We had
                      to work around a few issues. Fortunately, none of them
                      proved insurmountable:
                    </p>
                    <p><strong>Versioning</strong></p>
                    <p>
                      We&#8217;ve run into versioning problems many times
                      before, some requiring some
                      <a
                        href="http://planet.racket-lang.org/package-source/untyped/autoplanet.plt/1/2/planet-docs/autoplanet/index.html"
                        >pretty serious workarounds</a
                      >. In fact, versioning issues are pretty much endemic
                      across all software development platforms. In this
                      toolchain we&#8217;re relying on lots of components:
                      Grunt, five Grunt plugins, Ruby, and Jekyll. Fortunately,
                      versioning is pretty much a solved problem these days:
                      <a href="https://npmjs.org/">NPM</a> and
                      <a href="http://bower.io/">Bower</a> are great package
                      managers for Node, and
                      <a href="http://bundler.io/">Bundler</a> normalizes not
                      only the version of Jekyll we&#8217;re using, but also the
                      version of Ruby itself.
                    </p>
                    <p>
                      <strong
                        >Static Assets (Say &#8220;NO&#8221; to Plain
                        CSS)</strong
                      >
                    </p>
                    <p>
                      I may catch some flack for this, but CSS is a silly
                      language riddled with missing features and
                      <a href="http://www.w3.org/TR/css-variables/"
                        >bizarre design decisions</a
                      >. No way are we going to battle with a new documentation
                      project without tools like <a href="http://lesscss.org/"
                        >Less CSS</a
                      >
                      and
                      <a href="http://getbootstrap.com/">Twitter Bootstrap</a
                      > to support us. And if we&#8217;re compiling and
                      minifying our CSS, we might do it for Javascript as
                      well. Jekyll doesn&#8217;t support support for either
                      process out-of-the-box.
                    </p>
                    <p>
                      One way of solving these issues would be to use Jekyll
                      plugins - there are
                      <a href="https://github.com/zroger/jekyll-less">many</a>
                      <a href="https://github.com/moshen/jekyll-asset_bundler"
                        >candidates</a
                      > <a
                        href="http://matthodan.com/2012/11/22/jekyll-asset-pipeline.html"
                        >available</a
                      >
                      on Github. However, we prefer to use Grunt for this kind
                      of thing, running Jekyll via
                      <a href="https://github.com/jharding/grunt-exec"
                        >grunt-exec</a
                      > and <a href="http://bundler.io/">Bundler</a>, and using
                      <a href="https://github.com/gruntjs/grunt-contrib-watch"
                        >grunt-contrib-watch</a
                      >
                      and
                      <a href="https://github.com/gruntjs/grunt-contrib-connect"
                        >grunt-contrib-connect</a
                      >
                      for preview functionality.
                    </p>
                    <p><strong>Content Navigation</strong></p>
                    <p>
                      Jekyll has built-in support for
                      <a href="http://jekyllrb.com/docs/pagination/"
                        >cataloguing and paginating blog posts</a
                      >, but it can&#8217;t natively generate navigation for a
                      hierarchical documentation site. Fortunately, this was
                      easy to work around with a couple of custom plugins:
                      <a
                        href="https://github.com/untyped/jekyll-docs/blob/master/jekyll_plugins/nav_toc.rb"
                        >one to create a table of contents</a
                      >
                      for the sidebar, and one to
                      <a
                        href="https://github.com/untyped/jekyll-docs/blob/master/jekyll_plugins/nav_pager.rb"
                        >generate next and previous buttons</a
                      >
                      at the bottom of each page.
                    </p>
                    <p><strong>Authenticating Users</strong></p>
                    <p>
                      The main navigation bar on Myna changes when users log in.
                      Ideally we want like to keep this consistent across the
                      main web site, the blog, and the documentation. Our
                      solution is to built a small Javascript app to monitor the
                      user&#8217;s login details and rewrite the navbar on
                      demand. This is a work-in-progress project and it&#8217;s
                      not part of the Github repo above.
                    </p>
                    <p><strong>Conclusion</strong></p>
                    <p>
                      If you like the idea of writing documentation in Markdown,
                      you can get started in two minutes by cloning our  <a
                        href="https://github.com/untyped/jekyll-docs"
                        >Github repo</a
                      >  and following the instructions in the README.
                      We&#8217;d love to hear from you if you find our system
                      useful, and we welcome pull requests with improvements.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/myna/" rel="category tag"
                      >Myna</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Writing Documentation using Grunt and Jekyll</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-11"
              class="post-11 post type-post status-publish format-standard hentry category-code category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">20 Oct 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/10/20/the-circus-is-in-town/"
                      rel="bookmark"
                      title="Permanent Link to The Circus is in Town"
                      >The Circus is in Town</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Following a couple of late caffeinated nights, we are
                      pleased to announce that our latest project, <a
                        href="http://bigtopweb.com/"
                        >Bigtop</a
                      >, is finally set for beta release!
                    </p>
                    <p>
                      Bigtop is a collection of libraries for web developers.
                      Included in the first beta release are:
                    </p>
                    <ul>
                      <li>
                        <a href="http://bigtopweb.com/routes">Bigtop Routes</a
                        > – a library for creating type-safe bidirectional
                        mappings between URLs and Scala code;
                      </li>
                      <li>
                        <a href="http://bigtopweb.com/routes">Bigtop Core</a> –
                        a library for generating and manipulating URLs and
                        hyperlinks in a functional style.
                      </li>
                    </ul>
                    <p>
                      Routes uses the <em>HList</em>-based approach to
                      bidirectional pattern matching that Dave <a
                        href="http://untyped.wpengine.com/2011/10/10/reading-writing-and-the-rest/"
                        >presented</a
                      > at <em>Scala Lift-Off London 2011</em>. There are
                      versions of the library for use with <a
                        href="http://liftweb.net/"
                        >Lift</a
                      >, <a href="https://github.com/scalatra/scalatra"
                        >Scalatra</a
                      >, and plain old Java servlets.
                    </p>
                    <p>
                      Check the <a href="http://bigtopweb.com/">Bigtop</a> web
                      site for a getting started guide, API documentation, and
                      links to the code and Maven repository.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Circus is in Town</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-13"
              class="post-13 post type-post status-publish format-standard hentry category-code category-front-page category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 Oct 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/10/10/reading-writing-and-the-rest/"
                      rel="bookmark"
                      title="Permanent Link to Reading, Writing, and the REST"
                      >Reading, Writing, and the REST</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I’ve just finished preparing the slides for my talk at <a
                        href="http://skillsmatter.com/event/scala/scala-lift-off-london-2011"
                        >Scala Lift-Off London 2011</a
                      > next week. The title of the talk is <em
                        >A Route to the Three ‘R’s: Reading, Writing, and the
                        REST</em
                      >. Here’s the abstract:
                    </p>
                    <blockquote>
                      <p>
                        The mappings between URLs and code form an integral part
                        of any web application. Many web frameworks help map
                        from URLs to code, but the reverse mapping is often
                        neglected, leaving developers to construct URLs via
                        haphazard string manipulation. Furthermore, many
                        frameworks do not match URLs in a type-safe manner.
                      </p>
                      <p>
                        Scala provides all the tools we need to address this
                        problem in a more comprehensive manner. In this talk we
                        will walk through the creation of <a
                          href="http://bigtopweb.com/routes"
                          >Bigtop Routes</a
                        >, a bidirectional mapping library that is both
                        type-safe and developer-friendly. We will pay particular
                        attention to the ways in which Scala language features,
                        such as flexible syntax, implicit conversions, and a
                        touch of type-level programming, help to simplify the
                        task at hand.
                      </p>
                    </blockquote>
                    <p>
                      The slides and code samples are all available from my <a
                        href="https://github.com/davegurnell/scalalol-2011-talk"
                        >Github page</a
                      >. Skills Matter have posted a <a
                        href="http://skillsmatter.com/podcast/scala/reading-writing-rest"
                        >video of the talk</a
                      > on their web site.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Reading, Writing, and the REST</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-15"
              class="post-15 post type-post status-publish format-standard hentry category-code category-fun category-functional-programming category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">1 Sep 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/09/01/uu-and-you-learn-some-opa/"
                      rel="bookmark"
                      title="Permanent Link to UU and You: Learn Some Opa"
                      >UU and You: Learn Some Opa</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We want to try something a bit more interactive with <a
                        href="http://untyped.wpengine.com/2011/01/10/the-university-of-untyped/"
                        >Untyped University</a
                      >, our preteniously titled training program. Instead of
                      just posting papers to <a
                        href="http://www.mendeley.com/groups/771021/untyped-university/"
                        >Mendeley</a
                      > we’re going to hangout on G+. This should allow for easy
                      discussion with our peers, which is to say: you.
                    </p>
                    <p>
                      For this session we’re going to hack on <a
                        href="http://opalang.org/"
                        >Opa</a
                      >. Normally we read through a paper, but we think hacking
                      will work better over the medium. The goal is not
                      (necessarily) to write something useful in Opa but rather
                      to understand it’s model for web development. We’re not
                      seeking to advocate Opa, nor are we experts on the
                      language.
                    </p>
                    <p>
                      As G+ doesn’t yet support organisations, get in touch with
                      me (email noel at untyped, or message Noel Welsh on G+)
                      and ask to be my UU circle. We’ll be online on Friday 9
                      Sept from 13:37PM (+1 GMT), and will invite everyone in
                      the circle to the hangout. See you there!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on UU and You: Learn Some Opa</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-19"
              class="post-19 post type-post status-publish format-standard hentry category-code category-fun category-scala"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">27 May 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/05/27/friday-fun-with-scala-syntax/"
                      rel="bookmark"
                      title="Permanent Link to Friday fun with Scala syntax"
                      >Friday fun with Scala syntax</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      It’s Friday – time to kick back and relax with two fun
                      Scala programs we put together for your amusement.
                    </p>
                    <p>
                      Scala has a pretty flexible syntax (although not as
                      flexible as <a
                        href="http://www.ccs.neu.edu/scheme/pubs/scheme2007-ctf.pdf"
                        >Racket’s</a
                      >, of course) that makes it popular amongst proponents
                      of <a href="http://www.scala-lang.org/node/1403">DSLs</a>.
                      Not all DSLs have to be serious, however, as I’m about to
                      prove.
                    </p>
                    <p>
                      First up is Noel’s original concept – proof of his love
                      for DSLs, expressed in purest code:
                    </p>
                    <div>
                      <pre is:raw><code> class A(num: Int) &#123; def Scala = "It's s" + ("o" * num) + " much fun!" &#125; object I &#123; def &lt;(num: Int) = new A(num) &#125; I &lt;3 Scala // ==&gt; "It's sooo much fun!" </code></pre>
                    </div>
                    <p>
                      Second is a simpler work that I call “The Startled
                      Lolcat”:
                    </p>
                    <div>
                      <pre is:raw><code> object O &#123; def o = "What has been seen, cannot be unseen." &#125; O.o // ==&gt; "What has been seen, cannot be unseen."</code></pre>
                      <pre is:raw><code>
</code></pre>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Friday fun with Scala syntax</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-23"
              class="post-23 post type-post status-publish format-standard hentry category-business category-code category-design category-functional-programming category-scala"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 May 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/05/23/the-future-of-voip-phone-configuration-interfaces/"
                      rel="bookmark"
                      title="Permanent Link to The Future of VoIP Phone Configuration Interfaces"
                      >The Future of VoIP Phone Configuration Interfaces</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve recently completed a very fun and interesting job
                      working on a new interface for managing <a
                        href="http://en.wikipedia.org/wiki/Voice_over_IP"
                        >VoIP</a
                      > phone systems. We have a VoIP phone, provided by <a
                        href="http://loho.co.uk/"
                        >Loho</a
                      >, who were also our client for this project. It’s great —
                      we can forward calls to our mobiles, cart the phone around
                      with us (plug it into a network connections and it just
                      works), and it even emails us our voice messages. The only
                      thing not great about our phone is the configuration
                      interface. Luckily, that’s what this project set out to
                      solve.
                    </p>
                    <p>
                      The brief was to implement an elegant online phone
                      configuration system. Alex, Director at Loho, provided the
                      vision. We provided two weeks of development time, which
                      was enough to create a working prototype. Alex has asked
                      us to not give away too many details about the system, but
                      I can show you a few screenshots. First up, here’s the
                      main screen:
                    </p>
                    <p>
                      <a
                        href="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-main-menu-sml.png"
                        ><img
                          fetchpriority="high"
                          decoding="async"
                          title="loho-main-menu-sml"
                          src="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-main-menu-sml.png"
                          alt="The very stylish main menu of the VoIP administration tool we've built for Loho."
                          width="420"
                          height="197"
                      /></a>
                    </p>
                    <p>
                      The very stylish main menu of the VoIP administration tool
                      we&#8217;ve built for Loho.
                    </p>
                    <p>
                      Doesn’t give away much, does it? A bit more interesting is
                      a detail of editing a configuration:
                    </p>
                    <p>
                      <a
                        href="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-editor-sml.png"
                        ><img
                          decoding="async"
                          title="loho-editor-sml"
                          src="http://untyped.wpengine.com/wp-content/uploads/2011/05/loho-editor-sml.png"
                          alt="Also very stylish: editing the configuration of a voice menu"
                          width="420"
                          height="366"
                      /></a>
                    </p>
                    <p>
                      Also very stylish: editing the configuration of a voice
                      menu
                    </p>
                    <p>
                      Here I’m editing a voice menu — one of those “Press 1 if
                      you’re interested in giving us all your money” type
                      things.
                    </p>
                    <p>
                      We think we’ve created a very nice system. Loho tell us
                      they were overwhelmed with interest at a recent tradefair,
                      suggesting we’re not alone in our opinion. While the
                      interface is an important aspect of the work, the backend
                      (which I can talk about!) is just as important. The main
                      task was defining a data model to capture the rich feature
                      set that Loho provide. This turned out to be very similar
                      to designing a programming language and its intermediate
                      representation. For example, we use a <a
                        href="http://en.wikipedia.org/wiki/Continuation-passing_style"
                        >continuation-passing style</a
                      > representation to avoid maintaining a stack on the
                      server side. Our representation distinguishes between tail
                      calls and normal function calls to avoid excessive
                      resource consumption on the VoIP side. Relational
                      databases don’t do a very good job of storing recursive
                      datastructures, like the <a
                        href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"
                        >AST</a
                      > of a programming language, so we used Mongo for the data
                      store. In addition to its flexible data model, <a
                        href="http://www.youtube.com/watch?v=b2F-DItXtZs"
                        >Mongo is web scale</a
                      > which has given us an immediate status boost at local
                      programmer meetups.
                    </p>
                    <p>
                      The backend code is implemented in Scala and Lift. There
                      are actually two interfaces to the service. One is the
                      nice interface the users see, and the other is a REST
                      interface that is called by the Asterisk AGI scripts that
                      implement the VoIP functionality. The Asterisk system
                      doesn’t handle all the functionality we represent
                      internally, so the REST interface includes a small
                      interpreter that executes intermediate steps till we
                      arrive at something Asterisk deals with.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/design/" rel="category tag"
                      >Design</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag"
                      >Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Future of VoIP Phone Configuration
                        Interfaces</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-25"
              class="post-25 post type-post status-publish format-standard hentry category-code category-front-page category-javascript category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/06/javascript-compilation-for-sbt/"
                      rel="bookmark"
                      title="Permanent Link to Javascript compilation for SBT"
                      >Javascript compilation for SBT</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over the weekend I knocked up a little <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >SBT plugin</a
                      > to wrap up the Javascript resources in our <a
                        href="http://liftweb.net/"
                        >Lift</a
                      > projects and deploy them as one big minified file. Read
                      on to find out how it works, then grab yourself a copy and
                      take it for a spin.
                    </p>
                    <p>
                      The plugin scans your <tt>webapps</tt> directory and looks
                      for files with the
                      extensions <tt>.jsm</tt> or <tt>.jsmanifest</tt>. These
                      files, called <em>Javascript Manifests</em>, describe
                      lists of Javascript sources that should be combined into a
                      single file. For example:
                    </p>
                    <pre is:raw>
# You can specify remote files using URLs...

http://code.jquery.com/jquery-1.5.1.js

# ...and local files using regular paths
#    (relative to the location of the manifest):

lib/foo.js
bar.js

# Blank lines and bash-style comments are also supported</pre
                    >
                    <p>
                      Manifest compilation happens in two phases: first, the
                      plugin downloads and caches any remote scripts specified
                      using URLs. Second, it feeds all of the sources (remote
                      and local) into Google’s<a
                        href="http://code.google.com/closure/compiler/"
                        >Closure Compiler</a
                      >, which concatenates them and minifies everything (and
                      provides excellent services like static type checking to
                      boot). The output from the compiler is a <tt>.js</tt> file
                      with the same base name and relative path as the original
                      manifest.
                    </p>
                    <p>
                      There’s not a lot more to it than that. The plugin hooks
                      into SBT’s standard compile and package phases, so your
                      Javascript gets rebuilt automatically alongside your Scala
                      code. If this sounds useful to you, please feel free to
                      grab a copy and take it for a spin. Full details are
                      available in the README on <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >Github</a
                      >.
                    </p>
                    <p>
                      I should point out that there are other useful SBT plugins
                      that do a similar job. For example, I plagiarised
                      extensively from Jon Hoffman’s<a
                        href="https://github.com/hoffrocket/sbt-yui"
                        >YUI Compressor plugin</a
                      > and Luke Amdor’s <a
                        href="https://github.com/rubbish/coffee-script-sbt-plugin"
                        >Coffee Script plugin</a
                      > when writing my code. These two particular examples
                      don’t do file combination, though, and that was an
                      important feature for our specific use case.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Javascript compilation for SBT</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-30"
              class="post-30 post type-post status-publish format-standard hentry category-code category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/02/setting-the-run-mode-in-lift-web-apps/"
                      rel="bookmark"
                      title="Permanent Link to Setting the run.mode in Lift web apps"
                      >Setting the run.mode in Lift web apps</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <strong
                        >Update: You can now set the run mode easy and
                        conveniently using our <a
                          href="https://github.com/untyped/sbt-plugins/tree/master/sbt-runmode"
                          >sbt-runmode</a
                        > plugin for SBT.</strong
                      >
                    </p>
                    <div>
                      <p>
                        Setting the <a
                          href="http://www.assembla.com/wiki/show/liftweb/Run_Modes"
                          ><code>run.mode</code></a
                        > in Lift applications is the source of a surprising
                        number of questions. The documentation recommends
                        passing it as a parameter when the JVM is invoked. This
                        can be hard to achieve for various reasons. In our case
                        our deployment is automated using <a
                          href="http://www.opscode.com/"
                          >Chef</a
                        >, and scripts to start and stop the Jetty web server
                        are installed by the package manager. We don’t really
                        want to monkey around with these scripts, so we had to
                        find another way. Jetty is written in Java, which means
                        it must have a ridiculously complex XML configuration
                        language. The Jetty developers turned it up to 11 by
                        making their configuration language Turing complete, so
                        we can actually set the system properties in a
                        configuration file. The file we want to create
                        is<code>WEB-INF/jetty-web.xml</code> and we want it to
                        contain this:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                &lt;?xml version=&#8221;1.0&#8243;?&gt;
                              </div>
                              <div id="LC2">
                                &lt;!DOCTYPE Configure PUBLIC &#8220;-//Mort Bay
                                Consulting//DTD Configure//EN&#8221;
                                &#8220;http://jetty.mortbay.org/configure.dtd&#8221;&gt;
                              </div>
                              <div id="LC3">
                                &lt;Configure
                                class=&#8221;org.mortbay.jetty.webapp.WebAppContext&#8221;&gt;
                              </div>
                              <div id="LC4">
                                  &lt;Call class=&#8221;java.lang.System&#8221;
                                name=&#8221;setProperty&#8221;&gt;
                              </div>
                              <div id="LC5">
                                    &lt;Arg&gt;run.mode&lt;/Arg&gt;
                              </div>
                              <div id="LC6">
                                    &lt;Arg&gt;production&lt;/Arg&gt;
                              </div>
                              <div id="LC7">  &lt;/Call&gt;</div>
                              <div id="LC8">&lt;/Configure&gt;</div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/c5a9010f6878f41cf1076b0b3ee93560c1aa374a/jetty-web.xml"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_jetty_web.xml"
                              >jetty-web.xml</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        If we leave this around then our application will always
                        run in production mode. We don’t want this when we’re
                        developing as we won’t, for instance, get stack traces
                        printed to the browser. Thus we should copy this file in
                        when we package up the project, and remove it when the
                        packaging step completes. Assuming you’re using SBT,
                        store the above text
                        in <code>project/jetty-web.xml</code> and add the
                        following to your SBT project file to get this
                        functionality:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                  val jettyWebPath = &#8220;src&#8221; /
                                &#8220;main&#8221; / &#8220;webapp&#8221; /
                                &#8220;WEB-INF&#8221; /
                                &#8220;jetty-web.xml&#8221;
                              </div>
                              <div id="LC2"></div>
                              <div id="LC3">
                                  lazy val installProductionRunMode = task &#123;
                              </div>
                              <div id="LC4">
                                    FileUtilities.copyFile(&#8220;project&#8221;
                                / &#8220;jetty-web.xml&#8221;,
                              </div>
                              <div id="LC5">
                                                           jettyWebPath,
                              </div>
                              <div id="LC6">
                                                           log)
                              </div>
                              <div id="LC7">
                                    log.info(&#8220;Copied jetty-web.xml into
                                place&#8221;)
                              </div>
                              <div id="LC8">    None</div>
                              <div id="LC9">
                                  &#125; describedAs(&#8220;Install a jetty-web.xml
                                that sets the run mode to production&#8221;)
                              </div>
                              <div id="LC10"></div>
                              <div id="LC11">
                                  lazy val superPackage = super.packageAction
                                dependsOn(installProductionRunMode)
                              </div>
                              <div id="LC12"></div>
                              <div id="LC13">
                                  lazy val removeProductionRunMode = task &#123;
                              </div>
                              <div id="LC14">
                                    FileUtilities.clean(jettyWebPath, log)
                              </div>
                              <div id="LC15">    None</div>
                              <div id="LC16">
                                  &#125; describedAs(&#8220;Remove jetty-web.xml and
                                hence set run mode back to testing&#8221;)
                              </div>
                              <div id="LC17"></div>
                              <div id="LC18">
                                  override def packageAction =
                                removeProductionRunMode dependsOn(superPackage)
                                describedAs
                                BasicWebScalaProject.PackageWarDescription
                              </div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/b5bb3e118e97dfe443d9b8b26a3fca011c8d25e7/Project.scala"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_project.scala"
                              >Project.scala</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        This is pretty simple code. Basically it redefines
                        the <code>package</code> action to first copy in
                        the <code>jetty-web.xml</code> file, then it runs the
                        original package action, and finally it deletes
                        the <code>jetty-web.xml</code>. Now
                        any <code>WAR</code>files you run under Jetty will
                        automatically be in production mode, but calling<code
                          >sbt jetty-run</code
                        > will still give you development mode.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Setting the run.mode in Lift web apps</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-34"
              class="post-34 post type-post status-publish format-standard hentry category-business category-code category-design category-front-page category-general category-myna category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">11 Feb 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/02/11/stop-ab-testing-and-make-out-like-a-bandit/"
                      rel="bookmark"
                      title="Permanent Link to Stop A/B Testing and Make Out Like a Bandit"
                      >Stop A/B Testing and Make Out Like a Bandit</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <strong
                        >This is the blog post that led to <a
                          href="https://mynaweb.com/?utm_source=untyping&amp;utm_medium=post&amp;utm_campaign=myna"
                          >Myna</a
                        >. Sign up now and help us beta test the world’s fastest
                        A/B testing product!</strong
                      >
                    </p>
                    <p>
                      Were I a betting man, I would wager this: the supermarket
                      nearest to you is laid out with fresh fruit and vegetables
                      near the entrance, and dairy and bread towards the back of
                      the shop. I’m quite certain I’d win this bet enough times
                      to make it worthwhile. This layout is, of course, no
                      accident. By placing essentials in the corners, the store
                      forces shoppers to traverse the entire floor to get their
                      weekly shop. This increases the chance of an impulse
                      purchase and hence the store’s revenue.
                    </p>
                    <p>
                      I don’t know who developed this layout, but at some point
                      someone must have tested it and it obviously worked. The
                      same idea applies online, where it is incredibly easy to
                      change the “layout” of a store. Where the supermarket
                      might shuffle around displays or change the lighting, the
                      online retailer might change the navigational structure or
                      wording of their landing page. I call this process <em
                        >content optimisation</em
                      >.
                    </p>
                    <p>
                      Any prospective change should be tested to ensure it has a
                      positive effect on revenue (or some other measure, such as
                      clickthroughs). The industry standard method for doing
                      this is <a
                        href="http://untyped.wpengine.com/2010/07/22/epistemology-and-ab-testing/"
                        >A/B testing</a
                      >. However, it is well known in the academic community
                      that <em>A/B testing is significantly suboptimal</em>. In
                      this post I’m going to explain why, and how you can do
                      better.
                    </p>
                    <p>There are several problems with A/B testing:</p>
                    <ul>
                      <li>
                        A/B testing is suboptimal. It simply doesn’t increase
                        revenue as much as better methods.
                      </li>
                      <li>
                        A/B testing is inflexible. You can’t, for example, add a
                        new choice to an already running test.
                      </li>
                      <li>
                        A/B testing has a tedious workflow. To do it correctly,
                        you have to make lots of seemingly arbitrary choices
                        (p-value, experiment size) to run an experiment.
                      </li>
                    </ul>
                    <p>
                      The methods I’m going to describe, which are known as <a
                        href="http://en.wikipedia.org/wiki/Multi-armed_bandit"
                        >bandit algorithms</a
                      >, solve all these problems. But first, let’s look at the
                      problems of A/B testing in more detail.
                    </p>
                    <h2>Suboptimal Performance</h2>
                    <p>
                      Explaining the suboptimal performance of A/B testing is
                      tricky without getting into a bit of statistics. Instead
                      of doing that, I’m going to describe the essence of the
                      problem in a (hopefully) intuitive way. Let’s start by
                      outlining the basic A/B testing scenario, so there is no
                      confusion. In the simplest situation are two choices, A
                      and B, under test. Normally one of them is already running
                      on the site (let’s call that one A), and the other (B) is
                      what we’re considering replacing A with. We run an
                      experiment and then look for a significant difference,
                      where I mean <a
                        href="http://en.wikipedia.org/wiki/Statistical_significance"
                        >significance</a
                      > in the statistical sense. If B is significantly better
                      we replace A with B, otherwise we keep A on the site.
                    </p>
                    <p>
                      The key problem with A/B testing is it doesn’t respect
                      what the significance test is actually saying. When a test
                      shows B is significantly better than A, it is right to
                      throw out A. However, when there is no significant
                      difference the test is <em>not</em> saying that B is no
                      better than A, but rather that the data does not support
                      any conclusion. A might be better than B, B might be
                      better than A, or they might be the same. We just can’t
                      tell with the data that is available*. It might seem we
                      could just run the test until a significant result
                      appears, but that runs into the problem of <a
                        href="http://www.evanmiller.org/how-not-to-run-an-ab-test.html"
                        >repeated significance testing errors</a
                      >. Oh dear! Whatever we do, if we stick exclusively with
                      A/B testing we’re going to make mistakes, and probably
                      more than we realise.
                    </p>
                    <p>
                      A/B testing is also suboptimal in another way — it doesn’t
                      take advantage of information gained during the trial.
                      Every time you display a choice you get information, such
                      as a click, a purchase, or an indifferent user leaving
                      your site. This information is really valuable, and you
                      could make use of it in your test, but A/B testing simply
                      discards it. There are good statistical reasons to not use
                      information gained during a trial within the A/B testing
                      framework, but if we step outside that framework we can.
                    </p>
                    <p>
                      * Technically, the reason for this is that the probability
                      of a type II error increases as the probability of a type
                      I error decreases. We control the probability of a type I
                      error with the p-value, and this is typically set low. So
                      if we drop option B when the test is not significant we
                      have a high probability of making a type II error.
                    </p>
                    <h2>Inflexible</h2>
                    <p>
                      The A/B testing setup is very rigid. You can’t add new
                      choices to the test, so you can’t, say, test the best news
                      item to display on the front page of a site. You can’t
                      dynamically adjust what you display based on information
                      you have about the user — say, what they purchased last
                      time they visited. You also can’t easily test more than
                      two choices.
                    </p>
                    <h2>Workflow</h2>
                    <p>
                      To setup an A/B experiment you need to choose the
                      significance level and the number of trials. These choices
                      are often arbitrary, but they can have a major impact on
                      results. You then need to monitor the experiment and, when
                      it concludes, implement the results. There are a lot of
                      manual steps in this workflow.
                    </p>
                    <h2>Make out like a Bandit</h2>
                    <p>
                      Algorithms for solving the so-called bandit problem
                      address all the problems with A/B testing. To summarise,
                      they give optimal results (to within constant factors),
                      they are very flexible, and they have a fire-and-forget
                      workflow.
                    </p>
                    <p>
                      So, what is the bandit problem? You have a set of choices
                      you can make. On the web these could be different images
                      to display, or different wordings for a button, and so on.
                      Each time you make a choice you get a reward. For example,
                      you might get a reward of 1 if a button is clicked, and
                      reward of 0 otherwise. Your goal is to maximise your total
                      reward over time. This clearly fits the content
                      optimisation problem.
                    </p>
                    <p>
                      The bandit problem has been studied for over 50 years, but
                      only in the last ten years have practical algorithms been
                      developed. We studied one such <a
                        href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.9211&amp;rep=rep1&amp;type=pdf"
                        >paper</a
                      > in <a
                        href="http://untyped.wpengine.com/2011/01/10/the-university-of-untyped/"
                        >UU</a
                      >. The particular details of the algorithm we studied are
                      not important (if you are interested, read the paper –
                      it’s very simple); here I want to focus on the general
                      principles of bandit algorithms.
                    </p>
                    <p>
                      The first point is that the bandit problem explicitly
                      includes the idea that we make use of information as it
                      arrives. This leads to what is called the
                      exploration-exploitation dilemma: do we try many different
                      choices to gain a better estimate of their reward
                      (exploration) or try the choices that have worked well in
                      the past (exploitation)?
                    </p>
                    <p>
                      The performance of an algorithm is typically measured by
                      its <a
                        href="http://en.wikipedia.org/wiki/Regret_(decision_theory)"
                        >regret</a
                      >, which is the average difference between its actual
                      performance and the best possible performance. <a
                        href="http://dx.doi.org/10.1016/0196-8858(85)90002-8"
                        >It has been shown</a
                      > that the best possible regret increases logarithmically
                      with the number of choices made, and <em
                        >modern bandit algorithms are optimal</em
                      > (see <a
                        href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.9211&amp;rep=rep1&amp;type=pdf"
                        >the UU paper</a
                      >, for instance).
                    </p>
                    <p>
                      Bandit algorithms are very flexible. They can deal with as
                      many choices as necessary. Variants of the basic
                      algorithms can handle addition and removal of choices,
                      selection of the best <em>k</em> choices, and exploitation
                      of information known about the visitor.
                    </p>
                    <p>
                      Bandits are also simple to use. Many of the algorithms
                      have no parameters to set, and unlike A/B testing there is
                      no need to monitor them — they will continue working
                      indefinitely.
                    </p>
                    <p>
                      Finally, we know bandits work on the web, as much of the
                      current research on them is coming out of <a
                        href="http://www.cs.toronto.edu/~tl/papers/context-aistats.pdf"
                        >Google</a
                      >, <a
                        href="http://research.microsoft.com/en-us/projects/bandits/"
                        >Microsoft</a
                      >, <a
                        href="http://labs.yahoo.com/files/Explore-exploit-ICDM09.pdf"
                        >Yahoo!</a
                      >, and other big Internet companies.
                    </p>
                    <p>
                      So there you have it. Stop wasting time on A/B testing and
                      make out like a bandit!
                    </p>
                    <h2>Join Our Merry Band</h2>
                    <p>
                      Finally, you probably won’t be surprised to hear we are
                      developing a content optimisation system based on bandit
                      algorithms. I am giving a talk on this at the Multipack
                      Show and Tell in Birmingham this Saturday.
                    </p>
                    <p>
                      We are currently building a prototype, and are looking for
                      people to help us evaluate it. If you want more
                      information, or would like to get involved, <a
                        href="mailto:info@untyped.com"
                        >get in touch</a
                      > and we’ll let you know when we’re ready to go.
                    </p>
                    <p>
                      <strong
                        >Update: In case you missed it at the top, <a
                          href="http://www.mynaweb.com/"
                          >Myna</a
                        > is our content optimisation system based on bandit
                        algorithms and we’re accepting beta users right
                        now!</strong
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/design/" rel="category tag"
                      >Design</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a href="/untyping/category/myna/" rel="category tag"
                      >Myna</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Stop A/B Testing and Make Out Like a Bandit</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-37"
              class="post-37 post type-post status-publish format-standard hentry category-code category-front-page category-fun category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 Jan 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/24/smooth-scrolling-for-mobile-safari/"
                      rel="bookmark"
                      title="Permanent Link to Smooth Scrolling for Mobile Safari"
                      >Smooth Scrolling for Mobile Safari</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I recently wrote a <a href="http://jquery.com/">jQuery</a
                      > plugin to do some smooth scrolling on the iPad, and I
                      thought I’d share the code with everyone.
                    </p>
                    <p>
                      The effect you get is very similar to the iOS home screen.
                      The user touches the screen and drags to scroll. Releasing
                      the screen causes it to spring to the most appropriate
                      page based upon the last dragging position and speed.
                    </p>
                    <p>
                      Gurus of front end development tell us that pretty much
                      the only way to get smooth transitions on the iPad is to
                      use 3D CSS transforms. After experimenting with jQuery
                      animations and 2D CSS transforms, I pretty much concur:
                      jQuery animations yield one or two frames per second, and
                      2D CSS transforms aren’t much better. 3D CSS transforms,
                      on the other hand, are hardware accelerated and smooth as
                      silk.
                    </p>
                    <p>
                      You can get the code from this <a
                        href="https://gist.github.com/791997"
                        >Gist</a
                      > on Github (contributions and enhancements welcome). Use
                      it with the following HTML:
                    </p>
                    <div>
                      <pre is:raw><code> &lt;div id="viewport"&gt; &lt;div&gt;First page&lt;/div&gt; &lt;div&gt;Second page&lt;/div&gt; &lt;div&gt;Third page&lt;/div&gt; &lt;/div&gt; </code></pre>
                    </div>
                    <p>and the following Javascript:</p>
                    <div>
                      <pre is:raw><code> $("#viewport").scrollpane(); </code></pre>
                    </div>
                    <p>
                      There’s a demo of it in action <a
                        href="http://boxandarrow.com/demos/ios-scroll/"
                        >here</a
                      >. A couple of notes:
                    </p>
                    <ul>
                      <li>
                        Because this hooks into touch gesture events and CSS3 3D
                        transforms, it’ll pretty much only work on iDevices and
                        possibly other Webkit-based tablets.
                      </li>
                      <li>
                        It works horizontally and vertically, but I’d recommend
                        only using it horizontally in a regular web page because
                        it interferes with Safari’s natural screen bounce. I had
                        the benefit of a working on an offline brochure where
                        the web page never scrolls naturally. In this
                        environment the plugin really shines. If you are
                        interested in doing something similar, take a look at
                        the iPad app <a
                          href="http://www.hiddenmemory.co.uk/delivery-site.html"
                          >Delivery Site</a
                        >, which lets you customise various things like this.
                      </li>
                      <li>
                        There are a couple of options you can tweak to affect
                        things like dead-zones before a drag will trigger a page
                        transition. See the top of the source code for details.
                      </li>
                      <li>
                        When the first 3D transform is added to a page, Mobile
                        Safari seems to transparently install an OpenGL panel to
                        handle the effects. This causes a rendering glitch
                        that’s just faintly visible if you’re paying attention.
                        The plugin works around this by setting an identity
                        transform on the scroll component on page load. Webkit
                        is presumably frugal about 3D-ification for a reason, so
                        you may find your web pages take more memory and CPU
                        resources with this plugin active than without.
                      </li>
                      <li>
                        Really large (read “many-page, full-screen”) scroll
                        panes can be very heavy on the browser. This is
                        presumably due to the overhead of creating a texture
                        buffer to 3D accelerate the transitions. I’ve managed
                        five-page full-screen scrolling transitions without
                        problems, but your mileage may vary.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag"
                      >Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Smooth Scrolling for Mobile Safari</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"></span>
                  <span class="older"
                    ><a href="/untyping/category/code/page/2/"
                      >Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7 current-cat">
                      <a aria-current="page" href="/untyping/category/code/"
                        >Code</a
                      >
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />

    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
