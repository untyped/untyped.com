---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>All About Amazon’s Dynamo - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-39"
              class="post-39 post type-post status-publish format-standard hentry category-front-page category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 Jan 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/21/all-about-amazons-dynamo/"
                      rel="bookmark"
                      title="Permanent Link to All About Amazon’s Dynamo"
                      >All About Amazon’s Dynamo</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      The second paper we looked at in <a
                        href="http://untyped.wpengine.com/2011/01/10/the-university-of-untyped/"
                        >UU</a
                      > is Amazon’s 2007 paper on<a
                        href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf"
                        >Dynamo</a
                      >. Dynamo is an example of a new type of database dubbed
                      NoSQL and <a href="http://wiki.basho.com/">Riak</a> is an
                      open-source implementation of the Dynamo architecture.
                      Studying Dynamo is worthwhile for a number of reasons:
                    </p>
                    <ul>
                      <li>
                        It combines a lot of recent ideas in distributed
                        systems. These ideas are worth learning in their own
                        right to avoid mistakes like<a
                          href="http://blog.reddit.com/2010/03/and-fun-weekend-was-had-by-all.html"
                          >Reddit’s</a
                        > when building scalable systems.
                      </li>
                      <li>
                        Since Riak is basically Dynamo, knowledge of Dynamo is
                        directly applicable.
                      </li>
                      <li>
                        Understanding the design trade-offs in Dynamo provides a
                        way to understand the rest of the NoSQL space.
                      </li>
                    </ul>
                    <h2>So, What is NoSQL?</h2>
                    <p>
                      In the old days everyone used relational databases and it
                      was good. Then along came the web, and with the web a
                      tidal wave of data, and things were not good. The
                      tradeoffs made by relational databases (maintaining the
                      famous <a href="http://en.wikipedia.org/wiki/ACID">ACID</a
                      > properties) made them unsuitable for tasks where
                      response time and availability were paramount. This is the
                      case for many web applications. For example, it doesn’t
                      really matter if my Facebook status updates aren’t
                      immediately visible to all my friends, but it does matter
                      if my browser hangs for a minute while the back-end tries
                      to get a write lock on the status table.
                    </p>
                    <p>
                      NoSQL databases make a different set of tradeoffs, and
                      achieve different performance characteristics as a result.
                      Typically, NoSQL databases focus on scalability, fast
                      response times, and availability, and give up atomicity
                      and consistency. This tradeoff is formalised via the <a
                        href="http://en.wikipedia.org/wiki/CAP_theorem"
                        >CAP Theorem</a
                      >, which states that a <em>distributed system</em> cannot
                      provide consistency, availability, and partition tolerance
                      all at the same time (although two out of three of these
                      properties are achievable at once). Dynamo provides
                      availability and partition tolerance at the expense of
                      consistency. Other NoSQL databases may make different
                      tradeoffs. SQL databases typically provide consistency and
                      availability at the expense of partition tolerance.
                    </p>
                    <h2>Reading the Paper</h2>
                    <p>
                      The Dynamo paper can be difficult to read. The main issue
                      we had is that the authors don’t always motivate the
                      different components of the system. For example,
                      consistent hashing is one of the earlier concepts
                      introduced in the paper, but it is difficult to see why it
                      is used and how it contributes to increased availability
                      until later on. It is best to approach each section of the
                      article as a self-contained idea, and wait until the end
                      to see how they are combined. It took us two sessions to
                      get through the paper, so don’t be surprised if you find
                      it slow going.
                    </p>
                    <h2>Setting Out the Shop</h2>
                    <p>
                      The paper starts by laying out the properties required of
                      Dynamo. We’ve talked about the tradeoff between
                      consistency, availability, and partition tolerance above.
                      Some of the other properties are:
                    </p>
                    <ul>
                      <li>
                        Cost-effectiveness. This is important but often
                        overlooked. You’ll sometimes see supporters of
                        relational databases arguing that if people got some <em
                          >real database hardware</em
                        > they’d never need NoSQL. The problem with real
                        hardware is it’s expensive. If my 20-CPU database server
                        is at full capacity I have to drop another $20’000 just
                        to handle another 5% increase in traffic. I probably
                        can’t get next day delivery on this type of server,
                        either. With a system like Dynamo I can just boot up
                        another $500/yr virtual machine.
                      </li>
                      <li>
                        Dynamo is a key-value store. This means that there are
                        no foreign keys and hence no joins: the application must
                        provide all of this, or more likely use a denormalised
                        data representation. Furthermore, Dynamo sees its data
                        as opaque binary blobs, so search is only possible using
                        primary keys. Other NoSQL databases make different
                        choices: <a href="http://www.mongodb.org/">MongoDB</a
                        > and <a href="http://www.couch.io/">CouchDB</a> are
                        document-oriented stores, meaning that data is stored as
                        a JSON-like tree of keys and values; <a
                          href="http://hbase.apache.org/">HBase</a
                        > and <a href="http://cassandra.apache.org/"
                          >Cassandra</a
                        > store data as tuples, like a relational database, but
                        without foreign keys.
                      </li>
                      <li>
                        Low configuration, and fully distributed design. These
                        two go hand-in-hand. A fully distributed design means
                        all nodes are the same, and thus have the same
                        configuration. It also means there is no single point of
                        failure, another desirable feature. Again, different
                        systems take different approaches. For example,<a
                          href="http://www.mongodb.org/display/DOCS/Replication"
                          >MongoDB</a
                        > and most relational databases have a master/slave
                        setup in which one machine has special “master”
                        significance. Obviously in this setup different machines
                        have different configurations.
                      </li>
                    </ul>
                    <h2>Big Ideas</h2>
                    <p>
                      Dynamo is the fusion of a lot of ideas that are have
                      developed in the field of distributed systems. Rather than
                      duplicate the paper I want to discuss four points that I
                      found interesting:
                    </p>
                    <ul>
                      <li>Consistent hashing</li>
                      <li>Dynamo’s implementation</li>
                      <li>Amazon’s quality metric</li>
                      <li>Feedback control for balancing tasks</li>
                    </ul>
                    <h2>Consistent Hashing</h2>
                    <p>
                      If you take one point from Dynamo, let it be the
                      usefulness of<a
                        href="http://en.wikipedia.org/wiki/Consistent_hashing"
                        >consistent hashing</a
                      >. The basic idea of consistent hashing is to decouple the
                      value of a key from the machine it is stored on. If you do
                      this you can add and remove machines from your data store
                      without breaking anything. If you don’t, <a
                        href="http://blog.reddit.com/2010/03/and-fun-weekend-was-had-by-all.html"
                        >you’re in a world of pain.</a
                      >
                    </p>
                    <p>
                      Consistent hashing is best explained via an example of
                      doing it wrong. Say you have <code>N</code> machines
                      serving as your data store. Given a key you want to work
                      out which machine stores the data. A simple way to do so
                      (which is what Reddit did) is to calculate <code
                        >key mod N</code
                      >. Now suppose due to increased load you want to add a
                      machine in your data store. Now <code>key mod (N+1)</code
                      > won’t give the same result, so you can’t find your data
                      any more. To fix this you have to flush out the data and
                      reinsert it, which will take a long time. Or you can use
                      consistent hashing from the outset.
                    </p>
                    <p>
                      <img
                        fetchpriority="high"
                        decoding="async"
                        title="Consistent hashing"
                        src="http://untyped.wpengine.com/wp-content/uploads/2011/01/consistent-hashing.png"
                        alt="An example of consistent hashing. The small circles indicate the tokens, and the colours the segments of the hash ring allocated to each server."
                        width="285"
                        height="285"
                      />In consistent hashing you arrange the space of hash keys
                      into a ring. Each server inserts a token into the ring,
                      and is responsible for keys that lie in the range from
                      it’s token to the nearest preceding token. This is
                      illustrated in the image to the left. The small circles
                      indicate the tokens, and the colours the segments of the
                      hash ring allocated to each server.
                    </p>
                    <p>
                      Adding a new server only requires coordination with the
                      server that previously occupied that part of the hash
                      space. In the original consistent hashing paper tokens
                      were inserted at random. For Dynamo it was found that a
                      more structured system worked better. I’ll leave the
                      details of this and other issues (in particular, routing
                      and replication) to the paper.
                    </p>
                    <h2>Non-blocking IO</h2>
                    <p>
                      The section on Dynamo’s implementation will be interesting
                      to PL geeks. If you’ve ever rolled your eyes at the
                      manual <a
                        href="http://en.wikipedia.org/wiki/Continuation-passing_style"
                        >continuation-passing style</a
                      > inflicted by Javascript then you might at least crack a
                      wry smile when you read about essentially the same
                      technique being used in Dynamo. There is an interesting
                      debate to be had on the virtues of non-blocking IO vs
                      thread-per-connection. At the moment my opinion is
                      non-blocking IO is a necessary evil given kernels written
                      in unsafe languages (and hence expensive context
                      switches). Erlang does a good job of presenting a simple
                      programming model with its light-weight threads, but
                      achieving decent SMP performance can be hard due to the
                      mismatch between application and OS threads. It’s my hope
                      that languages like <a
                        href="https://github.com/graydon/rust/wiki">Rust</a
                      > will give a pragmatic solution to this dilemma.
                    </p>
                    <h2>Amazon’s Quality Metric</h2>
                    <p>
                      Although it isn’t part of the main thrust of the paper, I
                      found it interesting that Amazon measure response time and
                      other variables at the 99.9% percentile. Amazon have a
                      very good reputation, and for other companies looking to
                      achieve the same stature it is good to know the goal to
                      aim for.
                    </p>
                    <h2>Feedback Control for Balancing Tasks</h2>
                    <p>
                      I’ve recently implemented feedback control (in particular,
                      proportional error control) for a database connection
                      pool. (I’ll blog about this in a bit.) It’s interesting
                      that Dynamo uses a similar method to balance tasks within
                      each node (Section 6.5). I think we’re going to see more
                      self-regulating systems in the future. The work at<a
                        href="http://radlab.cs.berkeley.edu/publications"
                        >RADLab</a
                      > is a good example of what might make it into production
                      in a few years.
                    </p>
                    <p>
                      By scheduling tasks itself Dynamo is performing a task
                      typically handled by the operating system. I think in the
                      future this will be more commonplace, with the distinction
                      between operating system and application program becoming
                      increasingly blurred. The<a
                        href="http://www.managedruntime.org/"
                        >Managed Runtime Initiative</a
                      > is one project that aims to do this.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on All About Amazon’s Dynamo</span
                      ></span
                    >
                  </p>

                  <p class="postmetadata alt">
                    <small>
                      This entry was posted on Friday, January 21st, 2011 at
                      8:18 pm and is filed under
                      <a
                        href="/untyping/category/front-page/"
                        rel="category tag">Front page</a
                      >,
                      <a
                        href="/untyping/category/web-development/"
                        rel="category tag">Web development</a
                      >. You can follow any responses to this entry through the
                      <a
                        href="/untyping/2011/01/21/all-about-amazons-dynamo/feed/"
                        >RSS 2.0</a
                      >
                      feed. Both comments and pings are currently closed.
                    </small>
                  </p>

                  <!-- You can start editing here. -->

                  <!-- If comments are closed. -->
                  <p class="nocomments">Comments are closed.</p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer">&laquo; Newer Entry</span>
                  <span class="older">Older Entry &raquo;</span>
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />

    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>

    <script
      type="text/javascript"
      src="/wp-includes/js/comment-reply.min.js?ver=6.6.2"
      id="comment-reply-js"
      async="async"
      data-wp-strategy="async"></script>
  </body>
</html>
