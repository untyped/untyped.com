---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Untyping - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />


    </style>

  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-284"
              class="post-284 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Jun 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/06/06/oo-is-convenient/"
                      rel="bookmark"
                      title="Permanent Link to OO is convenient"
                      >OO is convenient</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      One of the recurring themes of the Dagstuhl workshop was
                      “convenience matters”. This is clearly true. All Turing
                      complete programming languages have equivalent power yet
                      we prefer some over others. It’s about what they make
                      easy.
                    </p>
                    <p>
                      This point came to mind when looking at the various
                      abstraction mechanisms in PLT Scheme. The designers of PLT
                      Scheme have analysed the types of abstractions people
                      often use, carefully separated them into different
                      classes, and provided separate mechanisms for each class.
                      If you want to create a unit of functionality you can use
                      the module system. If you want to parameterise code you
                      can use the unit system. If you want to dispatch on type
                      you can use the OO system. This is in contrast to Java,
                      where you get one main abstraction mechanism, the class,
                      which is a module system, a way of parameterising code,
                      and a dispatch mechanism all mashed up into one. This is
                      considered undesireable as you are forced to consider
                      interactions with other mechanisms when you only want to
                      use one. However it has one big advantage: convenience. I
                      don’t often use PLT Scheme’s unit system, so when I do I
                      have to look up the documentation. Same with PLT’s OO
                      system. This tends to make me avoid using them, as I don’t
                      like to spend time reading the docs or figuring out the
                      system. However with Java you’re always writing classes,
                      so it’s familiar and the barrier to use is lower.
                      Convenience matters.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on OO is convenient</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-286"
              class="post-286 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">31 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/31/compile-your-code/"
                      rel="bookmark"
                      title="Permanent Link to Compile Your Code!"
                      >Compile Your Code!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Here at Untyped Central Dave and I are hacking away like
                      lumberjacks, which is a good thing as the project we’re
                      working on is due soon. We’re constantly running tests and
                      loading code into the web server, and we’ve noticed that
                      these processes have been getting slower and slower. It
                      turns out the bottleneck is the time to parse and byte
                      compile our Scheme code. Simply byte compiling the code
                      beforehand has made an incredible difference. Tests that
                      used to take minutes now run in seconds. Two features of
                      PLT Scheme make it really easy to integrate byte
                      compilation into our development process. Firstly, <code
                        >mzc</code
                      > will follow dependencies when given the <code>-k</code
                      > flag. So we just run <code>mzc -k main.ss</code> and all
                      our code is compiled. Also useful is that PLT Scheme does
                      the Right Thing and loads source code if it’s newer than
                      byte compiled code, so we don’t have to constantly
                      recompile our code. So we can just code away as normal,
                      except every time we take a break we run <code>mzc</code>.
                      Eventually we might write some code to recompile at
                      regular intervals (say, every 10 minutes) but for now it
                      isn’t worth the effort.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Compile Your Code!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-288"
              class="post-288 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/24/of-interest-24052006/"
                      rel="bookmark"
                      title="Permanent Link to Of Interest 24/05/2006"
                      >Of Interest 24/05/2006</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you’re a web developer then you pretty much have to
                      read<a
                        title="Brendan's Roadmap Updates: JavaScript 2 / ECMAScript Edition 4"
                        href="http://weblogs.mozillazine.org/roadmap/archives/2006/05/javascript_2_ecmascript_editio.html"
                        >Brendan Eich’s slides on JavaScript 2 / ECMAScript
                        Edition 4</a
                      >. The quick summary: it looks like Scheme with an
                      optional type system, which is a way of saying it looks
                      damn good. All Hail <a
                        href="http://calculist.blogspot.com/2006/02/ecma-262-edition-4.html"
                        >Professor Bloggy McHerman</a
                      >!
                    </p>
                    <p>
                      Gilad Bracha’s <a
                        href="http://blogs.sun.com/roller/page/gbracha?entry=will_continuations_continue"
                        >rant against continuations</a
                      > and the subsequent followups are interesting and
                      infuriating in equal parts. Once again Prof B <a
                        href="http://calculist.blogspot.com/2006/05/solving-todays-web-problems.html"
                        >comes to the rescue</a
                      >. His pedantic aside is particularly important. I’ll also
                      add my own brief rejoinder: I’m not an idiot. Give me all
                      the tools in the toolbox, and I’ll make the decision when
                      to use them. In some situations it is appropriate to use
                      cookies (e.g. login), for others encoding continuations in
                      URLs is the right solution (e.g. persistent URLs), and for
                      others server-side continuations are right (e.g. temporary
                      pages such as form validation)
                    </p>
                    <p>
                      Seems like <a
                        href="http://www.economist.com/intelligentlife/wellbeing/displayStory.cfm?story_id=6909483"
                        >no-one really knows how much sleep you should get</a
                      >, but a drug is in development that might do away with
                      the need, for short periods of time. When travelling
                      around Spain I found siestas worked really well. I got by
                      better on 2 sleeps a days, and <a
                        href="http://www.cebiz.org/cds/ericsson_charness.pdf"
                        >studies of experts</a
                      > have shown the highest performers often take an
                      afternoon nap.<a
                        href="http://www.untyped.com/about/matt.php">Matt’s</a
                      > on to something in his tree-house.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Of Interest 24/05/2006</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-291"
              class="post-291 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">18 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/18/interesting-stuff-18052006/"
                      rel="bookmark"
                      title="Permanent Link to Interesting Stuff 18/05/2006"
                      >Interesting Stuff 18/05/2006</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a
                        title="ACM Queue - A Conversation with Werner Vogels - Amazon's CTO explains what's behind its growth from online bookstore to e-commerce juggernaut."
                        href="http://www.acmqueue.com/modules.php?name=Content&pa=showpage&pid=388&page=1"
                        >Amazon is a platform, not a retailer.</a
                      > And an interesting platform at that.
                    </p>
                    <p>
                      <a
                        href="http://geomblog.blogspot.com/2006/05/on-algorithmization-of-science.html"
                        >The algorithmization of science</a
                      > is the next step to applying mathematics to problems
                      that have been difficult to model equationally. Humanities
                      students better dust up on their computer science!
                    </p>
                    <p>
                      <a href="http://code.google.com/webtoolkit/"
                        >Google releases a AJAX framework</a
                      >. Catching up to Yahoo on this one. Does anyone care?
                      Well, pundits say <a
                        href="http://www.joelonsoftware.com/articles/FB4.5.html"
                        >AJAX is no different than eating large quantities of
                        chocolate</a
                      > so I guess a lot of women should.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Interesting Stuff 18/05/2006</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-295"
              class="post-295 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">17 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/17/more-dagstuhl-talks/"
                      rel="bookmark"
                      title="Permanent Link to More Dagstuhl Talks"
                      >More Dagstuhl Talks</a
                    >
                  </h2>

                  <div class="entry">
                    <p><strong>Modules</strong></p>
                    <p>Matthew Flatt</p>
                    <p>
                      A module is &#8220;the way you share code with other
                      programmers&#8221;
                    </p>
                    <p>Module systems in different languages: Python, Ruby</p>
                    <p>Mutually dependent modules are the first issue</p>
                    <p>
                      Ruby example: mutually dependent modules sometimes work<br
                      />
                      (when required from files) but dependent on order of<br />
                      execution. Shows that a module definition is a<br />
                      side-effecting operation. Similarly a module may be<br />
                      extended. Hence a module is a runtime concept.
                    </p>
                    <p>Ruby modules also function as mixins.</p>
                    <p>
                      MzScheme modules are not side effects. Runtime order does<br
                      />
                      not matter. However expand time (aka static analysis time)<br
                      />
                      order does. Mutually dependencies disallowed. Use units<br
                      />
                      for mutual dependencies. (New!) Unit/signature modules. A<br
                      />
                      module can be written in a unit or signature language.<br
                      />
                      External linking — the module no longer decides what it<br
                      />
                      links to (cf internal linking, the usual method).
                    </p>
                    <p>
                      Scheme48 modules, known as structures. Similar to MzScheme<br
                      />
                      units and ML functors. However allows units to export<br
                      />
                      macros, unlike MzScheme.
                    </p>
                    <p><strong>Smalltalk modules</strong></p>
                    <p>Alexandre</p>
                    <p>
                      Smalltalk 80 has no modules. Distribute changesets.<br />
                      Changesets have no composition.
                    </p>
                    <p>
                      VisualWorks/Squeak packages track their changes and so can<br
                      />
                      be uninstalled. Packages have prerequisites.
                    </p>
                    <p>
                      Selector namespaces in Modular Smalltalk. They are not<br
                      />
                      reentrant. Seems to have strange scoping rules.
                    </p>
                    <p>Classboxes allow re-entrance.</p>
                    <p><strong>CPAN</strong></p>
                    <p>Mike Sperber</p>
                    <p>Pragmatics and deployment.</p>
                    <p>
                      Tools create boilerplate. Standard format for packaging
                      and<br />
                      creation.
                    </p>
                    <p>
                      Online distribution (CPAN) and shell for retrieval and<br
                      />
                      installation. Can automatically install dependencies.
                    </p>
                    <p>
                      Perl code may branch depending on installed modules and<br
                      />
                      versions.
                    </p>
                    <p>
                      Social features (e.g. number of available modules) make it<br
                      />
                      difficult to change the implementation. For instance, you<br
                      />
                      can only have 1 version installed at a time. Cf PLaneT<br
                      />
                      allows multiple versions. However there are still issues<br
                      />
                      with loading multiple versions at once.
                    </p>
                    <p><strong>Java’s Future</strong></p>
                    <p>Gilad Bracha</p>
                    <p>
                      JSR-277 attempting to add a module system for Java. Main<br
                      />
                      interest is deployment, versioning etc.
                    </p>
                    <p>
                      Initial proposed system: modules are like units –<br />
                      parameterised.
                    </p>
                    <p>
                      Actual proposed system: no language changes allowed.<br />
                      Instead embed using reflective API. Turing complete<br />
                      therefore any particular implementation possible<br />
                      (first-class, higher-order, etc.)
                    </p>
                    <p>
                      Module implementations check for prerequisites at runtime.<br
                      />
                      Just code, so anything is allowed. Lots of state.
                    </p>
                    <p>
                      <em>My comments:</em> As usual for Java has taken a<br />
                      reasonable idea and turned it into a huge hairball.
                    </p>
                    <hr />
                    <p><strong>Soapbox Session</strong></p>
                    <p><strong>Context-oriented Programming</strong></p>
                    <p>Pascal Constanza</p>
                    <p>
                      Make program change behaviour due to context of use<br />
                      (e.g. personalisation) without making it a huge hairball.
                    </p>
                    <p>
                      Basically a new type of modularity. Similar to aspects,
                      and<br />
                      OO inheritance / overriding.
                    </p>
                    <p><strong>F-Script</strong></p>
                    <p>Philippe Mougin</p>
                    <p>Open source scripting language for Cocoa / OS X</p>
                    <p>Unifies OO and array programming</p>
                    <p>Interactive environment.</p>
                    <p>
                      <strong
                        >Source Code Mining for Latently-Typed Languages</strong
                      ><br />
                      Dave Mandelin
                    </p>
                    <p>
                      Extracting information from source code. Perhaps to find<br
                      />
                      out how to use a library from example code.
                    </p>
                    <p>
                      Example: what are the types of the arguments in a latently<br
                      />
                      typed language?
                    </p>
                    <p>[Reflection!]</p>
                    <p><strong>BabyUML</strong></p>
                    <p>Trygve Reenskaug</p>
                    <p>Modularity, again.</p>
                    <p>
                      <em>My comments:</em> I didn’t really get this talk, so my
                      summary is brief and perhaps incorrect.
                    </p>
                    <p><strong>Ambient Oriented Programming</strong></p>
                    <p>Ambient resources and volatile connections</p>
                    <p>Non-blocking communication</p>
                    <p>Reified communication traces</p>
                    <p>Reified environmental context</p>
                    <p>OO sans classes to handle code updates</p>
                    <p><strong>Converge</strong></p>
                    <p>Laurence Tratt</p>
                    <p>
                      Pythonic language with compile time metaprogramming ala<br
                      />
                      Template Haskell.
                    </p>
                    <p>
                      Converge’s role is to host DSLs, and so must be very<br />
                      flexible. In a senese a Lisp with curly braces.
                    </p>
                    <p>Customisable parsing.</p>
                    <p><strong>Father Time</strong></p>
                    <p>Greg Cooper</p>
                    <p><strong>MzTake</strong></p>
                    <p>Guillaume Marceau</p>
                    <p>
                      <em>My comments:</em> I’ve seen FrTime and MzTake before<br
                      />
                      so I didn’t take notes. If they’re new to you check them<br
                      />
                      out — they come as part of <a
                        href="http://www.plt-scheme.org/">PLT Scheme</a
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on More Dagstuhl Talks</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-293"
              class="post-293 post type-post status-publish format-standard hentry category-business"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">17 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/17/how-american-are-startups/"
                      rel="bookmark"
                      title="Permanent Link to How American are Startups?"
                      >How American are Startups?</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://calculist.blogspot.com/">Dave</a>, living
                      it up at XTech in Amsterdam, IMed me about Paul Graham’s
                      latest. A quick search finds that lightening fast typist
                      Suw Charman offers the best synopsis: <a
                        title="Xtech 2006: Paul Graham - How American are Startups?. Strange Attractor: Picking out patterns from the chaos that is the blogosphere."
                        href="http://strange.corante.com/archives/2006/05/17/xtech_2006_paul_graham_how_american_are_startups.php"
                        >Xtech 2006: Paul Graham – How American are Startups?.</a
                      >
                    </p>
                    <p>
                      There are some good points; nothing surprising if you’ve
                      ever been involved in a startup but it is worth a read. My
                      main gripe: there is no Europe. It is a collection of
                      disparate countries with vastly different governments,
                      values, and so on. Capitalist UK is not socialist Denmark.
                    </p>
                    <p>
                      That aside, by Paul’s criteria the real Cambridge is
                      pretty close to getting it right. It just might be too
                      expensive for real in-the-garage type startups. When
                      paying the rent is a challenge spending time on a risky
                      proposition like a startup seems less attractive.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on How American are Startups?</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-297"
              class="post-297 post type-post status-publish format-standard hentry category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">8 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/08/binding-the-beer-of-choice-for-computer-science/"
                      rel="bookmark"
                      title="Permanent Link to Binding! The beer of choice for Computer Science"
                      >Binding! The beer of choice for Computer Science</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      David van Horn and I were wandering around Frankfurt after
                      Dagstuhl when we came across this sign. It’s beer, and
                      it’s also one of the major issues in programming language
                      design. Clearly this is the drink of choice from
                      discerning computer scientists!
                    </p>
                    <div align="center">
                      <img
                        fetchpriority="high"
                        decoding="async"
                        src="http://static.flickr.com/49/142613051_d25fdf9995.jpg"
                        alt=""
                        width="375"
                        height="500"
                      />
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Binding! The beer of choice for Computer Science</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-301"
              class="post-301 post type-post status-publish format-standard hentry category-javascript"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">4 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/04/the-rumour-starts-here/"
                      rel="bookmark"
                      title="Permanent Link to The Rumour Starts Here!"
                      >The Rumour Starts Here!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Salacious rumour suggests the next version of Javascript
                      will have tail recursion. We can neither confirm nor deny
                      this rumour, but we can rock an old style: <code
                        >w00t!</code
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The Rumour Starts Here!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-299"
              class="post-299 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">4 May 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/05/04/dagstuhl-06181/"
                      rel="bookmark"
                      title="Permanent Link to Dagstuhl 06181">Dagstuhl 06181</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Due to what I can only assume was a clerical error, I was
                      invited to the <a href="http://www.dagstuhl.de/"
                        >Dagstuhl</a
                      > seminar on <a href="http://www.dagstuhl.de/06181/"
                        >latently typed languages</a
                      >. I accepted before this error could be rectified, and so
                      it is that this blog post comes to you from room 23 in
                      Dagstuhl.
                    </p>
                    <p>
                      There have been a number of talks of various topics of<br
                      />
                      interest. Being a good student, I’ve taken notes, which I<br
                      />
                      intend to put online as time allows. You’ll have to fill in<br
                      />
                      a few gaps but I hope they’ll give you an idea of what has<br
                      />
                      been discussed. The first talk is below:
                    </p>
                    <p><strong>Cross Language Runtimes</strong></p>
                    <p>
                      Wolfgang De Meuter, Marc Feeley, Robby findler, Roel Wuyts
                      et al.
                    </p>
                    <p>Sapir-Whorf</p>
                    <ul>
                      <li>not true, but illustrates a problem</li>
                      <li>
                        the programming language used determines how we see and<br
                        />
                        think about the solution e.g. malleable syntax Java vs<br
                        />
                        Scheme
                      </li>
                    </ul>
                    <p>
                      Ralph Johnson: study at IBM on what characteristics making<br
                      />
                      people learn Smalltalk more easily. Number one<br />
                      characteristic was how many languages you already knew. The<br
                      />
                      more you know the easier it is to pick up new languages.
                    </p>
                    <p>
                      Matthias F: ppig.org Productivity of programmers is
                      directly<br />
                      dependent on number of languages they know not the number of<br
                      />
                      years of experience.
                    </p>
                    <p>Cross-languages</p>
                    <ul>
                      <li>
                        mix several languages, choose the right tool for the job
                      </li>
                      <li>
                        problem mapping concepts betweeen different languages
                      </li>
                    </ul>
                    <p>Survey cross language systems</p>
                    <p>Gambit-C (Scheme) FFI to C/C++</p>
                    <ul>
                      <li>
                        <code
                          >(c-define (f x y) (int int) int "f" "" (* x y))</code
                        ><br />
                        Defines a procedure called f in C, and wraps Scheme<br
                        />
                        around it.
                      </li>
                      <li><code>c-lambda</code> (inline C)</li>
                    </ul>
                    <p>
                      Matthias F: Scheme is not a safe language as the spec<br
                      />
                      leaves many things undefined.
                    </p>
                    <p>ProfessorJ</p>
                    <ul>
                      <li>
                        Java extended with dynamic, Scheme with contracts.
                      </li>
                      <li>Java types mapped to Scheme contracts</li>
                    </ul>
                    <p>
                      Robby F: dynamic is like the Any (TST) type for Java. Too<br
                      />
                      much to explain now.
                    </p>
                    <p>SCM2JS Scheme to Javascript</p>
                    <ul>
                      <li>Embed Scheme is web pages like Javascript (neat!)</li>
                      <li>Compile to JS</li>
                    </ul>
                    <p>SHard Scheme to VHDL</p>
                    <ul>
                      <li>
                        Allow programming techniques and transformations to be<br
                        />
                        applied to hardware
                      </li>
                      <li>
                        Dataflow language: extends Scheme with par like Occam<br
                        />
                        for parallelism
                      </li>
                      <li>CPS analysis of control flow</li>
                      <li>Allows calls to VHDL components</li>
                      <li>
                        Key was to implement function calls — so full<br />
                        programming language can be comiled to hardware
                      </li>
                    </ul>
                    <p>Soul Prolog and Smalltalk</p>
                    <ul>
                      <li>
                        Logic programming language interpreted by Smalltalk
                      </li>
                      <li>Prolog symbols are Smalltalk objects</li>
                      <li>Reason about code, using reflection</li>
                      <li>LogicAJ Generic AOP language</li>
                      <li>Logic meta variables</li>
                      <li>Carma Smalltalk + Soul</li>
                      <li>Generic AOP language</li>
                      <li>Very dynamic</li>
                    </ul>
                    <p>etc [other examples]</p>
                    <p>Linguistic symbiosis</p>
                    <ul>
                      <li>
                        Making data and operations from one language accessible<br
                        />
                        in tohe other language
                      </li>
                      <li>Essentially quote/unquote between languages</li>
                      <li>
                        Requires careful distinciton between evaluation<br />
                        contexts (between languages) to handle (un)wrapping and<br
                        />
                        (more importantly) semantics
                      </li>
                    </ul>
                    <p>
                      Robby F: sometimes wrappers must stay around to enforce<br
                      />
                      constraints when, for instance, mixing static and latently<br
                      />
                      typed languages.
                    </p>
                    <p>
                      Andrew Black: copying implementations don’t work in
                      parallel<br />
                      systems with mutable state
                    </p>
                    <p>
                      <em>My comments:</em> There were a <em>lot</em> of
                      questions so the talk ended up being a bit rushed. A lot
                      of time was spent on the survey (and answering questions)
                      which unfortunately left little time to really tease out
                      the interesting issues.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Dagstuhl 06181</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-305"
              class="post-305 post type-post status-publish format-standard hentry category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 Apr 2006</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2006/04/24/give-us-all-your-money/"
                      rel="bookmark"
                      title="Permanent Link to Give us all your money!"
                      >Give us all your money!</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Actually, don’t give us all your money, give it to the <a
                        href="http://www.bhf.org.uk/"
                        >British Heart Foundation</a
                      > instead!
                    </p>
                    <p>
                      The <a href="http://www.davegurnell.com/">Davester</a> and
                      myself are entering the <a
                        href="http://www.bhf.org.uk/events/index.asp?SecID=12&secondlevel=1005&thirdlevel=1015&artID=6150"
                        >London to Brighton</a
                      > bike ride. Being a ride for charity we’re collecting
                      sponsors. You can sponsor <a
                        href="http://www.bhf.org.uk/sponsor/noelwelsh/">me</a
                      > or <a href="http://www.bhf.org.uk/sponsor/davegurnell/"
                        >Dave</a
                      >. If you have a blog please pass on the links so we can
                      reach the maximum number of people.
                    </p>
                    <p>
                      This will be my first major ride since October, when I
                      dislocated my fingers coming off my bike. I spent a bit of
                      the weekend cleaning off the cobwebs, adjusting the
                      brakes, and so on. A quick trip down to the city centre
                      showed both the bike and the rider to still be running a
                      bit rough, but time will solve this problem.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Give us all your money!</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/page/13/">&laquo; Newer Entries</a
                    ></span
                  >
                  <span class="older"
                    ><a href="/untyping/page/15/">Older Entries &raquo;</a
                    ></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />

    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
