---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Untyping &#8211; Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />

    <!--[if lt IE 9]>
      <link rel="stylesheet" href="/styles/ie8.css" />
      <script src="/scripts/html5shiv.js"></script>
    <![endif]-->

    <!--<link rel="stylesheet" href="/styles/pygments.css" type="text/css" media="screen">-->

    <link
      rel="alternate"
      type="application/rss+xml"
      title="Untyped RSS Feed"
      href="/feed/"
    />
    <link
      rel="alternate"
      type="application/atom+xml"
      title="Untyped Atom Feed"
      href="/feed/atom/"
    />
    <link rel="pingback" href="/xmlrpc.php" />

    <meta name="robots" content="max-image-preview:large" />
    <script type="text/javascript">
      /* <![CDATA[ */
      window._wpemojiSettings = {
        baseUrl: "https://s.w.org/images/core/emoji/15.0.3/72x72/",
        ext: ".png",
        svgUrl: "https://s.w.org/images/core/emoji/15.0.3/svg/",
        svgExt: ".svg",
        source: {
          concatemoji: "/wp-includes/js/wp-emoji-release.min.js?ver=6.6.2",
        },
      };
      /*! This file is auto-generated */
      !(function (i, n) {
        var o, s, e;
        function c(e) {
          try {
            var t = { supportTests: e, timestamp: new Date().valueOf() };
            sessionStorage.setItem(o, JSON.stringify(t));
          } catch (e) {}
        }
        function p(e, t, n) {
          e.clearRect(0, 0, e.canvas.width, e.canvas.height),
            e.fillText(t, 0, 0);
          var t = new Uint32Array(
              e.getImageData(0, 0, e.canvas.width, e.canvas.height).data
            ),
            r =
              (e.clearRect(0, 0, e.canvas.width, e.canvas.height),
              e.fillText(n, 0, 0),
              new Uint32Array(
                e.getImageData(0, 0, e.canvas.width, e.canvas.height).data
              ));
          return t.every(function (e, t) {
            return e === r[t];
          });
        }
        function u(e, t, n) {
          switch (t) {
            case "flag":
              return n(e, "🏳️‍⚧️", "🏳️​⚧️")
                ? !1
                : !n(e, "🇺🇳", "🇺​🇳") && !n(e, "🏴󠁧󠁢󠁥󠁮󠁧󠁿", "🏴​󠁧​󠁢​󠁥​󠁮​󠁧​󠁿");
            case "emoji":
              return !n(e, "🐦‍⬛", "🐦​⬛");
          }
          return !1;
        }
        function f(e, t, n) {
          var r =
              "undefined" != typeof WorkerGlobalScope &&
              self instanceof WorkerGlobalScope
                ? new OffscreenCanvas(300, 150)
                : i.createElement("canvas"),
            a = r.getContext("2d", { willReadFrequently: !0 }),
            o = ((a.textBaseline = "top"), (a.font = "600 32px Arial"), {});
          return (
            e.forEach(function (e) {
              o[e] = t(a, e, n);
            }),
            o
          );
        }
        function t(e) {
          var t = i.createElement("script");
          (t.src = e), (t.defer = !0), i.head.appendChild(t);
        }
        "undefined" != typeof Promise &&
          ((o = "wpEmojiSettingsSupports"),
          (s = ["flag", "emoji"]),
          (n.supports = { everything: !0, everythingExceptFlag: !0 }),
          (e = new Promise(function (e) {
            i.addEventListener("DOMContentLoaded", e, { once: !0 });
          })),
          new Promise(function (t) {
            var n = (function () {
              try {
                var e = JSON.parse(sessionStorage.getItem(o));
                if (
                  "object" == typeof e &&
                  "number" == typeof e.timestamp &&
                  new Date().valueOf() < e.timestamp + 604800 &&
                  "object" == typeof e.supportTests
                )
                  return e.supportTests;
              } catch (e) {}
              return null;
            })();
            if (!n) {
              if (
                "undefined" != typeof Worker &&
                "undefined" != typeof OffscreenCanvas &&
                "undefined" != typeof URL &&
                URL.createObjectURL &&
                "undefined" != typeof Blob
              )
                try {
                  var e =
                      "postMessage(" +
                      f.toString() +
                      "(" +
                      [JSON.stringify(s), u.toString(), p.toString()].join(
                        ","
                      ) +
                      "));",
                    r = new Blob([e], { type: "text/javascript" }),
                    a = new Worker(URL.createObjectURL(r), {
                      name: "wpTestEmojiSupports",
                    });
                  return void (a.onmessage = function (e) {
                    c((n = e.data)), a.terminate(), t(n);
                  });
                } catch (e) {}
              c((n = f(s, u, p)));
            }
            t(n);
          })
            .then(function (e) {
              for (var t in e)
                (n.supports[t] = e[t]),
                  (n.supports.everything =
                    n.supports.everything && n.supports[t]),
                  "flag" !== t &&
                    (n.supports.everythingExceptFlag =
                      n.supports.everythingExceptFlag && n.supports[t]);
              (n.supports.everythingExceptFlag =
                n.supports.everythingExceptFlag && !n.supports.flag),
                (n.DOMReady = !1),
                (n.readyCallback = function () {
                  n.DOMReady = !0;
                });
            })
            .then(function () {
              return e;
            })
            .then(function () {
              var e;
              n.supports.everything ||
                (n.readyCallback(),
                (e = n.source || {}).concatemoji
                  ? t(e.concatemoji)
                  : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji)));
            }));
      })((window, document), window._wpemojiSettings);
      /* ]]> */
    </script>
    <style id="wp-emoji-styles-inline-css" type="text/css">
      img.wp-smiley,
      img.emoji {
        display: inline !important;
        border: none !important;
        box-shadow: none !important;
        height: 1em !important;
        width: 1em !important;
        margin: 0 0.07em !important;
        vertical-align: -0.1em !important;
        background: none !important;
        padding: 0 !important;
      }
    </style>
    <link
      rel="stylesheet"
      id="wp-block-library-css"
      href="/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2"
      type="text/css"
      media="all"
    />
    <style id="classic-theme-styles-inline-css" type="text/css">
      /*! This file is auto-generated */
      .wp-block-button__link {
        color: #fff;
        background-color: #32373c;
        border-radius: 9999px;
        box-shadow: none;
        text-decoration: none;
        padding: calc(0.667em + 2px) calc(1.333em + 2px);
        font-size: 1.125em;
      }
      .wp-block-file__button {
        background: #32373c;
        color: #fff;
        text-decoration: none;
      }
    </style>
    <style id="global-styles-inline-css" type="text/css">
      :root {
        --wp--preset--aspect-ratio--square: 1;
        --wp--preset--aspect-ratio--4-3: 4/3;
        --wp--preset--aspect-ratio--3-4: 3/4;
        --wp--preset--aspect-ratio--3-2: 3/2;
        --wp--preset--aspect-ratio--2-3: 2/3;
        --wp--preset--aspect-ratio--16-9: 16/9;
        --wp--preset--aspect-ratio--9-16: 9/16;
        --wp--preset--color--black: #000000;
        --wp--preset--color--cyan-bluish-gray: #abb8c3;
        --wp--preset--color--white: #ffffff;
        --wp--preset--color--pale-pink: #f78da7;
        --wp--preset--color--vivid-red: #cf2e2e;
        --wp--preset--color--luminous-vivid-orange: #ff6900;
        --wp--preset--color--luminous-vivid-amber: #fcb900;
        --wp--preset--color--light-green-cyan: #7bdcb5;
        --wp--preset--color--vivid-green-cyan: #00d084;
        --wp--preset--color--pale-cyan-blue: #8ed1fc;
        --wp--preset--color--vivid-cyan-blue: #0693e3;
        --wp--preset--color--vivid-purple: #9b51e0;
        --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(
          135deg,
          rgba(6, 147, 227, 1) 0%,
          rgb(155, 81, 224) 100%
        );
        --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(
          135deg,
          rgb(122, 220, 180) 0%,
          rgb(0, 208, 130) 100%
        );
        --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(
          135deg,
          rgba(252, 185, 0, 1) 0%,
          rgba(255, 105, 0, 1) 100%
        );
        --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(
          135deg,
          rgba(255, 105, 0, 1) 0%,
          rgb(207, 46, 46) 100%
        );
        --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(
          135deg,
          rgb(238, 238, 238) 0%,
          rgb(169, 184, 195) 100%
        );
        --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(
          135deg,
          rgb(74, 234, 220) 0%,
          rgb(151, 120, 209) 20%,
          rgb(207, 42, 186) 40%,
          rgb(238, 44, 130) 60%,
          rgb(251, 105, 98) 80%,
          rgb(254, 248, 76) 100%
        );
        --wp--preset--gradient--blush-light-purple: linear-gradient(
          135deg,
          rgb(255, 206, 236) 0%,
          rgb(152, 150, 240) 100%
        );
        --wp--preset--gradient--blush-bordeaux: linear-gradient(
          135deg,
          rgb(254, 205, 165) 0%,
          rgb(254, 45, 45) 50%,
          rgb(107, 0, 62) 100%
        );
        --wp--preset--gradient--luminous-dusk: linear-gradient(
          135deg,
          rgb(255, 203, 112) 0%,
          rgb(199, 81, 192) 50%,
          rgb(65, 88, 208) 100%
        );
        --wp--preset--gradient--pale-ocean: linear-gradient(
          135deg,
          rgb(255, 245, 203) 0%,
          rgb(182, 227, 212) 50%,
          rgb(51, 167, 181) 100%
        );
        --wp--preset--gradient--electric-grass: linear-gradient(
          135deg,
          rgb(202, 248, 128) 0%,
          rgb(113, 206, 126) 100%
        );
        --wp--preset--gradient--midnight: linear-gradient(
          135deg,
          rgb(2, 3, 129) 0%,
          rgb(40, 116, 252) 100%
        );
        --wp--preset--font-size--small: 13px;
        --wp--preset--font-size--medium: 20px;
        --wp--preset--font-size--large: 36px;
        --wp--preset--font-size--x-large: 42px;
        --wp--preset--spacing--20: 0.44rem;
        --wp--preset--spacing--30: 0.67rem;
        --wp--preset--spacing--40: 1rem;
        --wp--preset--spacing--50: 1.5rem;
        --wp--preset--spacing--60: 2.25rem;
        --wp--preset--spacing--70: 3.38rem;
        --wp--preset--spacing--80: 5.06rem;
        --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
        --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
        --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
        --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1),
          6px 6px rgba(0, 0, 0, 1);
        --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
      }
      :where(.is-layout-flex) {
        gap: 0.5em;
      }
      :where(.is-layout-grid) {
        gap: 0.5em;
      }
      body .is-layout-flex {
        display: flex;
      }
      .is-layout-flex {
        flex-wrap: wrap;
        align-items: center;
      }
      .is-layout-flex > :is(*, div) {
        margin: 0;
      }
      body .is-layout-grid {
        display: grid;
      }
      .is-layout-grid > :is(*, div) {
        margin: 0;
      }
      :where(.wp-block-columns.is-layout-flex) {
        gap: 2em;
      }
      :where(.wp-block-columns.is-layout-grid) {
        gap: 2em;
      }
      :where(.wp-block-post-template.is-layout-flex) {
        gap: 1.25em;
      }
      :where(.wp-block-post-template.is-layout-grid) {
        gap: 1.25em;
      }
      .has-black-color {
        color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-color {
        color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-color {
        color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-color {
        color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-color {
        color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-color {
        color: var(--wp--preset--color--luminous-vivid-orange) !important;
      }
      .has-luminous-vivid-amber-color {
        color: var(--wp--preset--color--luminous-vivid-amber) !important;
      }
      .has-light-green-cyan-color {
        color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-color {
        color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-color {
        color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-color {
        color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-color {
        color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-black-background-color {
        background-color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-background-color {
        background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-background-color {
        background-color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-background-color {
        background-color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-background-color {
        background-color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-background-color {
        background-color: var(
          --wp--preset--color--luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-amber-background-color {
        background-color: var(
          --wp--preset--color--luminous-vivid-amber
        ) !important;
      }
      .has-light-green-cyan-background-color {
        background-color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-background-color {
        background-color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-background-color {
        background-color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-background-color {
        background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-background-color {
        background-color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-black-border-color {
        border-color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-border-color {
        border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-border-color {
        border-color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-border-color {
        border-color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-border-color {
        border-color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-border-color {
        border-color: var(
          --wp--preset--color--luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-amber-border-color {
        border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
      }
      .has-light-green-cyan-border-color {
        border-color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-border-color {
        border-color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-border-color {
        border-color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-border-color {
        border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-border-color {
        border-color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
        background: var(
          --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple
        ) !important;
      }
      .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
        background: var(
          --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan
        ) !important;
      }
      .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
        background: var(
          --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-orange-to-vivid-red-gradient-background {
        background: var(
          --wp--preset--gradient--luminous-vivid-orange-to-vivid-red
        ) !important;
      }
      .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
        background: var(
          --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray
        ) !important;
      }
      .has-cool-to-warm-spectrum-gradient-background {
        background: var(
          --wp--preset--gradient--cool-to-warm-spectrum
        ) !important;
      }
      .has-blush-light-purple-gradient-background {
        background: var(--wp--preset--gradient--blush-light-purple) !important;
      }
      .has-blush-bordeaux-gradient-background {
        background: var(--wp--preset--gradient--blush-bordeaux) !important;
      }
      .has-luminous-dusk-gradient-background {
        background: var(--wp--preset--gradient--luminous-dusk) !important;
      }
      .has-pale-ocean-gradient-background {
        background: var(--wp--preset--gradient--pale-ocean) !important;
      }
      .has-electric-grass-gradient-background {
        background: var(--wp--preset--gradient--electric-grass) !important;
      }
      .has-midnight-gradient-background {
        background: var(--wp--preset--gradient--midnight) !important;
      }
      .has-small-font-size {
        font-size: var(--wp--preset--font-size--small) !important;
      }
      .has-medium-font-size {
        font-size: var(--wp--preset--font-size--medium) !important;
      }
      .has-large-font-size {
        font-size: var(--wp--preset--font-size--large) !important;
      }
      .has-x-large-font-size {
        font-size: var(--wp--preset--font-size--x-large) !important;
      }
      :where(.wp-block-post-template.is-layout-flex) {
        gap: 1.25em;
      }
      :where(.wp-block-post-template.is-layout-grid) {
        gap: 1.25em;
      }
      :where(.wp-block-columns.is-layout-flex) {
        gap: 2em;
      }
      :where(.wp-block-columns.is-layout-grid) {
        gap: 2em;
      }
      :root :where(.wp-block-pullquote) {
        font-size: 1.5em;
        line-height: 1.6;
      }
    </style>
    <link rel="https://api.w.org/" href="/wp-json/" />
    <link
      rel="EditURI"
      type="application/rsd+xml"
      title="RSD"
      href="/xmlrpc.php?rsd"
    />
    <style type="text/css">
      .recentcomments a {
        display: inline !important;
        padding: 0 !important;
        margin: 0 !important;
      }
    </style>
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on and leave a comment<br />
              or <a href="/">return to our portfolio.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-21"
              class="post-21 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 May 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/05/23/internship-this-summer-at-loho/"
                      rel="bookmark"
                      title="Permanent Link to Internship This Summer at Loho"
                      >Internship This Summer at Loho</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Our friends at <a href="http://www.loho.co.uk/">Loho</a
                      > are looking for an <a href="http://loho.co.uk/careers/"
                        >intern over summer</a
                      >. We’ve<a
                        href="http://untyped.wpengine.com/2011/05/23/the-future-of-voip-phone-configuration-interfaces/"
                        >previously blogged</a
                      > about the (fun and interesting) work we’ve done for
                      Loho: using <a href="http://www.scala-lang.org/">Scala</a
                      >, <a href="http://www.liftweb.net/">Lift</a>, and a heavy
                      does of Javascript we’ve created a really simple interface
                      for setting up complex VoIP services. (All credit goes to
                      Alex for the great concept — our work is simply
                      implementing his vision.) The internship could extend this
                      work, or address other parts of the stack right down to
                      mucking around with VoIP hardware. It’s an awesome chance
                      to play with a lot of exciting technology. If you fit the
                      bill (student, free for 8-10 weeks over summer, can
                      relocate to Cambridge) get in touch with Alex at Loho. If
                      you get the internship and decide to focus on the
                      Scala/Lift parts we’ll certainly help you get to grips
                      with the code base.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Internship This Summer at Loho</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-25"
              class="post-25 post type-post status-publish format-standard hentry category-code category-front-page category-javascript category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/06/javascript-compilation-for-sbt/"
                      rel="bookmark"
                      title="Permanent Link to Javascript compilation for SBT"
                      >Javascript compilation for SBT</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over the weekend I knocked up a little <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >SBT plugin</a
                      > to wrap up the Javascript resources in our <a
                        href="http://liftweb.net/">Lift</a
                      > projects and deploy them as one big minified file. Read
                      on to find out how it works, then grab yourself a copy and
                      take it for a spin.
                    </p>
                    <p>
                      The plugin scans your <tt>webapps</tt> directory and looks
                      for files with the extensions <tt>.jsm</tt> or <tt
                        >.jsmanifest</tt
                      >. These files, called <em>Javascript Manifests</em>,
                      describe lists of Javascript sources that should be
                      combined into a single file. For example:
                    </p>
                    <pre
                      is:raw>
# You can specify remote files using URLs...

http://code.jquery.com/jquery-1.5.1.js

# ...and local files using regular paths
#    (relative to the location of the manifest):

lib/foo.js
bar.js

# Blank lines and bash-style comments are also supported</pre>
                    <p>
                      Manifest compilation happens in two phases: first, the
                      plugin downloads and caches any remote scripts specified
                      using URLs. Second, it feeds all of the sources (remote
                      and local) into Google’s<a
                        href="http://code.google.com/closure/compiler/"
                        >Closure Compiler</a
                      >, which concatenates them and minifies everything (and
                      provides excellent services like static type checking to
                      boot). The output from the compiler is a <tt>.js</tt> file
                      with the same base name and relative path as the original
                      manifest.
                    </p>
                    <p>
                      There’s not a lot more to it than that. The plugin hooks
                      into SBT’s standard compile and package phases, so your
                      Javascript gets rebuilt automatically alongside your Scala
                      code. If this sounds useful to you, please feel free to
                      grab a copy and take it for a spin. Full details are
                      available in the README on <a
                        href="https://github.com/davegurnell/sbt-closure"
                        >Github</a
                      >.
                    </p>
                    <p>
                      I should point out that there are other useful SBT plugins
                      that do a similar job. For example, I plagiarised
                      extensively from Jon Hoffman’s<a
                        href="https://github.com/hoffrocket/sbt-yui"
                        >YUI Compressor plugin</a
                      > and Luke Amdor’s <a
                        href="https://github.com/rubbish/coffee-script-sbt-plugin"
                        >Coffee Script plugin</a
                      > when writing my code. These two particular examples
                      don’t do file combination, though, and that was an
                      important feature for our specific use case.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Javascript compilation for SBT</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-30"
              class="post-30 post type-post status-publish format-standard hentry category-code category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Mar 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/03/02/setting-the-run-mode-in-lift-web-apps/"
                      rel="bookmark"
                      title="Permanent Link to Setting the run.mode in Lift web apps"
                      >Setting the run.mode in Lift web apps</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <strong
                        >Update: You can now set the run mode easy and
                        conveniently using our <a
                          href="https://github.com/untyped/sbt-plugins/tree/master/sbt-runmode"
                          >sbt-runmode</a
                        > plugin for SBT.</strong
                      >
                    </p>
                    <div>
                      <p>
                        Setting the <a
                          href="http://www.assembla.com/wiki/show/liftweb/Run_Modes"
                          ><code>run.mode</code></a
                        > in Lift applications is the source of a surprising
                        number of questions. The documentation recommends
                        passing it as a parameter when the JVM is invoked. This
                        can be hard to achieve for various reasons. In our case
                        our deployment is automated using <a
                          href="http://www.opscode.com/">Chef</a
                        >, and scripts to start and stop the Jetty web server
                        are installed by the package manager. We don’t really
                        want to monkey around with these scripts, so we had to
                        find another way. Jetty is written in Java, which means
                        it must have a ridiculously complex XML configuration
                        language. The Jetty developers turned it up to 11 by
                        making their configuration language Turing complete, so
                        we can actually set the system properties in a
                        configuration file. The file we want to create is<code
                          >WEB-INF/jetty-web.xml</code
                        > and we want it to contain this:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                &lt;?xml version=&#8221;1.0&#8243;?&gt;
                              </div>
                              <div id="LC2">
                                &lt;!DOCTYPE Configure PUBLIC &#8220;-//Mort Bay
                                Consulting//DTD Configure//EN&#8221;
                                &#8220;http://jetty.mortbay.org/configure.dtd&#8221;&gt;
                              </div>
                              <div id="LC3">
                                &lt;Configure
                                class=&#8221;org.mortbay.jetty.webapp.WebAppContext&#8221;&gt;
                              </div>
                              <div id="LC4">
                                &lt;Call class=&#8221;java.lang.System&#8221;
                                name=&#8221;setProperty&#8221;&gt;
                              </div>
                              <div id="LC5">
                                &lt;Arg&gt;run.mode&lt;/Arg&gt;
                              </div>
                              <div id="LC6">
                                &lt;Arg&gt;production&lt;/Arg&gt;
                              </div>
                              <div id="LC7">&lt;/Call&gt;</div>
                              <div id="LC8">&lt;/Configure&gt;</div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/c5a9010f6878f41cf1076b0b3ee93560c1aa374a/jetty-web.xml"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_jetty_web.xml"
                              >jetty-web.xml</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        If we leave this around then our application will always
                        run in production mode. We don’t want this when we’re
                        developing as we won’t, for instance, get stack traces
                        printed to the browser. Thus we should copy this file in
                        when we package up the project, and remove it when the
                        packaging step completes. Assuming you’re using SBT,
                        store the above text in <code
                          >project/jetty-web.xml</code
                        > and add the following to your SBT project file to get
                        this functionality:
                      </p>
                      <p>&nbsp;</p>
                      <div id="gist-851037">
                        <div>
                          <div>
                            <div>
                              <div id="LC1">
                                val jettyWebPath = &#8220;src&#8221; /
                                &#8220;main&#8221; / &#8220;webapp&#8221; /
                                &#8220;WEB-INF&#8221; /
                                &#8220;jetty-web.xml&#8221;
                              </div>
                              <div id="LC2"></div>
                              <div id="LC3">
                                lazy val installProductionRunMode = task {}
                                <div id="LC4">
                                  FileUtilities.copyFile(&#8220;project&#8221; /
                                  &#8220;jetty-web.xml&#8221;,
                                </div>
                                <div id="LC5">jettyWebPath,</div>
                                <div id="LC6">log)</div>
                                <div id="LC7">
                                  log.info(&#8220;Copied jetty-web.xml into
                                  place&#8221;)
                                </div>
                                <div id="LC8">None</div>
                                <div id="LC9"></div> describedAs(&#8220;Install a
                                jetty-web.xml that sets the run mode to production&#8221;)
                              </div>
                              <div id="LC10"></div>
                              <div id="LC11">
                                lazy val superPackage = super.packageAction
                                dependsOn(installProductionRunMode)
                              </div>
                              <div id="LC12"></div>
                              <div id="LC13">
                                lazy val removeProductionRunMode = task {}
                                <div id="LC14">
                                  FileUtilities.clean(jettyWebPath, log)
                                </div>
                                <div id="LC15">None</div>
                                <div id="LC16"></div> describedAs(&#8220;Remove jetty-web.xml
                                and hence set run mode back to testing&#8221;)
                              </div>
                              <div id="LC17"></div>
                              <div id="LC18">
                                override def packageAction =
                                removeProductionRunMode dependsOn(superPackage)
                                describedAs
                                BasicWebScalaProject.PackageWarDescription
                              </div>
                            </div>
                          </div>
                          <div>
                            <a
                              href="https://gist.github.com/raw/851037/b5bb3e118e97dfe443d9b8b26a3fca011c8d25e7/Project.scala"
                              >view raw</a
                            ><a
                              href="https://gist.github.com/851037#file_project.scala"
                              >Project.scala</a
                            ><a href="https://gist.github.com/851037"
                              >This Gist</a
                            > brought to you by <a href="http://github.com/"
                              >GitHub</a
                            >.
                          </div>
                        </div>
                      </div>
                      <p>&nbsp;</p>
                      <p>
                        This is pretty simple code. Basically it redefines the <code
                          >package</code
                        > action to first copy in the <code>jetty-web.xml</code
                        > file, then it runs the original package action, and
                        finally it deletes the <code>jetty-web.xml</code>. Now
                        any <code>WAR</code>files you run under Jetty will
                        automatically be in production mode, but calling<code
                          >sbt jetty-run</code
                        > will still give you development mode.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Setting the run.mode in Lift web apps</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-34"
              class="post-34 post type-post status-publish format-standard hentry category-business category-code category-design category-front-page category-general category-myna category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">11 Feb 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/02/11/stop-ab-testing-and-make-out-like-a-bandit/"
                      rel="bookmark"
                      title="Permanent Link to Stop A/B Testing and Make Out Like a Bandit"
                      >Stop A/B Testing and Make Out Like a Bandit</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <strong
                        >This is the blog post that led to <a
                          href="https://mynaweb.com/?utm_source=untyping&utm_medium=post&utm_campaign=myna"
                          >Myna</a
                        >. Sign up now and help us beta test the world’s fastest
                        A/B testing product!</strong
                      >
                    </p>
                    <p>
                      Were I a betting man, I would wager this: the supermarket
                      nearest to you is laid out with fresh fruit and vegetables
                      near the entrance, and dairy and bread towards the back of
                      the shop. I’m quite certain I’d win this bet enough times
                      to make it worthwhile. This layout is, of course, no
                      accident. By placing essentials in the corners, the store
                      forces shoppers to traverse the entire floor to get their
                      weekly shop. This increases the chance of an impulse
                      purchase and hence the store’s revenue.
                    </p>
                    <p>
                      I don’t know who developed this layout, but at some point
                      someone must have tested it and it obviously worked. The
                      same idea applies online, where it is incredibly easy to
                      change the “layout” of a store. Where the supermarket
                      might shuffle around displays or change the lighting, the
                      online retailer might change the navigational structure or
                      wording of their landing page. I call this process <em
                        >content optimisation</em
                      >.
                    </p>
                    <p>
                      Any prospective change should be tested to ensure it has a
                      positive effect on revenue (or some other measure, such as
                      clickthroughs). The industry standard method for doing
                      this is <a
                        href="http://untyped.wpengine.com/2010/07/22/epistemology-and-ab-testing/"
                        >A/B testing</a
                      >. However, it is well known in the academic community
                      that <em>A/B testing is significantly suboptimal</em>. In
                      this post I’m going to explain why, and how you can do
                      better.
                    </p>
                    <p>There are several problems with A/B testing:</p>
                    <ul>
                      <li>
                        A/B testing is suboptimal. It simply doesn’t increase
                        revenue as much as better methods.
                      </li>
                      <li>
                        A/B testing is inflexible. You can’t, for example, add a
                        new choice to an already running test.
                      </li>
                      <li>
                        A/B testing has a tedious workflow. To do it correctly,
                        you have to make lots of seemingly arbitrary choices
                        (p-value, experiment size) to run an experiment.
                      </li>
                    </ul>
                    <p>
                      The methods I’m going to describe, which are known as <a
                        href="http://en.wikipedia.org/wiki/Multi-armed_bandit"
                        >bandit algorithms</a
                      >, solve all these problems. But first, let’s look at the
                      problems of A/B testing in more detail.
                    </p>
                    <h2>Suboptimal Performance</h2>
                    <p>
                      Explaining the suboptimal performance of A/B testing is
                      tricky without getting into a bit of statistics. Instead
                      of doing that, I’m going to describe the essence of the
                      problem in a (hopefully) intuitive way. Let’s start by
                      outlining the basic A/B testing scenario, so there is no
                      confusion. In the simplest situation are two choices, A
                      and B, under test. Normally one of them is already running
                      on the site (let’s call that one A), and the other (B) is
                      what we’re considering replacing A with. We run an
                      experiment and then look for a significant difference,
                      where I mean <a
                        href="http://en.wikipedia.org/wiki/Statistical_significance"
                        >significance</a
                      > in the statistical sense. If B is significantly better
                      we replace A with B, otherwise we keep A on the site.
                    </p>
                    <p>
                      The key problem with A/B testing is it doesn’t respect
                      what the significance test is actually saying. When a test
                      shows B is significantly better than A, it is right to
                      throw out A. However, when there is no significant
                      difference the test is <em>not</em> saying that B is no
                      better than A, but rather that the data does not support
                      any conclusion. A might be better than B, B might be
                      better than A, or they might be the same. We just can’t
                      tell with the data that is available*. It might seem we
                      could just run the test until a significant result
                      appears, but that runs into the problem of <a
                        href="http://www.evanmiller.org/how-not-to-run-an-ab-test.html"
                        >repeated significance testing errors</a
                      >. Oh dear! Whatever we do, if we stick exclusively with
                      A/B testing we’re going to make mistakes, and probably
                      more than we realise.
                    </p>
                    <p>
                      A/B testing is also suboptimal in another way — it doesn’t
                      take advantage of information gained during the trial.
                      Every time you display a choice you get information, such
                      as a click, a purchase, or an indifferent user leaving
                      your site. This information is really valuable, and you
                      could make use of it in your test, but A/B testing simply
                      discards it. There are good statistical reasons to not use
                      information gained during a trial within the A/B testing
                      framework, but if we step outside that framework we can.
                    </p>
                    <p>
                      * Technically, the reason for this is that the probability
                      of a type II error increases as the probability of a type
                      I error decreases. We control the probability of a type I
                      error with the p-value, and this is typically set low. So
                      if we drop option B when the test is not significant we
                      have a high probability of making a type II error.
                    </p>
                    <h2>Inflexible</h2>
                    <p>
                      The A/B testing setup is very rigid. You can’t add new
                      choices to the test, so you can’t, say, test the best news
                      item to display on the front page of a site. You can’t
                      dynamically adjust what you display based on information
                      you have about the user — say, what they purchased last
                      time they visited. You also can’t easily test more than
                      two choices.
                    </p>
                    <h2>Workflow</h2>
                    <p>
                      To setup an A/B experiment you need to choose the
                      significance level and the number of trials. These choices
                      are often arbitrary, but they can have a major impact on
                      results. You then need to monitor the experiment and, when
                      it concludes, implement the results. There are a lot of
                      manual steps in this workflow.
                    </p>
                    <h2>Make out like a Bandit</h2>
                    <p>
                      Algorithms for solving the so-called bandit problem
                      address all the problems with A/B testing. To summarise,
                      they give optimal results (to within constant factors),
                      they are very flexible, and they have a fire-and-forget
                      workflow.
                    </p>
                    <p>
                      So, what is the bandit problem? You have a set of choices
                      you can make. On the web these could be different images
                      to display, or different wordings for a button, and so on.
                      Each time you make a choice you get a reward. For example,
                      you might get a reward of 1 if a button is clicked, and
                      reward of 0 otherwise. Your goal is to maximise your total
                      reward over time. This clearly fits the content
                      optimisation problem.
                    </p>
                    <p>
                      The bandit problem has been studied for over 50 years, but
                      only in the last ten years have practical algorithms been
                      developed. We studied one such <a
                        href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.9211&rep=rep1&type=pdf"
                        >paper</a
                      > in <a
                        href="http://untyped.wpengine.com/2011/01/10/the-university-of-untyped/"
                        >UU</a
                      >. The particular details of the algorithm we studied are
                      not important (if you are interested, read the paper –
                      it’s very simple); here I want to focus on the general
                      principles of bandit algorithms.
                    </p>
                    <p>
                      The first point is that the bandit problem explicitly
                      includes the idea that we make use of information as it
                      arrives. This leads to what is called the
                      exploration-exploitation dilemma: do we try many different
                      choices to gain a better estimate of their reward
                      (exploration) or try the choices that have worked well in
                      the past (exploitation)?
                    </p>
                    <p>
                      The performance of an algorithm is typically measured by
                      its <a
                        href="http://en.wikipedia.org/wiki/Regret_(decision_theory)"
                        >regret</a
                      >, which is the average difference between its actual
                      performance and the best possible performance. <a
                        href="http://dx.doi.org/10.1016/0196-8858(85)90002-8"
                        >It has been shown</a
                      > that the best possible regret increases logarithmically
                      with the number of choices made, and <em
                        >modern bandit algorithms are optimal</em
                      > (see <a
                        href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.9211&rep=rep1&type=pdf"
                        >the UU paper</a
                      >, for instance).
                    </p>
                    <p>
                      Bandit algorithms are very flexible. They can deal with as
                      many choices as necessary. Variants of the basic
                      algorithms can handle addition and removal of choices,
                      selection of the best <em>k</em> choices, and exploitation
                      of information known about the visitor.
                    </p>
                    <p>
                      Bandits are also simple to use. Many of the algorithms
                      have no parameters to set, and unlike A/B testing there is
                      no need to monitor them — they will continue working
                      indefinitely.
                    </p>
                    <p>
                      Finally, we know bandits work on the web, as much of the
                      current research on them is coming out of <a
                        href="http://www.cs.toronto.edu/~tl/papers/context-aistats.pdf"
                        >Google</a
                      >, <a
                        href="http://research.microsoft.com/en-us/projects/bandits/"
                        >Microsoft</a
                      >, <a
                        href="http://labs.yahoo.com/files/Explore-exploit-ICDM09.pdf"
                        >Yahoo!</a
                      >, and other big Internet companies.
                    </p>
                    <p>
                      So there you have it. Stop wasting time on A/B testing and
                      make out like a bandit!
                    </p>
                    <h2>Join Our Merry Band</h2>
                    <p>
                      Finally, you probably won’t be surprised to hear we are
                      developing a content optimisation system based on bandit
                      algorithms. I am giving a talk on this at the Multipack
                      Show and Tell in Birmingham this Saturday.
                    </p>
                    <p>
                      We are currently building a prototype, and are looking for
                      people to help us evaluate it. If you want more
                      information, or would like to get involved, <a
                        href="mailto:info@untyped.com">get in touch</a
                      > and we’ll let you know when we’re ready to go.
                    </p>
                    <p>
                      <strong
                        >Update: In case you missed it at the top, <a
                          href="http://www.mynaweb.com/">Myna</a
                        > is our content optimisation system based on bandit
                        algorithms and we’re accepting beta users right now!</strong
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/design/" rel="category tag"
                      >Design</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a href="/untyping/category/myna/" rel="category tag"
                      >Myna</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Stop A/B Testing and Make Out Like a Bandit</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-37"
              class="post-37 post type-post status-publish format-standard hentry category-code category-front-page category-fun category-javascript category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">24 Jan 2011</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/24/smooth-scrolling-for-mobile-safari/"
                      rel="bookmark"
                      title="Permanent Link to Smooth Scrolling for Mobile Safari"
                      >Smooth Scrolling for Mobile Safari</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I recently wrote a <a href="http://jquery.com/">jQuery</a
                      > plugin to do some smooth scrolling on the iPad, and I
                      thought I’d share the code with everyone.
                    </p>
                    <p>
                      The effect you get is very similar to the iOS home screen.
                      The user touches the screen and drags to scroll. Releasing
                      the screen causes it to spring to the most appropriate
                      page based upon the last dragging position and speed.
                    </p>
                    <p>
                      Gurus of front end development tell us that pretty much
                      the only way to get smooth transitions on the iPad is to
                      use 3D CSS transforms. After experimenting with jQuery
                      animations and 2D CSS transforms, I pretty much concur:
                      jQuery animations yield one or two frames per second, and
                      2D CSS transforms aren’t much better. 3D CSS transforms,
                      on the other hand, are hardware accelerated and smooth as
                      silk.
                    </p>
                    <p>
                      You can get the code from this <a
                        href="https://gist.github.com/791997">Gist</a
                      > on Github (contributions and enhancements welcome). Use
                      it with the following HTML:
                    </p>
                    <div>
                      <pre
                        is:raw><code> &lt;div id="viewport"&gt; &lt;div&gt;First page&lt;/div&gt; &lt;div&gt;Second page&lt;/div&gt; &lt;div&gt;Third page&lt;/div&gt; &lt;/div&gt; </code></pre>
                    </div>
                    <p>and the following Javascript:</p>
                    <div>
                      <pre
                        is:raw><code> $("#viewport").scrollpane(); </code></pre>
                    </div>
                    <p>
                      There’s a demo of it in action <a
                        href="http://boxandarrow.com/demos/ios-scroll/">here</a
                      >. A couple of notes:
                    </p>
                    <ul>
                      <li>
                        Because this hooks into touch gesture events and CSS3 3D
                        transforms, it’ll pretty much only work on iDevices and
                        possibly other Webkit-based tablets.
                      </li>
                      <li>
                        It works horizontally and vertically, but I’d recommend
                        only using it horizontally in a regular web page because
                        it interferes with Safari’s natural screen bounce. I had
                        the benefit of a working on an offline brochure where
                        the web page never scrolls naturally. In this
                        environment the plugin really shines. If you are
                        interested in doing something similar, take a look at
                        the iPad app <a
                          href="http://www.hiddenmemory.co.uk/delivery-site.html"
                          >Delivery Site</a
                        >, which lets you customise various things like this.
                      </li>
                      <li>
                        There are a couple of options you can tweak to affect
                        things like dead-zones before a drag will trigger a page
                        transition. See the top of the source code for details.
                      </li>
                      <li>
                        When the first 3D transform is added to a page, Mobile
                        Safari seems to transparently install an OpenGL panel to
                        handle the effects. This causes a rendering glitch
                        that’s just faintly visible if you’re paying attention.
                        The plugin works around this by setting an identity
                        transform on the scroll component on page load. Webkit
                        is presumably frugal about 3D-ification for a reason, so
                        you may find your web pages take more memory and CPU
                        resources with this plugin active than without.
                      </li>
                      <li>
                        Really large (read “many-page, full-screen”) scroll
                        panes can be very heavy on the browser. This is
                        presumably due to the overhead of creating a texture
                        buffer to 3D accelerate the transitions. I’ve managed
                        five-page full-screen scrolling transitions without
                        problems, but your mileage may vary.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a href="/untyping/category/javascript/" rel="category tag"
                      >Javascript</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Smooth Scrolling for Mobile Safari</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-39"
              class="post-39 post type-post status-publish format-standard hentry category-front-page category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 Jan 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/21/all-about-amazons-dynamo/"
                      rel="bookmark"
                      title="Permanent Link to All About Amazon’s Dynamo"
                      >All About Amazon’s Dynamo</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      The second paper we looked at in <a
                        href="http://untyped.wpengine.com/2011/01/10/the-university-of-untyped/"
                        >UU</a
                      > is Amazon’s 2007 paper on<a
                        href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf"
                        >Dynamo</a
                      >. Dynamo is an example of a new type of database dubbed
                      NoSQL and <a href="http://wiki.basho.com/">Riak</a> is an
                      open-source implementation of the Dynamo architecture.
                      Studying Dynamo is worthwhile for a number of reasons:
                    </p>
                    <ul>
                      <li>
                        It combines a lot of recent ideas in distributed
                        systems. These ideas are worth learning in their own
                        right to avoid mistakes like<a
                          href="http://blog.reddit.com/2010/03/and-fun-weekend-was-had-by-all.html"
                          >Reddit’s</a
                        > when building scalable systems.
                      </li>
                      <li>
                        Since Riak is basically Dynamo, knowledge of Dynamo is
                        directly applicable.
                      </li>
                      <li>
                        Understanding the design trade-offs in Dynamo provides a
                        way to understand the rest of the NoSQL space.
                      </li>
                    </ul>
                    <h2>So, What is NoSQL?</h2>
                    <p>
                      In the old days everyone used relational databases and it
                      was good. Then along came the web, and with the web a
                      tidal wave of data, and things were not good. The
                      tradeoffs made by relational databases (maintaining the
                      famous <a href="http://en.wikipedia.org/wiki/ACID">ACID</a
                      > properties) made them unsuitable for tasks where
                      response time and availability were paramount. This is the
                      case for many web applications. For example, it doesn’t
                      really matter if my Facebook status updates aren’t
                      immediately visible to all my friends, but it does matter
                      if my browser hangs for a minute while the back-end tries
                      to get a write lock on the status table.
                    </p>
                    <p>
                      NoSQL databases make a different set of tradeoffs, and
                      achieve different performance characteristics as a result.
                      Typically, NoSQL databases focus on scalability, fast
                      response times, and availability, and give up atomicity
                      and consistency. This tradeoff is formalised via the <a
                        href="http://en.wikipedia.org/wiki/CAP_theorem"
                        >CAP Theorem</a
                      >, which states that a <em>distributed system</em> cannot
                      provide consistency, availability, and partition tolerance
                      all at the same time (although two out of three of these
                      properties are achievable at once). Dynamo provides
                      availability and partition tolerance at the expense of
                      consistency. Other NoSQL databases may make different
                      tradeoffs. SQL databases typically provide consistency and
                      availability at the expense of partition tolerance.
                    </p>
                    <h2>Reading the Paper</h2>
                    <p>
                      The Dynamo paper can be difficult to read. The main issue
                      we had is that the authors don’t always motivate the
                      different components of the system. For example,
                      consistent hashing is one of the earlier concepts
                      introduced in the paper, but it is difficult to see why it
                      is used and how it contributes to increased availability
                      until later on. It is best to approach each section of the
                      article as a self-contained idea, and wait until the end
                      to see how they are combined. It took us two sessions to
                      get through the paper, so don’t be surprised if you find
                      it slow going.
                    </p>
                    <h2>Setting Out the Shop</h2>
                    <p>
                      The paper starts by laying out the properties required of
                      Dynamo. We’ve talked about the tradeoff between
                      consistency, availability, and partition tolerance above.
                      Some of the other properties are:
                    </p>
                    <ul>
                      <li>
                        Cost-effectiveness. This is important but often
                        overlooked. You’ll sometimes see supporters of
                        relational databases arguing that if people got some <em
                          >real database hardware</em
                        > they’d never need NoSQL. The problem with real
                        hardware is it’s expensive. If my 20-CPU database server
                        is at full capacity I have to drop another $20’000 just
                        to handle another 5% increase in traffic. I probably
                        can’t get next day delivery on this type of server,
                        either. With a system like Dynamo I can just boot up
                        another $500/yr virtual machine.
                      </li>
                      <li>
                        Dynamo is a key-value store. This means that there are
                        no foreign keys and hence no joins: the application must
                        provide all of this, or more likely use a denormalised
                        data representation. Furthermore, Dynamo sees its data
                        as opaque binary blobs, so search is only possible using
                        primary keys. Other NoSQL databases make different
                        choices: <a href="http://www.mongodb.org/">MongoDB</a
                        > and <a href="http://www.couch.io/">CouchDB</a> are
                        document-oriented stores, meaning that data is stored as
                        a JSON-like tree of keys and values; <a
                          href="http://hbase.apache.org/">HBase</a
                        > and <a href="http://cassandra.apache.org/"
                          >Cassandra</a
                        > store data as tuples, like a relational database, but
                        without foreign keys.
                      </li>
                      <li>
                        Low configuration, and fully distributed design. These
                        two go hand-in-hand. A fully distributed design means
                        all nodes are the same, and thus have the same
                        configuration. It also means there is no single point of
                        failure, another desirable feature. Again, different
                        systems take different approaches. For example,<a
                          href="http://www.mongodb.org/display/DOCS/Replication"
                          >MongoDB</a
                        > and most relational databases have a master/slave
                        setup in which one machine has special “master”
                        significance. Obviously in this setup different machines
                        have different configurations.
                      </li>
                    </ul>
                    <h2>Big Ideas</h2>
                    <p>
                      Dynamo is the fusion of a lot of ideas that are have
                      developed in the field of distributed systems. Rather than
                      duplicate the paper I want to discuss four points that I
                      found interesting:
                    </p>
                    <ul>
                      <li>Consistent hashing</li>
                      <li>Dynamo’s implementation</li>
                      <li>Amazon’s quality metric</li>
                      <li>Feedback control for balancing tasks</li>
                    </ul>
                    <h2>Consistent Hashing</h2>
                    <p>
                      If you take one point from Dynamo, let it be the
                      usefulness of<a
                        href="http://en.wikipedia.org/wiki/Consistent_hashing"
                        >consistent hashing</a
                      >. The basic idea of consistent hashing is to decouple the
                      value of a key from the machine it is stored on. If you do
                      this you can add and remove machines from your data store
                      without breaking anything. If you don’t, <a
                        href="http://blog.reddit.com/2010/03/and-fun-weekend-was-had-by-all.html"
                        >you’re in a world of pain.</a
                      >
                    </p>
                    <p>
                      Consistent hashing is best explained via an example of
                      doing it wrong. Say you have <code>N</code> machines
                      serving as your data store. Given a key you want to work
                      out which machine stores the data. A simple way to do so
                      (which is what Reddit did) is to calculate <code
                        >key mod N</code
                      >. Now suppose due to increased load you want to add a
                      machine in your data store. Now <code>key mod (N+1)</code
                      > won’t give the same result, so you can’t find your data
                      any more. To fix this you have to flush out the data and
                      reinsert it, which will take a long time. Or you can use
                      consistent hashing from the outset.
                    </p>
                    <p>
                      <img
                        fetchpriority="high"
                        decoding="async"
                        title="Consistent hashing"
                        src="http://untyped.wpengine.com/wp-content/uploads/2011/01/consistent-hashing.png"
                        alt="An example of consistent hashing. The small circles indicate the tokens, and the colours the segments of the hash ring allocated to each server."
                        width="285"
                        height="285"
                      />In consistent hashing you arrange the space of hash keys
                      into a ring. Each server inserts a token into the ring,
                      and is responsible for keys that lie in the range from
                      it’s token to the nearest preceding token. This is
                      illustrated in the image to the left. The small circles
                      indicate the tokens, and the colours the segments of the
                      hash ring allocated to each server.
                    </p>
                    <p>
                      Adding a new server only requires coordination with the
                      server that previously occupied that part of the hash
                      space. In the original consistent hashing paper tokens
                      were inserted at random. For Dynamo it was found that a
                      more structured system worked better. I’ll leave the
                      details of this and other issues (in particular, routing
                      and replication) to the paper.
                    </p>
                    <h2>Non-blocking IO</h2>
                    <p>
                      The section on Dynamo’s implementation will be interesting
                      to PL geeks. If you’ve ever rolled your eyes at the
                      manual <a
                        href="http://en.wikipedia.org/wiki/Continuation-passing_style"
                        >continuation-passing style</a
                      > inflicted by Javascript then you might at least crack a
                      wry smile when you read about essentially the same
                      technique being used in Dynamo. There is an interesting
                      debate to be had on the virtues of non-blocking IO vs
                      thread-per-connection. At the moment my opinion is
                      non-blocking IO is a necessary evil given kernels written
                      in unsafe languages (and hence expensive context
                      switches). Erlang does a good job of presenting a simple
                      programming model with its light-weight threads, but
                      achieving decent SMP performance can be hard due to the
                      mismatch between application and OS threads. It’s my hope
                      that languages like <a
                        href="https://github.com/graydon/rust/wiki">Rust</a
                      > will give a pragmatic solution to this dilemma.
                    </p>
                    <h2>Amazon’s Quality Metric</h2>
                    <p>
                      Although it isn’t part of the main thrust of the paper, I
                      found it interesting that Amazon measure response time and
                      other variables at the 99.9% percentile. Amazon have a
                      very good reputation, and for other companies looking to
                      achieve the same stature it is good to know the goal to
                      aim for.
                    </p>
                    <h2>Feedback Control for Balancing Tasks</h2>
                    <p>
                      I’ve recently implemented feedback control (in particular,
                      proportional error control) for a database connection
                      pool. (I’ll blog about this in a bit.) It’s interesting
                      that Dynamo uses a similar method to balance tasks within
                      each node (Section 6.5). I think we’re going to see more
                      self-regulating systems in the future. The work at<a
                        href="http://radlab.cs.berkeley.edu/publications"
                        >RADLab</a
                      > is a good example of what might make it into production
                      in a few years.
                    </p>
                    <p>
                      By scheduling tasks itself Dynamo is performing a task
                      typically handled by the operating system. I think in the
                      future this will be more commonplace, with the distinction
                      between operating system and application program becoming
                      increasingly blurred. The<a
                        href="http://www.managedruntime.org/"
                        >Managed Runtime Initiative</a
                      > is one project that aims to do this.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on All About Amazon’s Dynamo</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-43"
              class="post-43 post type-post status-publish format-standard hentry category-business category-front-page category-general category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 Jan 2011</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2011/01/10/the-university-of-untyped/"
                      rel="bookmark"
                      title="Permanent Link to The University of Untyped"
                      >The University of Untyped</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve recently started a reading group at Untyped. As
                      consultants we need to maintain our expertise, so every
                      Friday we tackle something new for a few hours. Given our
                      love of Universities (we average three degrees per
                      Untypist) and our even greater love of grandiose corporate
                      training (hello, <a
                        href="http://www.aboutmcdonalds.com/mcd/careers/hamburger_university.html"
                        >Hamburger University</a
                      >!) we have named this program Untyped University.
                    </p>
                    <p>
                      Broadly, we’re covering the business of the web and the
                      business of building the web. The online business is, from
                      certain angles, quite simple. The vast majority of
                      businesses can be viewed as a big pipeline, sucking in
                      visitors from the Internet-at-large, presenting some
                      message to the user, and then hoping they click “Buy”. At
                      each stage of the pipeline people drop out. They drop out
                      right at the beginning if the site isn’t ranked high
                      enough on search terms or has poorly targetted ads. They
                      abandon the website if the design is wrong, or the site is
                      slow, or the offer isn’t targeted correctly. Each step of
                      this pipeline has tools and techniques that can be used to
                      retain users, which we’ll be covering. The flipside of
                      this is the pipeline that delivers the site, starting with
                      data stores, going through application servers, and
                      finishing at the browser or other client interface. Here
                      we’ll be looking at the technologies and patterns for
                      building great sites.
                    </p>
                    <p>
                      So far we’ve run a couple of sessions. The first covered
                      bandit algorithms, and the second Amazon’s Dynamo. We’ll
                      blog about these soon. We’ve started a <a
                        href="http://www.mendeley.com/groups/771021/untyped-university/"
                        >Mendeley group</a
                      > to store our reading (though not everything we cover in
                      future will be in published form.) Do join in if it takes
                      your fancy!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/business/" rel="category tag"
                      >Business</a
                    >,
                    <a href="/untyping/category/front-page/" rel="category tag"
                      >Front page</a
                    >,
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on The University of Untyped</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-46"
              class="post-46 post type-post status-publish format-standard hentry category-code category-functional-programming category-scala category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">1 Dec 2010</p>
                  <p class="author">by Dave</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/12/01/file-upload-using-comet-actors/"
                      rel="bookmark"
                      title="Permanent Link to File upload using Comet Actors"
                      >File upload using Comet Actors</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve been using the <a href="http://liftweb.net/">Lift</a
                      > web framework for a lot of web development work
                      recently, and we’re very impressed some of its features.
                      Lift’s Comet support, in particular, is a blessing for the
                      kind of data-crunching back-end web sites we typically get
                      involved in.
                    </p>
                    <p>
                      Importing data from uploaded files, for example,
                      frequently causes trouble. An import can take from a few
                      seconds to a few minutes depending on the size of the file
                      and the complexity of the data processing and validation
                      involved. If the import takes more than a few seconds
                      there is an increasing risk that the web browser will time
                      out. If this happens we fail, because the user won’t know
                      whether the import succeeded or not. Lift’s Comet actors
                      provide a simple way around this problem. But before
                      describing how they work, let’s quickly go over <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)"
                        >Comet</a
                      > and <a href="http://en.wikipedia.org/wiki/Actor_model"
                        >actors</a
                      >.
                    </p>
                    <p>
                      Comet is a way of doing push notifications over HTTP,
                      which on the face of it appears to only support pull.
                      Without the jargon, this means a way of allowing the
                      server to send information to the web browser when that
                      information is ready, not when the web browser checks for
                      it. This gives us a better interface, as the UI can
                      instantly reflect new data, and better resource
                      consumption, as the client doesn’t have to continuously
                      poll the server.
                    </p>
                    <p>
                      There are two or three common ways of <a
                        href="http://en.wikipedia.org/wiki/Comet_(programming)#Implementations"
                        >implementing Comet</a
                      >. Lift uses a mechanism called “long polling”, which
                      implements Comet using plain old AJAX. As soon as the web
                      page loads, the web browser sends an XMLHTTP request to
                      the server. Instead of replying immediately the server
                      keeps the connection around until it has information to
                      push back. When information is available, the web server
                      responds to the HTTP request, and the browser processes
                      the response and immediately makes another request.  In
                      other words, long polling uses HTTP’s pull mechanism to
                      simulate push communication. This is all well and good,
                      but it immediately raises two issues: how do we manage a
                      large number of open, but idle, connections without
                      swamping the server, and what programming model do we use
                      to manage the additional complexity of Comet applications.
                    </p>
                    <p>
                      Handing many idle open connections is relatively simple.
                      The traditional model is to use one thread per request,
                      but this doesn’t scale when many requests are idle for
                      long periods. All modern operating systems provide a
                      scalable event notification system, such as <a
                        href="http://en.wikipedia.org/wiki/Epoll">epoll</a
                      > or <a href="http://en.wikipedia.org/wiki/Kqueue"
                        >kqueue</a
                      >, allowing a single thread to simultaneously monitor many
                      connections for data. The JVM provides access to these
                      systems via the <a
                        href="http://download.oracle.com/javase/6/docs/api/java/nio/channels/Selector.html"
                        >Selector</a
                      > abstraction in the <a
                        href="http://en.wikipedia.org/wiki/New_I/O">NIO</a
                      > package. All this is taken care of in the web framework,
                      so the application programmer does not need to be aware of
                      it. (Note that other languages present the same facilities
                      in different ways. Erlang, for example, presents all IO
                      operations as blocking, but the implementation uses the
                      same scalable non-blocking OS services as the JVM. Erlang
                      can do this as it doesn’t use as many resources per thread
                      as the JVM does. This is an appealing choice as it
                      provides a uniformity not found on the JVM, but impacts
                      how Erlang handles multicore.)
                    </p>
                    <p>
                      More relevant to the application programmer is the
                      programming model used for Comet, and this is where actors
                      come in. An actor is basically a thread with the important
                      restriction that it only communicates with the outside
                      world via messages. To ask an actor to do something, you
                      send it a message. This is rather like a method call,
                      except that the actor queues the message and processes it
                      asynchronously. When an actor wants to communicate with
                      another resource, it sends that resource a message. Since
                      actors never share state with each other, there is never a
                      need to lock resources to avoid concurrent access. This is
                      a great model because all the complexities of programming
                      with locks disappear. If you are interested in more
                      information on the actor model in Scala try <a
                        href="http://lamp.epfl.ch/~phaller/actors.html"
                        >here for the original papers</a
                      >, <a href="http://akkasource.org/"
                        >here for the Akka framework</a
                      > and <a
                        href="http://blog.lostlake.org/index.php?/archives/96-Migrating-from-Scala-Actors-to-Lift-Actors.html"
                        >here for a bit on Lift’s actors</a
                      >.
                    </p>
                    <p>
                      Actors are a natural fit for Comet. On the server each
                      Comet connection is handled by a <em>Comet actor,</em
                      > whose job it is to manage communication with a connected
                      browser. Each actor is bound to a single user’s session,
                      but actors persist across web requests. We can
                      asynchronously send an actor messages (whether the user is
                      looking at the web page or not), and have the actor buffer
                      them for transmission to the browser. This means we’ve got
                      almost all of our file upload functionality straight out
                      of the box, without having to do any particularly tricky
                      development.
                    </p>
                    <p>
                      We put a proof-of-concept of the file uploader <a
                        href="https://github.com/junglebarry/CometImport"
                        >on Github</a
                      >. The basic structure of the code is:
                    </p>
                    <ul>
                      <li>
                        When a file is uploaded it is handed off to a thread for
                        processing, and a Comet actor is started to communicate
                        with the client.
                      </li>
                      <li>
                        The processing thread periodically sends messages to the
                        actor, informing it of progress on the file upload.
                      </li>
                      <li>
                        The Comet actor in turn communicates progress to the
                        client.
                      </li>
                    </ul>
                    <p>
                      The great thing about this arrangement is that the user
                      can navigate away from the page without aborting the file
                      upload, and if they later return to the page they will get
                      a progress update. It makes for a very pleasant UI.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag">Functional Programming</a
                    >,
                    <a href="/untyping/category/scala/" rel="category tag"
                      >Scala</a
                    >,
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on File upload using Comet Actors</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-48"
              class="post-48 post type-post status-publish format-standard hentry category-code category-racket"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">26 Nov 2010</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/11/26/interested-in-a-book-on-racket/"
                      rel="bookmark"
                      title="Permanent Link to Interested in a Book on Racket?"
                      >Interested in a Book on Racket?</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you are interested in a book on <a
                        href="http://www.racket-lang.org/">Racket</a
                      > (formerly PLT Scheme) I’d appreciate it if you could
                      fill out <a href="http://www.surveymonkey.com/s/MKQL3YX"
                        >this survey</a
                      >. Thanks!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Interested in a Book on Racket?</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-50"
              class="post-50 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">19 Nov 2010</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2010/11/19/a-reflection-on-working-in-a-team/"
                      rel="bookmark"
                      title="Permanent Link to A Reflection on Working in a Team"
                      >A Reflection on Working in a Team</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Being in the office more frequently has given me more
                      opportunity to work in a team; for better or worse (and
                      mostly worse, in my opinion) the PhD students in my lab
                      tended to work alone. An interesting example of the
                      benefits of team working arose a few days ago. We are in
                      the process of shifting <a href="http://www.getkahu.com/"
                        >Kahu</a
                      > from its current colo server to a VM. As part of this
                      move we want to benchmark the two servers, to make sure
                      the new VM isn’t going to give us an unexpected
                      performance hit. To do the benchmarking we needed to log
                      more performance statistics, and adding logging to our
                      code was the task Dave and I were working on. I started
                      with a grand plan: we would write three libraries, one for
                      logging, one for bechmarking, and one for logging
                      benchmark data. I remember feeling frustrated as we
                      discussed it as the plan was clear in my mind and I
                      thought I could easily get on and code it alone. However,
                      as we talked more it became apparent the existing tools we
                      had were good enough for most of what we wanted. In the
                      end we wrote a single macro and were done. From three
                      libraries down to four lines of code is a pretty good
                      reduction in effort.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on A Reflection on Working in a Team</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/">&laquo; Newer Entries</a></span
                  >
                  <span class="older"
                    ><a href="/untyping/page/3/">Older Entries &raquo;</a></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="search-2" class="widget widget_search">
                  <form
                    role="search"
                    method="get"
                    id="searchform"
                    class="searchform"
                    action="/"
                  >
                    <div>
                      <label class="screen-reader-text" for="s"
                        >Search for:</label
                      >
                      <input type="text" value="" name="s" id="s" />
                      <input type="submit" id="searchsubmit" value="Search" />
                    </div>
                  </form>
                </li>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
                <li id="meta-2" class="widget widget_meta">
                  <h2 class="widgettitle">Meta</h2>
                  <ul>
                    <li><a href="/wp-login.php">Log in</a></li>
                    <li><a href="/feed/">Entries feed</a></li>
                    <li><a href="/comments/feed/">Comments feed</a></li>

                    <li>
                      <a href="https://en-gb.wordpress.org/">WordPress.org</a>
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>

    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
