---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>Untyping &#8211; Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />

    <!--[if lt IE 9]>
      <link rel="stylesheet" href="/styles/ie8.css" />
      <script src="/scripts/html5shiv.js"></script>
    <![endif]-->

    <!--<link rel="stylesheet" href="/styles/pygments.css" type="text/css" media="screen">-->

    <link
      rel="alternate"
      type="application/rss+xml"
      title="Untyped RSS Feed"
      href="/feed/"
    />
    <link
      rel="alternate"
      type="application/atom+xml"
      title="Untyped Atom Feed"
      href="/feed/atom/"
    />
    <link rel="pingback" href="/xmlrpc.php" />

    <meta name="robots" content="max-image-preview:large" />
    <script type="text/javascript">
      /* <![CDATA[ */
      window._wpemojiSettings = {
        baseUrl: "https://s.w.org/images/core/emoji/15.0.3/72x72/",
        ext: ".png",
        svgUrl: "https://s.w.org/images/core/emoji/15.0.3/svg/",
        svgExt: ".svg",
        source: {
          concatemoji: "/wp-includes/js/wp-emoji-release.min.js?ver=6.6.2",
        },
      };
      /*! This file is auto-generated */
      !(function (i, n) {
        var o, s, e;
        function c(e) {
          try {
            var t = { supportTests: e, timestamp: new Date().valueOf() };
            sessionStorage.setItem(o, JSON.stringify(t));
          } catch (e) {}
        }
        function p(e, t, n) {
          e.clearRect(0, 0, e.canvas.width, e.canvas.height),
            e.fillText(t, 0, 0);
          var t = new Uint32Array(
              e.getImageData(0, 0, e.canvas.width, e.canvas.height).data
            ),
            r =
              (e.clearRect(0, 0, e.canvas.width, e.canvas.height),
              e.fillText(n, 0, 0),
              new Uint32Array(
                e.getImageData(0, 0, e.canvas.width, e.canvas.height).data
              ));
          return t.every(function (e, t) {
            return e === r[t];
          });
        }
        function u(e, t, n) {
          switch (t) {
            case "flag":
              return n(e, "🏳️‍⚧️", "🏳️​⚧️")
                ? !1
                : !n(e, "🇺🇳", "🇺​🇳") && !n(e, "🏴󠁧󠁢󠁥󠁮󠁧󠁿", "🏴​󠁧​󠁢​󠁥​󠁮​󠁧​󠁿");
            case "emoji":
              return !n(e, "🐦‍⬛", "🐦​⬛");
          }
          return !1;
        }
        function f(e, t, n) {
          var r =
              "undefined" != typeof WorkerGlobalScope &&
              self instanceof WorkerGlobalScope
                ? new OffscreenCanvas(300, 150)
                : i.createElement("canvas"),
            a = r.getContext("2d", { willReadFrequently: !0 }),
            o = ((a.textBaseline = "top"), (a.font = "600 32px Arial"), {});
          return (
            e.forEach(function (e) {
              o[e] = t(a, e, n);
            }),
            o
          );
        }
        function t(e) {
          var t = i.createElement("script");
          (t.src = e), (t.defer = !0), i.head.appendChild(t);
        }
        "undefined" != typeof Promise &&
          ((o = "wpEmojiSettingsSupports"),
          (s = ["flag", "emoji"]),
          (n.supports = { everything: !0, everythingExceptFlag: !0 }),
          (e = new Promise(function (e) {
            i.addEventListener("DOMContentLoaded", e, { once: !0 });
          })),
          new Promise(function (t) {
            var n = (function () {
              try {
                var e = JSON.parse(sessionStorage.getItem(o));
                if (
                  "object" == typeof e &&
                  "number" == typeof e.timestamp &&
                  new Date().valueOf() < e.timestamp + 604800 &&
                  "object" == typeof e.supportTests
                )
                  return e.supportTests;
              } catch (e) {}
              return null;
            })();
            if (!n) {
              if (
                "undefined" != typeof Worker &&
                "undefined" != typeof OffscreenCanvas &&
                "undefined" != typeof URL &&
                URL.createObjectURL &&
                "undefined" != typeof Blob
              )
                try {
                  var e =
                      "postMessage(" +
                      f.toString() +
                      "(" +
                      [JSON.stringify(s), u.toString(), p.toString()].join(
                        ","
                      ) +
                      "));",
                    r = new Blob([e], { type: "text/javascript" }),
                    a = new Worker(URL.createObjectURL(r), {
                      name: "wpTestEmojiSupports",
                    });
                  return void (a.onmessage = function (e) {
                    c((n = e.data)), a.terminate(), t(n);
                  });
                } catch (e) {}
              c((n = f(s, u, p)));
            }
            t(n);
          })
            .then(function (e) {
              for (var t in e)
                (n.supports[t] = e[t]),
                  (n.supports.everything =
                    n.supports.everything && n.supports[t]),
                  "flag" !== t &&
                    (n.supports.everythingExceptFlag =
                      n.supports.everythingExceptFlag && n.supports[t]);
              (n.supports.everythingExceptFlag =
                n.supports.everythingExceptFlag && !n.supports.flag),
                (n.DOMReady = !1),
                (n.readyCallback = function () {
                  n.DOMReady = !0;
                });
            })
            .then(function () {
              return e;
            })
            .then(function () {
              var e;
              n.supports.everything ||
                (n.readyCallback(),
                (e = n.source || {}).concatemoji
                  ? t(e.concatemoji)
                  : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji)));
            }));
      })((window, document), window._wpemojiSettings);
      /* ]]> */
    </script>
    <style id="wp-emoji-styles-inline-css" type="text/css">
      img.wp-smiley,
      img.emoji {
        display: inline !important;
        border: none !important;
        box-shadow: none !important;
        height: 1em !important;
        width: 1em !important;
        margin: 0 0.07em !important;
        vertical-align: -0.1em !important;
        background: none !important;
        padding: 0 !important;
      }
    </style>
    <link
      rel="stylesheet"
      id="wp-block-library-css"
      href="/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2"
      type="text/css"
      media="all"
    />
    <style id="classic-theme-styles-inline-css" type="text/css">
      /*! This file is auto-generated */
      .wp-block-button__link {
        color: #fff;
        background-color: #32373c;
        border-radius: 9999px;
        box-shadow: none;
        text-decoration: none;
        padding: calc(0.667em + 2px) calc(1.333em + 2px);
        font-size: 1.125em;
      }
      .wp-block-file__button {
        background: #32373c;
        color: #fff;
        text-decoration: none;
      }
    </style>
    <style id="global-styles-inline-css" type="text/css">
      :root {
        --wp--preset--aspect-ratio--square: 1;
        --wp--preset--aspect-ratio--4-3: 4/3;
        --wp--preset--aspect-ratio--3-4: 3/4;
        --wp--preset--aspect-ratio--3-2: 3/2;
        --wp--preset--aspect-ratio--2-3: 2/3;
        --wp--preset--aspect-ratio--16-9: 16/9;
        --wp--preset--aspect-ratio--9-16: 9/16;
        --wp--preset--color--black: #000000;
        --wp--preset--color--cyan-bluish-gray: #abb8c3;
        --wp--preset--color--white: #ffffff;
        --wp--preset--color--pale-pink: #f78da7;
        --wp--preset--color--vivid-red: #cf2e2e;
        --wp--preset--color--luminous-vivid-orange: #ff6900;
        --wp--preset--color--luminous-vivid-amber: #fcb900;
        --wp--preset--color--light-green-cyan: #7bdcb5;
        --wp--preset--color--vivid-green-cyan: #00d084;
        --wp--preset--color--pale-cyan-blue: #8ed1fc;
        --wp--preset--color--vivid-cyan-blue: #0693e3;
        --wp--preset--color--vivid-purple: #9b51e0;
        --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(
          135deg,
          rgba(6, 147, 227, 1) 0%,
          rgb(155, 81, 224) 100%
        );
        --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(
          135deg,
          rgb(122, 220, 180) 0%,
          rgb(0, 208, 130) 100%
        );
        --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(
          135deg,
          rgba(252, 185, 0, 1) 0%,
          rgba(255, 105, 0, 1) 100%
        );
        --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(
          135deg,
          rgba(255, 105, 0, 1) 0%,
          rgb(207, 46, 46) 100%
        );
        --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(
          135deg,
          rgb(238, 238, 238) 0%,
          rgb(169, 184, 195) 100%
        );
        --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(
          135deg,
          rgb(74, 234, 220) 0%,
          rgb(151, 120, 209) 20%,
          rgb(207, 42, 186) 40%,
          rgb(238, 44, 130) 60%,
          rgb(251, 105, 98) 80%,
          rgb(254, 248, 76) 100%
        );
        --wp--preset--gradient--blush-light-purple: linear-gradient(
          135deg,
          rgb(255, 206, 236) 0%,
          rgb(152, 150, 240) 100%
        );
        --wp--preset--gradient--blush-bordeaux: linear-gradient(
          135deg,
          rgb(254, 205, 165) 0%,
          rgb(254, 45, 45) 50%,
          rgb(107, 0, 62) 100%
        );
        --wp--preset--gradient--luminous-dusk: linear-gradient(
          135deg,
          rgb(255, 203, 112) 0%,
          rgb(199, 81, 192) 50%,
          rgb(65, 88, 208) 100%
        );
        --wp--preset--gradient--pale-ocean: linear-gradient(
          135deg,
          rgb(255, 245, 203) 0%,
          rgb(182, 227, 212) 50%,
          rgb(51, 167, 181) 100%
        );
        --wp--preset--gradient--electric-grass: linear-gradient(
          135deg,
          rgb(202, 248, 128) 0%,
          rgb(113, 206, 126) 100%
        );
        --wp--preset--gradient--midnight: linear-gradient(
          135deg,
          rgb(2, 3, 129) 0%,
          rgb(40, 116, 252) 100%
        );
        --wp--preset--font-size--small: 13px;
        --wp--preset--font-size--medium: 20px;
        --wp--preset--font-size--large: 36px;
        --wp--preset--font-size--x-large: 42px;
        --wp--preset--spacing--20: 0.44rem;
        --wp--preset--spacing--30: 0.67rem;
        --wp--preset--spacing--40: 1rem;
        --wp--preset--spacing--50: 1.5rem;
        --wp--preset--spacing--60: 2.25rem;
        --wp--preset--spacing--70: 3.38rem;
        --wp--preset--spacing--80: 5.06rem;
        --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
        --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
        --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
        --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1),
          6px 6px rgba(0, 0, 0, 1);
        --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
      }
      :where(.is-layout-flex) {
        gap: 0.5em;
      }
      :where(.is-layout-grid) {
        gap: 0.5em;
      }
      body .is-layout-flex {
        display: flex;
      }
      .is-layout-flex {
        flex-wrap: wrap;
        align-items: center;
      }
      .is-layout-flex > :is(*, div) {
        margin: 0;
      }
      body .is-layout-grid {
        display: grid;
      }
      .is-layout-grid > :is(*, div) {
        margin: 0;
      }
      :where(.wp-block-columns.is-layout-flex) {
        gap: 2em;
      }
      :where(.wp-block-columns.is-layout-grid) {
        gap: 2em;
      }
      :where(.wp-block-post-template.is-layout-flex) {
        gap: 1.25em;
      }
      :where(.wp-block-post-template.is-layout-grid) {
        gap: 1.25em;
      }
      .has-black-color {
        color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-color {
        color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-color {
        color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-color {
        color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-color {
        color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-color {
        color: var(--wp--preset--color--luminous-vivid-orange) !important;
      }
      .has-luminous-vivid-amber-color {
        color: var(--wp--preset--color--luminous-vivid-amber) !important;
      }
      .has-light-green-cyan-color {
        color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-color {
        color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-color {
        color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-color {
        color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-color {
        color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-black-background-color {
        background-color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-background-color {
        background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-background-color {
        background-color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-background-color {
        background-color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-background-color {
        background-color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-background-color {
        background-color: var(
          --wp--preset--color--luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-amber-background-color {
        background-color: var(
          --wp--preset--color--luminous-vivid-amber
        ) !important;
      }
      .has-light-green-cyan-background-color {
        background-color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-background-color {
        background-color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-background-color {
        background-color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-background-color {
        background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-background-color {
        background-color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-black-border-color {
        border-color: var(--wp--preset--color--black) !important;
      }
      .has-cyan-bluish-gray-border-color {
        border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
      }
      .has-white-border-color {
        border-color: var(--wp--preset--color--white) !important;
      }
      .has-pale-pink-border-color {
        border-color: var(--wp--preset--color--pale-pink) !important;
      }
      .has-vivid-red-border-color {
        border-color: var(--wp--preset--color--vivid-red) !important;
      }
      .has-luminous-vivid-orange-border-color {
        border-color: var(
          --wp--preset--color--luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-amber-border-color {
        border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
      }
      .has-light-green-cyan-border-color {
        border-color: var(--wp--preset--color--light-green-cyan) !important;
      }
      .has-vivid-green-cyan-border-color {
        border-color: var(--wp--preset--color--vivid-green-cyan) !important;
      }
      .has-pale-cyan-blue-border-color {
        border-color: var(--wp--preset--color--pale-cyan-blue) !important;
      }
      .has-vivid-cyan-blue-border-color {
        border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
      }
      .has-vivid-purple-border-color {
        border-color: var(--wp--preset--color--vivid-purple) !important;
      }
      .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
        background: var(
          --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple
        ) !important;
      }
      .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
        background: var(
          --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan
        ) !important;
      }
      .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
        background: var(
          --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange
        ) !important;
      }
      .has-luminous-vivid-orange-to-vivid-red-gradient-background {
        background: var(
          --wp--preset--gradient--luminous-vivid-orange-to-vivid-red
        ) !important;
      }
      .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
        background: var(
          --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray
        ) !important;
      }
      .has-cool-to-warm-spectrum-gradient-background {
        background: var(
          --wp--preset--gradient--cool-to-warm-spectrum
        ) !important;
      }
      .has-blush-light-purple-gradient-background {
        background: var(--wp--preset--gradient--blush-light-purple) !important;
      }
      .has-blush-bordeaux-gradient-background {
        background: var(--wp--preset--gradient--blush-bordeaux) !important;
      }
      .has-luminous-dusk-gradient-background {
        background: var(--wp--preset--gradient--luminous-dusk) !important;
      }
      .has-pale-ocean-gradient-background {
        background: var(--wp--preset--gradient--pale-ocean) !important;
      }
      .has-electric-grass-gradient-background {
        background: var(--wp--preset--gradient--electric-grass) !important;
      }
      .has-midnight-gradient-background {
        background: var(--wp--preset--gradient--midnight) !important;
      }
      .has-small-font-size {
        font-size: var(--wp--preset--font-size--small) !important;
      }
      .has-medium-font-size {
        font-size: var(--wp--preset--font-size--medium) !important;
      }
      .has-large-font-size {
        font-size: var(--wp--preset--font-size--large) !important;
      }
      .has-x-large-font-size {
        font-size: var(--wp--preset--font-size--x-large) !important;
      }
      :where(.wp-block-post-template.is-layout-flex) {
        gap: 1.25em;
      }
      :where(.wp-block-post-template.is-layout-grid) {
        gap: 1.25em;
      }
      :where(.wp-block-columns.is-layout-flex) {
        gap: 2em;
      }
      :where(.wp-block-columns.is-layout-grid) {
        gap: 2em;
      }
      :root :where(.wp-block-pullquote) {
        font-size: 1.5em;
        line-height: 1.6;
      }
    </style>
    <link rel="https://api.w.org/" href="/wp-json/" />
    <link
      rel="EditURI"
      type="application/rsd+xml"
      title="RSD"
      href="/xmlrpc.php?rsd"
    />
    <style type="text/css">
      .recentcomments a {
        display: inline !important;
        padding: 0 !important;
        margin: 0 !important;
      }
    </style>
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on and leave a comment<br />
              or <a href="/">return to our portfolio.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-159"
              class="post-159 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Dec 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/12/07/announcing-delirium/"
                      rel="bookmark"
                      title="Permanent Link to Announcing: Delirium"
                      >Announcing: Delirium</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Delirium is a web-browser automation toolkit, which means
                      it’s a Scheme library that provides a bunch of functions
                      that you can use to control a web browser. We expect the
                      primary use will be for web testing, and Delirium can be
                      used inside SchemeUnit like any other Scheme library.
                    </p>
                    <p>
                      For the Schemers Delirium isn’t anything special, but we
                      believe the use of continuations make Delirium a major
                      advance over similar web testing tools like Selenium. If
                      you write your server code in Scheme you can directly test
                      how your server side responds to web tests with tests
                      running on the same server. That is to say a test can
                      interleave calls to the web browser and to the server side
                      code, which is impractical without continuations. This
                      features makes it much easier to write reliable and
                      comprehensive tests.
                    </p>
                    <p>
                      Delirium is on <a
                        href="http://planet.plt-scheme.org/display.ss?package=delirium.plt&owner=untyped"
                        >PLaneT</a
                      >. Note the documentation was translated by hand from
                      Scribble source. Some errors may have been introduced
                      during the translation.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Announcing: Delirium</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-157"
              class="post-157 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Dec 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/12/07/icfp-2007-in-review/"
                      rel="bookmark"
                      title="Permanent Link to ICFP 2007 In Review"
                      >ICFP 2007 In Review</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      At last — the long awaited ICFP post! In summary: ICFP was
                      awesome. Freiburg is lovely, the German beer is fantastic,
                      and everyone at the conference was very friendly. It was
                      great to put faces to people we’ve conversed with for
                      years, to meet old friends, and to make new ones.
                    </p>
                    <p>
                      We gave two talks, one at ICFP on our work building web
                      sites in Scheme (<a
                        href="http://www.untyped.com/downloads/icfp068-welsh.pdf"
                        >paper here</a
                      >), and one at <a href="http://cufp.galois.com/">CUFP</a
                      > (<a
                        href="http://cufp.galois.com/slides/2007/NoelWelsh.tar.gz"
                        >PLT Slideshow slides</a
                      >
                      <a href="http://cufp.galois.com/slides/2007/NoelWelsh.pdf"
                        >PDF slides</a
                      >). Both were, I think, well received: a few people
                      expressed some interest in having us come and talk to
                      their groups, and the CUFP organisers invited us to join
                      them at dinner.
                    </p>
                    <p>
                      There was a definite buzz about ICFP. It seems functional
                      languages are beginning to take off — CUFP doubled its
                      attendence over last year, and ICFP strained the capacity
                      of the hotel. There was something of a reality distortion
                      field in place though. After a few days at the conference
                      you could begin to believe the entire software market
                      consisted of either program verification tools in Haskell
                      or telephony apps in Erlang. There was little
                      representation from web developers, who I think must make
                      up the largest group of commercial developers. I believe
                      this is because Haskell users really dominate ICFP, and
                      Haskell doesn’t have a particularly good web development
                      story as far as I know.
                    </p>
                    <p>
                      It was interesting to see how the other communities are
                      developing. The Haskell guys had a <a
                        href="http://www.haskell.org/haskellwiki/Hac_2007_II"
                        >3-day Hackathon</a
                      > right after ICFP, which is pretty impressive, and there
                      is a <a href="http://www.realworldhaskell.org/blog/"
                        >practical Haskell</a
                      > book in development, something which is needed for
                      Scheme. Erlang seemed to have slightly better industry
                      representation and also has several recent
                      practically-oriented publications. I heard that many
                      people had arrived just for the Erlang workshop, which was
                      held the day after CUFP.
                    </p>
                    <p>
                      Of course the conference revolved around the paper
                      presentations. There were too many to review them all, so
                      I’ll just note the ones that were particularly relevant to
                      our work at Untyped.
                    </p>
                    <p>
                      Matthew Flatt’s talk on <a
                        href="http://www.cs.utah.edu/plt/publications/icfp07-fyff.pdf"
                        >Adding Delimited and Composable Control to a Production
                        Programming Environment</a
                      > was a great presentation on a new feature in PLT Scheme,
                      delimited continuations, that will be very useful in the
                      web server. Matthew hacked <a
                        href="http://www.plt-scheme.org/software/slideshow/"
                        >Slideshow</a
                      > (something you can do when you’re the core developer) to
                      support animations by quickly fading between slides. His
                      1028 slides made for some slick animations that quickly
                      and clearly got across the concept of delimited
                      continuations. This was perhaps the best presentation I
                      saw at the conference and it was on something we’ll
                      definitely be using.
                    </p>
                    <p>
                      The <a
                        href="ftp://ftp.cs.kun.nl/pub/Clean/papers/2006/plar2006-FLOPS06-iDataForTheWeb.pdf"
                        >iData toolkit</a
                      > is a <a href="http://clean.cs.ru.nl/">Clean</a> library
                      that uses meta-programming to generate code for viewing
                      and editing arbitrary data online (like Ruby on Rail’s
                      scaffolding, but better). At ICFP this year the followup,<a
                        href="http://www.cs.ru.nl/~rinus/iTaskIntro.html"
                        >iTasks: Executable Specifications of Interactive Work
                        Flow Systems for the Web</a
                      >, was presented. Essentially it is a combinator library
                      for specifying workflows, including higher-order
                      workflows. At is happens we may soon be involved in a
                      project that deals with workflows, in which case we’ll
                      review this work.
                    </p>
                    <p>
                      I really liked <a
                        href="http://www.ccs.neu.edu/scheme/pubs/scheme2007-ctf.pdf"
                        >Advanced Macrology and the Implementation of Typed
                        Scheme</a
                      > by Ryan Culpepper, Sam Tobin-Hochstadt, and Matthew
                      Flatt. <a
                        href="http://www.ccs.neu.edu/home/samth/typed-scheme.html"
                        >Typed Scheme</a
                      > is pretty cool, and we’ll probably use it when it has
                      matured a bit more, but my favourite bit of this paper is
                      the first half which is essentially a tutorial on
                      intermediate to advanced macrology. There is precious
                      little material available on this corner of Scheme, so it
                      is very welcome addition.
                    </p>
                    <p>
                      Also of particular interest to us were <a
                        href="http://wingolog.org/archives/2007/10/04/vignettes"
                        >Applications of Fold to XML Transformation</a
                      >, and <a
                        href="http://www.cs.washington.edu/homes/djg/papers/transactions_continuations.pdf"
                        >Software Transactions Meet First-Class Continuations</a
                      >. We’ve already had occasion to use ideas from the
                      former, while the later gave us some food for thought with
                      regards to<a
                        href="http://planet.plt-scheme.org/display.ss?package=snooze.plt&owner=untyped"
                        >Snooze</a
                      > We had an interesting conversation with Adam Wingo,
                      author of the paper on folds, about the advantages of
                      distributed version control. Something we need to look
                      into. Adam also has a great job that allows him to spend
                      two days a week hanging out in Barcelona’s cafes. Some
                      people get all the luck.
                    </p>
                    <p>
                      One point from ICFP that is particularly relevant for this
                      blog: Dave Herman told me he’d like to see more technical
                      posts. I’ve tried to make the content a bit more technical
                      of late, but if there is anything in particular you’d like
                      me to write about drop me a line.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on ICFP 2007 In Review</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-155"
              class="post-155 post type-post status-publish format-standard hentry category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">7 Dec 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/12/07/icfp-2007-in-fashion/"
                      rel="bookmark"
                      title="Permanent Link to ICFP 2007 In Fashion"
                      >ICFP 2007 In Fashion</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Naturally no meeting of computer scientists would be
                      complete without some mention of fashion. The satorial
                      pinnacle of ICFP was easily claimed by <a
                        href="http://pied.mine.nu/">Adrien Pierard</a
                      > who was rocking a bowler hat and pipe combo. I was
                      pleased to find his hat was indeed sourced from<a
                        href="http://www.lockhatters.co.uk/historyhats.aspx"
                        >James Lock &amp; Co</a
                      >. I saw several <a
                        href="http://www.threadless.com/?from=noelw"
                        >Threadless</a
                      > t-shirts: <a
                        href="http://www.threadless.com/product/383/The_Communist_Party"
                        >The Communist Party</a
                      >, <a
                        href="http://www.threadless.com/product/256/Dark_Side_of_the_Garden"
                        >Dark Side of the Garden</a
                      >, and <a
                        href="http://threadless.com/product/297/Well_This_Just_Really_Sucks"
                        >Well This Just Really Sucks</a
                      >. (Follow the first link to <a
                        href="http://www.threadless.com/?from=noelw"
                        >Threadless</a
                      >, buy a T-Shirt, and I get $3.00 towards a tee. Follow
                      the other links and I get nadda. Threadless is a great
                      example of a business model that is only possible over the
                      Internet. If you’re not familiar with them, check ‘em
                      out.)
                    </p>
                    <p>
                      Computer scientists pay almost as much attention to their
                      computers as they do to their clothing. From an informal
                      survey of the conference Apple is continuing its rise in
                      popularity amongst the geek crowd — the ratio of Mac to
                      PCs was about 1:1. Of course a Mac is about as close to a
                      fashion statement as a computer can come, so it isn’t
                      surprising to see this adoption.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on ICFP 2007 In Fashion</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-163"
              class="post-163 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 Nov 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/11/23/custom-dispatchers-in-the-plt-scheme-web-server/"
                      rel="bookmark"
                      title="Permanent Link to Custom Dispatchers in the PLT Scheme Web Server"
                      >Custom Dispatchers in the PLT Scheme Web Server</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      We’ve just released &lt;a<br />
                      href=&#8221;http://planet.plt-scheme.org/display.ss?package=instaweb.plt&amp;owner=schematics&#8221;&gt;Instaweb<br
                      />
                      2.0. Instaweb is our utility that takes care of setting<br
                      />
                      up the PLT web-server and running servlets. If you have a<br
                      />
                      servlet in a file called <code>servlet.ss</code> with<br
                      />
                      Instaweb you just need to write the following lines to get<br
                      />
                      it running:
                    </p>
                    <pre
                      is:raw>
(require (planet "instaweb.ss" ("schematics" "instaweb.plt" 2)))
(instaweb)</pre>
                    <p>
                      The new version of Instaweb includes many new options and<br
                      />
                      works in a slightly different way to the 1.0 branch. To my<br
                      />
                      mind the best new feature is that Instaweb now configures<br
                      />
                      the web-server to pass to the servlet <em>all</em
                      > requests<br />
                      that don’t match a file in the <code>htdocs</code><br />
                      directory. This means your servlet no longer has to live<br
                      />
                      under a URL starting with <code>/servlets</code>. You can<br
                      />
                      &lt;a<br />
                      href=&#8221;http://planet.plt-scheme.org/package-source/schematics/instaweb.plt/2/1/doc.txt&#8221;&gt;read<br
                      />
                      the documentation to get the full details of what’s new.<br
                      />
                      What I want to talk about here is how we implelemented this,<br
                      />
                      as it illustrates some very nice features of the web-server<br
                      />
                      that aren’t well known.
                    </p>
                    <p>
                      In the web-server’s terminology a dispatcher is a<br />
                      function that may generate a response given a request.<br
                      />
                      Examples includes the filesystem dispatcher, which responds<br
                      />
                      to requests with the contents of a file, and the servlet<br
                      />
                      dispatcher, which invokes a servlet. Dispatchers are<br />
                      arranged in a list. The first dispatcher in the list<br />
                      inspects the request and, if it decides the request is<br
                      />
                      relevant, generates a response. Otherwise control is passed<br
                      />
                      to the next dispatcher in the list. For some time now the<br
                      />
                      web-server has had a configurable dispatcher pipeline, which<br
                      />
                      can be set by simply passing a value with the<br />
                      <code>#:dispatch</code> keyword to the <code>serve</code
                      ><br />
                      function.
                    </p>
                    <p>
                      The web-server provides a number of dispatchers, all in<br
                      />
                      the <code
                        >&lt;a<br />
                        href="http://svn.plt-scheme.org/plt/trunk/collects/web-server/dispatchers/"&gt;dispatchers</code
                      ><br />
                      subdirectory of the <code>web-server</code> collection.<br
                      />
                      They all provide a <code>make</code> function that does
                      most<br />
                      of the work. Here’s how to use the file, servlet, and<br
                      />
                      sequence dispatchers, the most generally useful ones:
                    </p>
                    <ol>
                      <li>
                        The file dispatcher, in<br />
                        <code>dispatch-files.ss</code>, takes a single
                        parameter, a<br />
                        function that converts a URL to a path (and another value<br
                        />
                        that the dispatcher ignores). The path can name a file,<br
                        />
                        which the dispatcher will serve if such a file actually<br
                        />
                        exists, or it can name a directory, in which case the<br
                        />
                        dispatcher will look for a file within that directory called<br
                        />
                        <code>index.html</code> or <code>index.htm</code>.
                        <p>
                          To use the file dispatcher you will probably want the<br
                          />
                          handy <code>make-url-&gt;path</code> function in<br />
                          <code>filesystem-map.ss</code>. Pass this function a
                          base<br />
                          path (the directory where your files live), and it will<br
                          />
                          return a function suitable to pass to the file<br />
                          dispatcher.
                        </p>
                        <p>Here’s an example of use:</p>
                        <pre
                          is:raw>
(require
(prefix file: (lib "dispatch-files.ss" "web-server" "dispatchers"))
(lib "filesystem-map.ss" "web-server" "dispatchers"))

(define base-path (string-&gt;path "/my/directory/of/files"))

;; htdocs-url-&gt;path : path -&gt; (url -&gt; path (list-of path-element))
(define (htdocs-url-&gt;path path)
(make-url-&gt;path (path-&gt;complete-path path)))

;; dispatch-htdocs : (connection request -&gt; response)
(define dispatch-htdocs
(file:make #:url-&gt;path (htdocs-url-&gt;path base-path)))</pre>
                      </li>
                      <li>
                        The servlet dispatcher, in <code
                          >dispatch-servlets.ss</code
                        > is a bit more difficult to use as you need a function
                        from the <code>private</code>subcollection of the
                        web-server, suggesting the code reorganisation isn’t
                        quite finished. The <code>make</code> function takes two
                        arguments, the first being a <code>cache-table</code>,
                        and the second being a function that, like for the file
                        dispatcher, maps URLs to paths. To construct a <code
                          >cache-table</code
                        > use the following lines of code:
                        <pre
                          is:raw>
(require
(lib "cache-table.ss" "web-server" "private"))

(define cache-table (box (make-cache-table)))</pre>
                        <p>
                          If you want all URLs to go a particular servlet, as in
                          Instaweb, the URL to path function just needs to
                          return the path of the servlet. The function used in
                          Instaweb is this:
                        </p>
                        <pre
                          is:raw>
;; serlvet-url-&gt;path : url -&gt; path (list-of path-element)
(define (servlet-url-&gt;path url)
(let ([complete-servlet-path (path-&gt;complete-path servlet-path)])
(values complete-servlet-path (explode-path* complete-servlet-path))))</pre>
                        <p>Now we can create a dispatcher as follows:</p>
                        <pre
                          is:raw>
;; clear-servlet-cache! : -&gt; void
;; dispatch-servlets:    connection request -&gt; response
(define-values (clear-servlet-cache! dispatch-servlets)
(servlet:make (box (make-cache-table))
#:url-&gt;path servlet-url-&gt;path))</pre>
                      </li>
                      <li>
                        The sequencer dispatcher couldn’t be easier to use. It
                        just takes any numbe of dispatchers and creates new
                        dispatcher that tries them in sequence. For example:
                        <pre
                          is:raw>
;; dispatch-all : connection request -&gt; response
(define dispatch-all
(sequencer:make dispatch-htdocs
dispatch-servlets))</pre>
                      </li>
                    </ol>
                    <p>
                      With the above you should be able to create your own
                      custom dispatchers. If you have problems just read the
                      (very short) Instaweb code!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Custom Dispatchers in the PLT Scheme Web Server</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-165"
              class="post-165 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">19 Oct 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/10/19/attack-of-the-spam-bots/"
                      rel="bookmark"
                      title="Permanent Link to Attack of the Spam Bots"
                      >Attack of the Spam Bots</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Over the last weekend, and sporadically this week, the
                      computer that hosts untyped.com and Untyped’s email server
                      has been under attack from a network of spam bots. It
                      doesn’t appear that we’ve been targeted specifically.
                      Rather, it seems that the bots are scanning for email
                      addresses to spam, presumably to propagate the bots. It
                      took down our email server over the weekend, but we’ve
                      since taken steps to combat the flood of traffic. However,
                      if you sent us an email and are waiting for a response,
                      you might want to send it again.
                    </p>
                    <p>
                      We’d don’t know what bot is attacking us, but there is a
                      good chance it is the <a
                        href="http://en.wikipedia.org/wiki/Storm_botnet"
                        >“Storm Worm”</a
                      >. I didn’t know of the Storm Worm before we were
                      attacked; my reading since then indicates it is a truly
                      massive network, with the potential to cause a lot of
                      trouble. <a
                        href="http://www.wired.com/politics/security/magazine/15-09/ff_estonia"
                        >This Wired piece</a
                      >discusses how Estonia was taken off the Internet by a
                      massive bot net attack.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Attack of the Spam Bots</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-167"
              class="post-167 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">8 Oct 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/10/08/of-interest-08102007/"
                      rel="bookmark"
                      title="Permanent Link to Of Interest 08/10/2007"
                      >Of Interest 08/10/2007</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Back from ICFP, but a full review will have to wait.
                      Meanwhile here’s some stuff I saw today that interested
                      me:
                    </p>
                    <ul>
                      <li>
                        <a
                          href="http://www.flickr.com/photos/carlzimmer/1414689773/in/set-72157601351535771/"
                          >Y-Combinator tattoo</a
                        >. Ouch! Comments on <code>plt-scheme</code> revolved
                        around the choice of font.
                      </li>
                      <li>
                        From the same discussion came a link to <a
                          href="http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&item_id=Gentium_samples"
                          >Gentium</a
                        >, which is a very nice font and is also free.
                      </li>
                    </ul>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Of Interest 08/10/2007</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-169"
              class="post-169 post type-post status-publish format-standard hentry category-fun category-functional-programming category-racket"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">28 Sep 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/09/28/untyped-at-icfp-2007/"
                      rel="bookmark"
                      title="Permanent Link to Untyped at ICFP 2007"
                      >Untyped at ICFP 2007</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      Dave and I, representing Untyped, will be at the <a
                        href="http://sfp2007.ift.ulaval.ca/">Scheme Workshop</a
                      >,<a
                        href="http://www.informatik.uni-bonn.de/~ralf/icfp07.html"
                        >ICFP</a
                      >, and <a href="http://cufp.galois.com/">CUFP</a> in
                      Freiburg. If you’re there, do say Hi!
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a
                    >,
                    <a
                      href="/untyping/category/functional-programming/"
                      rel="category tag">Functional Programming</a
                    >,
                    <a href="/untyping/category/racket/" rel="category tag"
                      >Racket</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Untyped at ICFP 2007</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-171"
              class="post-171 post type-post status-publish format-standard hentry category-code category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/23/as-recently-seen-on-the-untyped-subversion-commit-list/"
                      rel="bookmark"
                      title="Permanent Link to As recently seen on the Untyped Subversion commit list…"
                      >As recently seen on the Untyped Subversion commit list…</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I personally watch commits go by for several projects, and
                      it is instructive in many ways to read the commit messages
                      and code. It is a way to learn new things about the
                      software process as well as the implementation of
                      solutions in code. That said, very occasionally, you
                      actually get a giggle from the process…
                    </p>
                    <p>Today was one of those times.</p>
                    <pre
                      is:raw>
Date: 2007-08-22 12:22:06 +0100 (Wed, 22 Aug 2007)
New Revision: 1398
Log:
[DJG] IDCheck trunk:

Tests tests tests.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:41:46 +0100 (Wed, 22 Aug 2007)
New Revision: 1399
Log:
[DJG+NHW] IDCheck trunk:

Testing all the way.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:49:21 +0100 (Wed, 22 Aug 2007)
New Revision: 1400
Log:
[NHW+DJG] IDCheck trunk:

Oh what fun it is to ride on a one horse testing sleigh.</pre>
                    <p>
                      The song ends there, I’m afraid… but it does seem like
                      Dave and Noel are a bit cracked out today. Perhaps they
                      should be out playing frisbee instead of coding this fine
                      Thursday. As I’m not in the same timezone, it’s difficult
                      to say what’s going on over there…
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on As recently seen on the Untyped Subversion commit
                        list…</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-173"
              class="post-173 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/21/s3-doesnt-count-the-pennies-yet/"
                      rel="bookmark"
                      title="Permanent Link to S3 Doesn’t Count the Pennies (Yet)"
                      >S3 Doesn’t Count the Pennies (Yet)</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I use Amazon S3 as an off-site backup for data on my
                      desktop<br />
                      computer. S3 has two principle advantages: there’s no upper
                      limit on<br />
                      the amount of data you can transmit or store, and it’s very
                      cheap…<br />
                      sometimes a little too cheap.
                    </p>
                    <p>
                      Two days ago I received an auto-generated warning from S3
                      about my<br />
                      account status:
                    </p>
                    <blockquote>
                      <p>Greetings from Amazon Web Services,</p>
                      <p>
                        AWS was unable to charge your account based on the
                        payment<br />
                        information you provided. Please update your payment method<br
                        />
                        information using the Your Web Services Account section of
                        the AWS web<br />
                        site.
                      </p>
                      <p>Sincerely,</p>
                      <p>Amazon Web Services</p>
                    </blockquote>
                    <p>
                      There were a few extra details in there that convinced me
                      that this<br />
                      wasn’t spam, but that was the gist of it. I logged on to my
                      account to<br />
                      find that my balance was a whopping $0.01. A single cent!
                    </p>
                    <p>
                      I checked my credit card details and they seemed to be
                      okay. I<br />
                      re-entered them to be on the safe side, and then emailed AWS
                      asking<br />
                      them to re-try the payment and let me know if it failed again.
                      I<br />
                      received this response:
                    </p>
                    <blockquote>
                      <p>
                        Thank you for contacting AWS regarding the payment issue
                        related to<br />
                        your August 1st bill. We have found that some credit card
                        issuers<br />
                        decline charges of $0.01 (USD), especially when the amount
                        is<br />
                        converted to another currency. AWS is working on a solution
                        for this<br />
                        issue. In the meantime, please contact AWS<br />
                        directly at webservices@amazon.com if this issue should occur
                        again.
                      </p>
                      <p>
                        The $0.01 (USD) charge on your August 1st bill has been
                        forgiven,<br />
                        and your account is in good standing.
                      </p>
                    </blockquote>
                    <p>
                      A month’s backups, totally free of charge – <em>that’s</em
                      > value<br />
                      for money. I shall be recommending S3 to all my friends.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on S3 Doesn’t Count the Pennies (Yet)</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-175"
              class="post-175 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/06/refactoring-functional-programs/"
                      rel="bookmark"
                      title="Permanent Link to Refactoring Functional Programs"
                      >Refactoring Functional Programs</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      A little while ago we&lt;a<br />
                      href=&#8221;http://www.untyped.com/untyping/archives/2007/06/selenium_code_r.html&#8221;&gt;released<br
                      />
                      an interface to Selenium, a web testing framework.<br />
                      Since then we’ve learned that Selenium is simply too slow to<br
                      />
                      use in our work-flow. Hence we started on a faster<br />
                      reimplementation of the Selenium Remote Control.
                    </p>
                    <p>
                      A key part of this system is a proxy server, which is
                      necessary to get around the <a
                        href="http://www.mozilla.org/projects/security/components/same-origin.html"
                        >same origin</a
                      > security restriction in Javascript. I’ve just finished a
                      large refactoring of the proxy code, and I think the
                      experience is interesting enough to warrant a blog post.
                      While there is a <a href="http://www.refactoring.com/"
                        >large</a
                      >
                      <a href="https://netfiles.uiuc.edu/dig/RefactoringInfo/"
                        >literature</a
                      > on refactoring object-oriented programs, there is rather
                      less on <a
                        href="http://www.cs.kent.ac.uk/projects/refactor-fp/"
                        >refactoring functional programs</a
                      >, and what there is tends to concentrate on program
                      transformation tools (long a FP strength) at the expense
                      of collecting useful FP refactorings. This post is a small
                      contribution to redressing the balance.
                    </p>
                    <p>
                      The code I spent most time on was the HTTP parser. It is
                      structured as a state machine, so the initial version used
                      the classic FP pattern of<a
                        href="http://www.cs.brown.edu/~sk/Publications/Papers/Published/sk-automata-macros/"
                        >mutually tail recursive functions</a
                      >. The code for parsing an HTTP request looked something
                      like this:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define request-line #f)
(define headers #f)

(define (parse-request-line)
(set! request-line (read-request-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-request-line))</pre>
                    </div>
                    <p>
                      The code for parsing an HTTP response was very similar:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-response)
(define response-line #f)
(define headers #f)

(define (parse-response-line)
(set! response-line (read-response-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something-different))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-response-line))</pre>
                    </div>
                    <p>
                      The real code was several screens long. I wanted to make
                      it<br />
                      simpler by changing to a functional style, and reusing<br
                      />
                      common code between the request and response parsing<br />
                      functions. Converting to functional style is simple:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define (parse-request-line)
(define request-line (read-request-line))
(parse-headers request-line))

(define (parse-headers request-line)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(do-something request-line headers))

(parse-request-line))</pre>
                    </div>
                    <p>
                      Reusing common code is not simple. The finite state
                      machine<br />
                      pattern doesn’t abstract the next state. For example<br />
                      <code>parse-headers</code> in <code>parse-request</code
                      ><br />
                      always calls <code>do-something</code> whereas the
                      otherwise<br />
                      identical version in <code>parse-response</code> calls<br
                      />
                      <code>do-something-different</code>.
                    </p>
                    <p>
                      I solved this by refactoring the code into&lt;a<br />
                      href=&#8221;http://library.readscheme.org/page6.html&#8221;&gt;continuation-passing<br
                      />
                      style, leading to code that looks like the following:
                    </p>
                    <div>
                      <pre
                        is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line k)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(k request-line headers))

(define (parse-request)
(define (parse-request-line k)
(define request-line (read-request-line))
(k request-line))

(parse-request-line
(cut parse-headers &lt;&gt; do-something)))</pre>
                      <p>
                        Note that I’ve used &lt;a<br />
                        href=&#8221;http://srfi.schemers.org/srfi-26/srfi-26.html&#8221;&gt;cut<br
                        />
                        as a short-cut for <code>lambda</code>.
                      </p>
                      <p>
                        I’ve got code reuse but the code itself isn’t nice. The<br
                        />
                        arguments lists were quite a bit longer in the real code
                        and<br />
                        most of the time arguments are just passed from function
                        to<br />
                        function without being used (I’ve seen these sort of<br
                        />
                        arguments called “tramp data”). I also find<br />
                        that CPSed code can be quite difficult to read — you<br
                        />
                        have to construct the control flow graph in your head and<br
                        />
                        then look at the application site to fill in all the<br
                        />
                        continuations. Ugh.
                      </p>
                      <p>
                        One way to get rid of tramp data is to use <code
                          >parameters</code
                        >, and this something we talk about in our <a
                          href="http://www.untyped.com/untyping/archives/2007/08/a_scheme_case_s_1.html"
                          >experience report</a
                        >. However that solution isn’t appropriate here. It
                        forces me to stick with CPS so I can set the parameters
                        in the dynamic extent of the succeeding code, and it
                        extends the lifetime of the values beyond what is
                        strictly necessary. This could be an issue if storing,
                        say, a large request body in a parameter.
                      </p>
                      <p>
                        Notice that the different versions of<br />
                        <code>parse-request</code> only differed in which
                        function<br />
                        they called with the value they computed. If I separate out<br
                        />
                        the computation of that value, and the decision of which<br
                        />
                        function to call I can get code reuse without CPS, and I<br
                        />
                        don’t have long argument lists! This is what my final solution
                        looks like:
                      </p>
                      <div>
                        <pre
                          is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line)
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))

(define (parse-request)
(define (parse-request-line)
(read-request-line))

(do-something (parse-request-line)
(parse-headers)))

(define (parse-response)
(define (parse-response-line)
(read-response-line))

(do-something-different (parse-response-line)
(parse-headers)))</pre>
                      </div>
                      <p>It’s short and sweet, and easy to understand.</p>
                      <p>So let’s recap what I did:</p>
                      <ul>
                        <li>
                          I started with the mutually tail-recursive FSM pattern
                          (that’s a mouthful!)
                        </li>
                        <li>I refactored into continuation-passing style.</li>
                        <li>
                          I separated computation and control, and refactored
                          back to direct style.
                        </li>
                      </ul>
                      <p>
                        So three refactoring (direct style to CPS, separating<br
                        />
                        computation and control, and CPS to direct style), two of<br
                        />
                        which are particular to functional languages, and one<br
                        />
                        pattern. I could do with a better name than<br />
                        “separating computation and control”. If you’re<br />
                        aware of some prior work or can think of a better name do<br
                        />
                        let me know.
                      </p>
                      <p>
                        Although they use different terminology, the programming<br
                        />
                        language theory and software engineering communities have<br
                        />
                        explored a lot of the same ground from different<br />
                        perspectives. Program transformations are pretty much the<br
                        />
                        same thing as refactorings, though the former are often<br
                        />
                        presented in the context of compiler optimisations.&lt;a<br
                        />
                        href=&#8221;http://www.haskell.org/haskellwiki/Research_papers/Functional_pearls&#8221;&gt;Functional<br
                        />
                        Pearls are very similar to design patterns.
                      </p>
                      <p>
                        If you’re a student of software engineering in
                        functional<br />
                        languages it is necessary to familiarise yourself with this<br
                        />
                        literature. This can be difficult. There are no books<br
                        />
                        summarising this literature, as you’ll find for OO<br />
                        languages, and the papers are often terse and are not<br
                        />
                        focused on software engineering. This means they can be<br
                        />
                        difficult to read if you don’t have a background in<br
                        />
                        programming languages, and you have to read between the<br
                        />
                        lines a bit.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Refactoring Functional Programs</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"
                    ><a href="/untyping/page/7/">&laquo; Newer Entries</a></span
                  >
                  <span class="older"
                    ><a href="/untyping/page/9/">Older Entries &raquo;</a></span
                  >
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="search-2" class="widget widget_search">
                  <form
                    role="search"
                    method="get"
                    id="searchform"
                    class="searchform"
                    action="/"
                  >
                    <div>
                      <label class="screen-reader-text" for="s"
                        >Search for:</label
                      >
                      <input type="text" value="" name="s" id="s" />
                      <input type="submit" id="searchsubmit" value="Search" />
                    </div>
                  </form>
                </li>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
                <li id="meta-2" class="widget widget_meta">
                  <h2 class="widgettitle">Meta</h2>
                  <ul>
                    <li><a href="/wp-login.php">Log in</a></li>
                    <li><a href="/feed/">Entries feed</a></li>
                    <li><a href="/comments/feed/">Comments feed</a></li>

                    <li>
                      <a href="https://en-gb.wordpress.org/">WordPress.org</a>
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>

    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
