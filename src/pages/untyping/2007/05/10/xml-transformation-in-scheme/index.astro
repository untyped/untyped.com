---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>XML Transformation in Scheme - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />
  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-194"
              class="post-194 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">10 May 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/05/10/xml-transformation-in-scheme/"
                      rel="bookmark"
                      title="Permanent Link to XML Transformation in Scheme"
                      >XML Transformation in Scheme</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      <a href="http://www.openqa.org/selenium/">Selenium</a> is
                      a tool for testing web applications, the core of which is
                      a Javascript library that controls a web browser. With
                      the <a href="http://www.openqa.org/selenium-ide/"
                        >Selenium IDE</a
                      > you can convert your actions in a web browser into
                      tests, and with the <a
                        href="http://www.openqa.org/selenium-rc/"
                        >Selenium Remote Control</a
                      > you can control a web browser from code. I’ve recently
                      been working on adding Selenium Remote Control bindings to
                      PLT Scheme, which has resulted in a nice and hopefully
                      instructional demonstration of XML transformation in PLT
                      Scheme
                    </p>
                    <p>
                      The Selenium Remote Control is controlled by sending
                      simple messages over HTTP. The format of the messages
                      isn’t important. What is, is that there are a lot of them,
                      and the API is specified in a file called <code
                        >iedoc.xml</code
                      > that comes with Selenium. The Java/Python/Ruby bindings
                      are generated using <a href="http://www.w3.org/Style/XSL/"
                        >XSL</a
                      >. If I was to use XSL I’d have a processing pipeline that
                      uses three languages (XSL, Java, Scheme) which is two more
                      than I’d like. Hence I turned to<a
                        href="http://planet.plt-scheme.org/display.ss?package=webit.plt&owner=jim"
                        >WebIt!</a
                      >, an XML transformation DSL written in Scheme, to create
                      an all Scheme pipeline. The rest of this post wshows the
                      steps I used to transform the Selenium API into Scheme
                      code using WebIt! I think this is interesting in its own
                      right, but also serves as a nice demonstration of the
                      power of macros, which WebIt! makes extensive use of.
                    </p>
                    <p>
                      My first step is to get an idea of the structure of the
                      XML. The bits I’m interested in look like this:
                    </p>
                    <pre
                      is:raw>
&lt;function name="click"&gt;
&lt;param name="locator"&gt;an element locator&lt;/param&gt;
&lt;comment&gt;Clicks on a link, button, checkbox or radio button.
If the click action causes a new page to load (like a link usually
does), call waitForPageToLoad.&lt;/comment&gt;
&lt;/function&gt;</pre>
                    <p>
                      Let’s read in the XML file and extract all the <code
                        >function</code
                      > elements. For this I’ll use SSAX and SXPath:
                    </p>
                    <div>
                      <pre
                        is:raw>
(require
(planet "ssax.ss" ("lizorkin" "ssax.plt" 1))
(only (planet "sxml.ss" ("lizorkin" "sxml.plt" 1)) sxpath))

(define api
(with-input-from-file "iedoc.xml"
(lambda () (ssax:xml-&gt;sxml (current-input-port) '()))))

(define functions
((sxpath '(// function)) api))</pre>
                    </div>
                    <p>
                      Ok, so we have all the functions. Now let’s parse them
                      into a more useful datastructure. Here’s my first attempt:
                    </p>
                    <div>
                      <pre
                        is:raw>
(require (planet "xml.ss" ("jim" "webit.plt" 1 5)))

;; struct function : string (listof string)
(define-struct function (name params))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))
(make-function name (list param-name ...))]))

(map parse-function functions)</pre>
                    </div>
                    <p>
                      The <code>xml-match</code> macro is a pattern matcher for
                      SXML. You specify the “shape” of the SXML, and if the
                      input matches the pattern the following expressions are
                      evaluated:
                    </p>
                    <pre
                      is:raw>
(xml-match value
[(pattern expression <em>...</em>)]<em>...</em>)</pre>
                    <p>The simplified form of a pattern is:</p>
                    <ul>
                      <li>
                        <code>(element <em>...</em>)</code> matches an element
                        with the given name.
                      </li>
                      <li>
                        <code>name: value</code> matches an attribute with the
                        given name and value.
                      </li>
                      <li>
                        <code>,binding</code> binds the value of <code
                          >binding</code
                        > to the given name in the scope of the following
                        expressions.
                      </li>
                      <li>
                        <code>...</code> matches zero or more of the preceeding
                        patterns.
                      </li>
                    </ul>
                    <p>In our example the pattern is:</p>
                    <div>
                      <pre
                        is:raw>
     (function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))</pre>
                    </div>
                    <p>
                      So we’re looking for an element called <code
                        >function</code
                      > with an attribute called <code>name</code> the value of
                      which is bound to <code>name</code>. Then follows zero or
                      more <code>param</code> elements, with attribute <code
                        >name</code
                      >, the value of which is bound to <code>param-name</code>.
                      Finally we expect a <code>comment</code> element which can
                      contain any amount of data. The use of <code>_</code> as
                      the binding name is a common convention to indicate data
                      we don’t care about but must still match to make our
                      pattern complete.
                    </p>
                    <p>I run the code in DrScheme and see the result:</p>
                    <div><em>xml-match: no matching clause found</em></div>
                    <p>
                      Oops. So our pattern isn’t complete. We’ve also seen one
                      flaw of WebIt!: it doesn’t give very good error messages.
                      However we can easily fix this by adding a catch all
                      pattern that raises an error telling us what we failed to
                      match. The code follows. Notice that I’ve also added
                      pretty printing to make the unmatched SXML easier to read.
                    </p>
                    <div>
                      <pre
                        is:raw>
(require (lib "pretty.ss"))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc) ...
(comment ,_ ...))
(make-function name (list param-name ...))]
[,err (let ([op (open-output-string)])
(pretty-print err op)
(error (format "Didn't match ~n~a~n" (get-output-string op))))]))</pre>
                    </div>
                    <p>
                      Run this code and you’ll see the error occurs as we don’t
                      allow the description to contain more than one element.
                      This is easily fixed by extending the pattern to <code
                        >,desc ...</code
                      >. The next error is more interesting. The <code
                        >function</code
                      > element contains a <code>return</code> element. The
                      WebIt! pattern language doesn’t allows us to express
                      optional patterns, so we have to duplicate our pattern and
                      include the case of<code>return</code>. This also requires
                      we extend the defintion of the <code>function</code
                      >structure.
                    </p>
                    <div>
                      <pre
                        is:raw>
;; struct function : string string (listof string)
(define-struct function (name return params))

;; parse-function : sxml -&gt; function
(define (parse-function fn)
(xml-match fn
[(function name: ,name
(param name: ,param-name ,desc ...) ...
(comment ,_ ...))
(make-function name "void" (list param-name ...))]
[(function name: ,name
(return type: ,type ,return-desc ...)
(param name: ,param-name ,desc ...) ...
(comment ,_ ...))
(make-function name type (list param-name ...))]
[,err (let ([op (open-output-string)])
(pretty-print err op)
(error (format "Didn't match ~n~a~n" (get-output-string op))))]))</pre>
                    </div>
                    <p>
                      This works! This is as far as I want to go in this
                      article. We’ve seen how we can use SSAX. SXPath, and
                      WebIt! to create XML transforms in pure Scheme. There is a
                      lot more to all of these packages but what we’ve used is
                      sufficient for many uses. The rest of the code to create
                      Scheme from the API is quite straightforward and specific
                      to Selenium. If you’re curious read the source of the
                      Selenium PLaneT package, which will be released soon.
                    </p>
                    <p>
                      <em
                        >This post also appears on the <a
                          href="http://blog.plt-scheme.org/">PLT Scheme Blog</a
                        ></em
                      >
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on XML Transformation in Scheme</span
                      ></span
                    >
                  </p>

                  <p class="postmetadata alt">
                    <small>
                      This entry was posted on Thursday, May 10th, 2007 at 9:23
                      pm and is filed under
                      <a href="/untyping/category/code/" rel="category tag"
                        >Code</a
                      >. You can follow any responses to this entry through the
                      <a
                        href="/untyping/2007/05/10/xml-transformation-in-scheme/feed/"
                        >RSS 2.0</a
                      >
                      feed. Both comments and pings are currently closed.
                    </small>
                  </p>

                  <!-- You can start editing here. -->

                  <!-- If comments are closed. -->
                  <p class="nocomments">Comments are closed.</p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer">&laquo; Newer Entry</span>
                  <span class="older">Older Entry &raquo;</span>
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li><a href="/untyping/2007/08/">August 2007</a></li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>

    <script
      type="text/javascript"
      src="/wp-includes/js/comment-reply.min.js?ver=6.6.2"
      id="comment-reply-js"
      async="async"
      data-wp-strategy="async"></script>
  </body>
</html>
