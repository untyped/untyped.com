---
import Footer from "@components/Footer.astro";
---

<!doctype html>
<html id="untyping" lang="en">
  <head>
    <title>August - 2007 - Untyping</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link rel="stylesheet" type="text/css" href="/styles/screen.css" />


    </style>

  </head>

  <body class="myna" data-goal="load">
    <header id="top">
      <div class="container">
        <div class="row">
          <div class="span5 offset7">
            <div class="overlay title">
              <a href="/untyping">
                <h1>
                  <img src="/styles/images/untyping-logo.png" alt="Untyping" />
                </h1>
                <span class="strapline">The Untyped Weblog.</span>
              </a>
            </div>

            <div class="overlay about">
              Read on or <a href="/">return home.</a>
            </div>
          </div>
        </div>
      </div>

      <div class="shadow bottom"></div>
    </header>

    <div id="navbar-wrapper">
      <nav id="navbar" class="navbar">
        <div class="navbar-inner">
          <div class="container">
            <ul class="nav">
              <li><a href="/#top">Home</a></li>
              <li><a href="/untyping">Weblog</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <div class="shadow-wrapper">
      <div class="shadow top light"></div>

      <div class="container">
        <h1 class="pagetitle">Archive for August, 2007</h1>

        <div class="row">
          <div id="blog" class="span10">
            <section
              id="post-171"
              class="post-171 post type-post status-publish format-standard hentry category-code category-fun"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">23 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/23/as-recently-seen-on-the-untyped-subversion-commit-list/"
                      rel="bookmark"
                      title="Permanent Link to As recently seen on the Untyped Subversion commit list…"
                      >As recently seen on the Untyped Subversion commit list…</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I personally watch commits go by for several projects, and
                      it is instructive in many ways to read the commit messages
                      and code. It is a way to learn new things about the
                      software process as well as the implementation of
                      solutions in code. That said, very occasionally, you
                      actually get a giggle from the process…
                    </p>
                    <p>Today was one of those times.</p>
                    <pre
                      is:raw>
Date: 2007-08-22 12:22:06 +0100 (Wed, 22 Aug 2007)
New Revision: 1398
Log:
[DJG] IDCheck trunk:

Tests tests tests.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:41:46 +0100 (Wed, 22 Aug 2007)
New Revision: 1399
Log:
[DJG+NHW] IDCheck trunk:

Testing all the way.</pre>
                    <pre
                      is:raw>
Date: 2007-08-22 12:49:21 +0100 (Wed, 22 Aug 2007)
New Revision: 1400
Log:
[NHW+DJG] IDCheck trunk:

Oh what fun it is to ride on a one horse testing sleigh.</pre>
                    <p>
                      The song ends there, I’m afraid… but it does seem like
                      Dave and Noel are a bit cracked out today. Perhaps they
                      should be out playing frisbee instead of coding this fine
                      Thursday. As I’m not in the same timezone, it’s difficult
                      to say what’s going on over there…
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >,
                    <a href="/untyping/category/fun/" rel="category tag">Fun</a>
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on As recently seen on the Untyped Subversion commit
                        list…</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-173"
              class="post-173 post type-post status-publish format-standard hentry category-general"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">21 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/21/s3-doesnt-count-the-pennies-yet/"
                      rel="bookmark"
                      title="Permanent Link to S3 Doesn’t Count the Pennies (Yet)"
                      >S3 Doesn’t Count the Pennies (Yet)</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      I use Amazon S3 as an off-site backup for data on my
                      desktop<br />
                      computer. S3 has two principle advantages: there’s no upper
                      limit on<br />
                      the amount of data you can transmit or store, and it’s very
                      cheap…<br />
                      sometimes a little too cheap.
                    </p>
                    <p>
                      Two days ago I received an auto-generated warning from S3
                      about my<br />
                      account status:
                    </p>
                    <blockquote>
                      <p>Greetings from Amazon Web Services,</p>
                      <p>
                        AWS was unable to charge your account based on the
                        payment<br />
                        information you provided. Please update your payment method<br
                        />
                        information using the Your Web Services Account section of
                        the AWS web<br />
                        site.
                      </p>
                      <p>Sincerely,</p>
                      <p>Amazon Web Services</p>
                    </blockquote>
                    <p>
                      There were a few extra details in there that convinced me
                      that this<br />
                      wasn’t spam, but that was the gist of it. I logged on to my
                      account to<br />
                      find that my balance was a whopping $0.01. A single cent!
                    </p>
                    <p>
                      I checked my credit card details and they seemed to be
                      okay. I<br />
                      re-entered them to be on the safe side, and then emailed AWS
                      asking<br />
                      them to re-try the payment and let me know if it failed again.
                      I<br />
                      received this response:
                    </p>
                    <blockquote>
                      <p>
                        Thank you for contacting AWS regarding the payment issue
                        related to<br />
                        your August 1st bill. We have found that some credit card
                        issuers<br />
                        decline charges of $0.01 (USD), especially when the amount
                        is<br />
                        converted to another currency. AWS is working on a solution
                        for this<br />
                        issue. In the meantime, please contact AWS<br />
                        directly at webservices@amazon.com if this issue should occur
                        again.
                      </p>
                      <p>
                        The $0.01 (USD) charge on your August 1st bill has been
                        forgiven,<br />
                        and your account is in good standing.
                      </p>
                    </blockquote>
                    <p>
                      A month’s backups, totally free of charge – <em>that’s</em
                      > value<br />
                      for money. I shall be recommending S3 to all my friends.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/general/" rel="category tag"
                      >General</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on S3 Doesn’t Count the Pennies (Yet)</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-175"
              class="post-175 post type-post status-publish format-standard hentry category-code"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">6 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/06/refactoring-functional-programs/"
                      rel="bookmark"
                      title="Permanent Link to Refactoring Functional Programs"
                      >Refactoring Functional Programs</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      A little while ago we&lt;a<br />
                      href=&#8221;http://www.untyped.com/untyping/archives/2007/06/selenium_code_r.html&#8221;&gt;released<br
                      />
                      an interface to Selenium, a web testing framework.<br />
                      Since then we’ve learned that Selenium is simply too slow to<br
                      />
                      use in our work-flow. Hence we started on a faster<br />
                      reimplementation of the Selenium Remote Control.
                    </p>
                    <p>
                      A key part of this system is a proxy server, which is
                      necessary to get around the <a
                        href="http://www.mozilla.org/projects/security/components/same-origin.html"
                        >same origin</a
                      > security restriction in Javascript. I’ve just finished a
                      large refactoring of the proxy code, and I think the
                      experience is interesting enough to warrant a blog post.
                      While there is a <a href="http://www.refactoring.com/"
                        >large</a
                      >
                      <a href="https://netfiles.uiuc.edu/dig/RefactoringInfo/"
                        >literature</a
                      > on refactoring object-oriented programs, there is rather
                      less on <a
                        href="http://www.cs.kent.ac.uk/projects/refactor-fp/"
                        >refactoring functional programs</a
                      >, and what there is tends to concentrate on program
                      transformation tools (long a FP strength) at the expense
                      of collecting useful FP refactorings. This post is a small
                      contribution to redressing the balance.
                    </p>
                    <p>
                      The code I spent most time on was the HTTP parser. It is
                      structured as a state machine, so the initial version used
                      the classic FP pattern of<a
                        href="http://www.cs.brown.edu/~sk/Publications/Papers/Published/sk-automata-macros/"
                        >mutually tail recursive functions</a
                      >. The code for parsing an HTTP request looked something
                      like this:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define request-line #f)
(define headers #f)

(define (parse-request-line)
(set! request-line (read-request-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-request-line))</pre>
                    </div>
                    <p>
                      The code for parsing an HTTP response was very similar:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-response)
(define response-line #f)
(define headers #f)

(define (parse-response-line)
(set! response-line (read-response-line))
(parse-headers))

(define (parse-headers)
(let ([line (read-line)])
(if (end-of-input line)
(begin (set! headers (reverse headers))
(do-something-different))
(begin (set! headers (cons line headers))
(parse-headers)))))

(parse-response-line))</pre>
                    </div>
                    <p>
                      The real code was several screens long. I wanted to make
                      it<br />
                      simpler by changing to a functional style, and reusing<br
                      />
                      common code between the request and response parsing<br />
                      functions. Converting to functional style is simple:
                    </p>
                    <div>
                      <pre
                        is:raw>
(define (parse-request)
(define (parse-request-line)
(define request-line (read-request-line))
(parse-headers request-line))

(define (parse-headers request-line)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(do-something request-line headers))

(parse-request-line))</pre>
                    </div>
                    <p>
                      Reusing common code is not simple. The finite state
                      machine<br />
                      pattern doesn’t abstract the next state. For example<br />
                      <code>parse-headers</code> in <code>parse-request</code
                      ><br />
                      always calls <code>do-something</code> whereas the
                      otherwise<br />
                      identical version in <code>parse-response</code> calls<br
                      />
                      <code>do-something-different</code>.
                    </p>
                    <p>
                      I solved this by refactoring the code into&lt;a<br />
                      href=&#8221;http://library.readscheme.org/page6.html&#8221;&gt;continuation-passing<br
                      />
                      style, leading to code that looks like the following:
                    </p>
                    <div>
                      <pre
                        is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line k)
(define headers
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))
(k request-line headers))

(define (parse-request)
(define (parse-request-line k)
(define request-line (read-request-line))
(k request-line))

(parse-request-line
(cut parse-headers &lt;&gt; do-something)))</pre>
                      <p>
                        Note that I’ve used &lt;a<br />
                        href=&#8221;http://srfi.schemers.org/srfi-26/srfi-26.html&#8221;&gt;cut<br
                        />
                        as a short-cut for <code>lambda</code>.
                      </p>
                      <p>
                        I’ve got code reuse but the code itself isn’t nice. The<br
                        />
                        arguments lists were quite a bit longer in the real code
                        and<br />
                        most of the time arguments are just passed from function
                        to<br />
                        function without being used (I’ve seen these sort of<br
                        />
                        arguments called “tramp data”). I also find<br />
                        that CPSed code can be quite difficult to read — you<br
                        />
                        have to construct the control flow graph in your head and<br
                        />
                        then look at the application site to fill in all the<br
                        />
                        continuations. Ugh.
                      </p>
                      <p>
                        One way to get rid of tramp data is to use <code
                          >parameters</code
                        >, and this something we talk about in our <a
                          href="http://www.untyped.com/untyping/archives/2007/08/a_scheme_case_s_1.html"
                          >experience report</a
                        >. However that solution isn’t appropriate here. It
                        forces me to stick with CPS so I can set the parameters
                        in the dynamic extent of the succeeding code, and it
                        extends the lifetime of the values beyond what is
                        strictly necessary. This could be an issue if storing,
                        say, a large request body in a parameter.
                      </p>
                      <p>
                        Notice that the different versions of<br />
                        <code>parse-request</code> only differed in which
                        function<br />
                        they called with the value they computed. If I separate out<br
                        />
                        the computation of that value, and the decision of which<br
                        />
                        function to call I can get code reuse without CPS, and I<br
                        />
                        don’t have long argument lists! This is what my final solution
                        looks like:
                      </p>
                      <div>
                        <pre
                          is:raw>
;; shared between parse-request and parse-response
(define (parse-headers request-line)
(let loop ([line (read-line)])
(if (end-of-input line)
null
(cons line (loop (read-line))))))

(define (parse-request)
(define (parse-request-line)
(read-request-line))

(do-something (parse-request-line)
(parse-headers)))

(define (parse-response)
(define (parse-response-line)
(read-response-line))

(do-something-different (parse-response-line)
(parse-headers)))</pre>
                      </div>
                      <p>It’s short and sweet, and easy to understand.</p>
                      <p>So let’s recap what I did:</p>
                      <ul>
                        <li>
                          I started with the mutually tail-recursive FSM pattern
                          (that’s a mouthful!)
                        </li>
                        <li>I refactored into continuation-passing style.</li>
                        <li>
                          I separated computation and control, and refactored
                          back to direct style.
                        </li>
                      </ul>
                      <p>
                        So three refactoring (direct style to CPS, separating<br
                        />
                        computation and control, and CPS to direct style), two of<br
                        />
                        which are particular to functional languages, and one<br
                        />
                        pattern. I could do with a better name than<br />
                        “separating computation and control”. If you’re<br />
                        aware of some prior work or can think of a better name do<br
                        />
                        let me know.
                      </p>
                      <p>
                        Although they use different terminology, the programming<br
                        />
                        language theory and software engineering communities have<br
                        />
                        explored a lot of the same ground from different<br />
                        perspectives. Program transformations are pretty much the<br
                        />
                        same thing as refactorings, though the former are often<br
                        />
                        presented in the context of compiler optimisations.&lt;a<br
                        />
                        href=&#8221;http://www.haskell.org/haskellwiki/Research_papers/Functional_pearls&#8221;&gt;Functional<br
                        />
                        Pearls are very similar to design patterns.
                      </p>
                      <p>
                        If you’re a student of software engineering in
                        functional<br />
                        languages it is necessary to familiarise yourself with this<br
                        />
                        literature. This can be difficult. There are no books<br
                        />
                        summarising this literature, as you’ll find for OO<br />
                        languages, and the papers are often terse and are not<br
                        />
                        focused on software engineering. This means they can be<br
                        />
                        difficult to read if you don’t have a background in<br
                        />
                        programming languages, and you have to read between the<br
                        />
                        lines a bit.
                      </p>
                    </div>
                  </div>

                  <p class="tags">
                    Posted in
                    <a href="/untyping/category/code/" rel="category tag"
                      >Code</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on Refactoring Functional Programs</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <section
              id="post-177"
              class="post-177 post type-post status-publish format-standard hentry category-web-development"
            >
              <div class="row">
                <div class="span2 meta">
                  <p class="date">2 Aug 2007</p>
                  <p class="author">by Noel</p>
                </div>

                <div class="span8">
                  <h2>
                    <a
                      href="/untyping/2007/08/02/a-scheme-case-study/"
                      rel="bookmark"
                      title="Permanent Link to A Scheme Case Study"
                      >A Scheme Case Study</a
                    >
                  </h2>

                  <div class="entry">
                    <p>
                      If you’ve looked at the <a
                        href="http://www.informatik.uni-bonn.de/~ralf/icfp07.html"
                        >ICFP 2007</a
                      > preliminary program you’ll have noticed we’re presenting
                      “Experience Report: Scheme in Commercial Web Application
                      Development”. We submitted the final version of the paper
                      a couple of weeks ago, and I’ve finally got around to
                      putting it<a href="/downloads/icfp068-welsh.pdf">online</a
                      > for your reading pleasure. The contents shouldn’t come
                      as a surprise: a summary of our experiences developing
                      commercial web applications in PLT Scheme over the last
                      year. We’ve tried to be honest, including the good and
                      bad. Hopefully the points you’ll take away are that we’ve
                      been able to overcome initial problems with stability, and
                      in a fairly short time we’ve developed a framework that
                      compares well to popular alternatives such as Ruby on
                      Rails.
                    </p>
                    <p>
                      The four page limit on experience reports is very tight,
                      and unfortunately our experiences with <a
                        href="http://www.flapjax-lang.org/">Flapjax</a
                      > were cut from the final version. So let me say here that
                      if you write Javascript code you need to check out
                      Flapjax! Our Flapjax code is about half the size of the
                      equivalent Javascript, and this is without using the
                      Flapjax compiler. The only problem with Flapjax is
                      performance in large networks. This is more a property of
                      the poor quality of Javascript interpreters: Wolfenstein
                      3D on my 286 back in 1990-something was smoother than <a
                        href="http://developer.mozilla.org/samples/raycaster/RayCaster.html"
                        >Javascript raycaster</a
                      > running today on my Powerbook. Luckily the new
                      developments taking place at Mozilla will alleviate this
                      problem in the next few years.
                    </p>
                  </div>

                  <p class="tags">
                    Posted in
                    <a
                      href="/untyping/category/web-development/"
                      rel="category tag">Web development</a
                    >
                    |
                    <span
                      >Comments Off<span class="screen-reader-text">
                        on A Scheme Case Study</span
                      ></span
                    >
                  </p>
                </div>
              </div>
            </section>

            <nav>
              <div class="row">
                <div class="span8 offset2">
                  <span class="newer"></span>
                  <span class="older"></span>
                  <div class="clear"></div>
                </div>
              </div>
            </nav>
          </div>
          <div class="span2">
            <div id="sidebar" class="small column two-of-two width300">
              <ul>
                <li id="recent-posts-2" class="widget widget_recent_entries">
                  <h2 class="widgettitle">Recent Posts</h2>
                  <ul>
                    <li>
                      <a
                        href="/untyping/2013/08/07/writing-documentation-using-grunt-and-jekyll/"
                        >Writing Documentation using Grunt and Jekyll</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/10/19/meanwhile-at-untyped-hq/"
                        >Meanwhile, at Untyped HQ&#8230;</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2012/08/28/new-site/">New site</a>
                    </li>
                    <li>
                      <a
                        href="/untyping/2012/06/06/myna-for-wordpress-available-now/"
                        >Myna for WordPress available now!</a
                      >
                    </li>
                    <li>
                      <a href="/untyping/2011/10/20/the-circus-is-in-town/"
                        >The Circus is in Town</a
                      >
                    </li>
                  </ul>
                </li>
                <li
                  id="recent-comments-2"
                  class="widget widget_recent_comments"
                >
                  <h2 class="widgettitle">Recent Comments</h2>
                  <ul id="recentcomments"></ul>
                </li>
                <li id="archives-2" class="widget widget_archive">
                  <h2 class="widgettitle">Archives</h2>
                  <ul>
                    <li><a href="/untyping/2013/08/">August 2013</a></li>
                    <li><a href="/untyping/2012/10/">October 2012</a></li>
                    <li><a href="/untyping/2012/08/">August 2012</a></li>
                    <li><a href="/untyping/2012/06/">June 2012</a></li>
                    <li><a href="/untyping/2011/10/">October 2011</a></li>
                    <li><a href="/untyping/2011/09/">September 2011</a></li>
                    <li><a href="/untyping/2011/08/">August 2011</a></li>
                    <li><a href="/untyping/2011/05/">May 2011</a></li>
                    <li><a href="/untyping/2011/03/">March 2011</a></li>
                    <li><a href="/untyping/2011/02/">February 2011</a></li>
                    <li><a href="/untyping/2011/01/">January 2011</a></li>
                    <li><a href="/untyping/2010/12/">December 2010</a></li>
                    <li><a href="/untyping/2010/11/">November 2010</a></li>
                    <li><a href="/untyping/2010/10/">October 2010</a></li>
                    <li><a href="/untyping/2010/07/">July 2010</a></li>
                    <li><a href="/untyping/2010/06/">June 2010</a></li>
                    <li><a href="/untyping/2010/05/">May 2010</a></li>
                    <li><a href="/untyping/2010/04/">April 2010</a></li>
                    <li><a href="/untyping/2010/03/">March 2010</a></li>
                    <li><a href="/untyping/2010/02/">February 2010</a></li>
                    <li><a href="/untyping/2010/01/">January 2010</a></li>
                    <li><a href="/untyping/2009/07/">July 2009</a></li>
                    <li><a href="/untyping/2009/06/">June 2009</a></li>
                    <li><a href="/untyping/2009/04/">April 2009</a></li>
                    <li><a href="/untyping/2009/03/">March 2009</a></li>
                    <li><a href="/untyping/2009/01/">January 2009</a></li>
                    <li><a href="/untyping/2008/11/">November 2008</a></li>
                    <li><a href="/untyping/2008/10/">October 2008</a></li>
                    <li><a href="/untyping/2008/09/">September 2008</a></li>
                    <li><a href="/untyping/2008/08/">August 2008</a></li>
                    <li><a href="/untyping/2008/07/">July 2008</a></li>
                    <li><a href="/untyping/2008/06/">June 2008</a></li>
                    <li><a href="/untyping/2008/05/">May 2008</a></li>
                    <li><a href="/untyping/2008/04/">April 2008</a></li>
                    <li><a href="/untyping/2008/03/">March 2008</a></li>
                    <li><a href="/untyping/2008/02/">February 2008</a></li>
                    <li><a href="/untyping/2008/01/">January 2008</a></li>
                    <li><a href="/untyping/2007/12/">December 2007</a></li>
                    <li><a href="/untyping/2007/11/">November 2007</a></li>
                    <li><a href="/untyping/2007/10/">October 2007</a></li>
                    <li><a href="/untyping/2007/09/">September 2007</a></li>
                    <li>
                      <a href="/untyping/2007/08/" aria-current="page"
                        >August 2007</a
                      >
                    </li>
                    <li><a href="/untyping/2007/07/">July 2007</a></li>
                    <li><a href="/untyping/2007/06/">June 2007</a></li>
                    <li><a href="/untyping/2007/05/">May 2007</a></li>
                    <li><a href="/untyping/2007/04/">April 2007</a></li>
                    <li><a href="/untyping/2007/03/">March 2007</a></li>
                    <li><a href="/untyping/2007/02/">February 2007</a></li>
                    <li><a href="/untyping/2007/01/">January 2007</a></li>
                    <li><a href="/untyping/2006/12/">December 2006</a></li>
                    <li><a href="/untyping/2006/11/">November 2006</a></li>
                    <li><a href="/untyping/2006/10/">October 2006</a></li>
                    <li><a href="/untyping/2006/09/">September 2006</a></li>
                    <li><a href="/untyping/2006/08/">August 2006</a></li>
                    <li><a href="/untyping/2006/07/">July 2006</a></li>
                    <li><a href="/untyping/2006/06/">June 2006</a></li>
                    <li><a href="/untyping/2006/05/">May 2006</a></li>
                    <li><a href="/untyping/2006/04/">April 2006</a></li>
                    <li><a href="/untyping/2006/03/">March 2006</a></li>
                    <li><a href="/untyping/2006/02/">February 2006</a></li>
                    <li><a href="/untyping/2006/01/">January 2006</a></li>
                    <li><a href="/untyping/2005/12/">December 2005</a></li>
                    <li><a href="/untyping/2005/11/">November 2005</a></li>
                    <li><a href="/untyping/2005/10/">October 2005</a></li>
                    <li><a href="/untyping/2005/09/">September 2005</a></li>
                    <li><a href="/untyping/2005/08/">August 2005</a></li>
                    <li><a href="/untyping/2005/07/">July 2005</a></li>
                    <li><a href="/untyping/2005/06/">June 2005</a></li>
                    <li><a href="/untyping/2005/05/">May 2005</a></li>
                    <li><a href="/untyping/2005/04/">April 2005</a></li>
                  </ul>
                </li>
                <li id="categories-2" class="widget widget_categories">
                  <h2 class="widgettitle">Categories</h2>
                  <ul>
                    <li class="cat-item cat-item-10">
                      <a href="/untyping/category/business/">Business</a>
                    </li>
                    <li class="cat-item cat-item-7">
                      <a href="/untyping/category/code/">Code</a>
                    </li>
                    <li class="cat-item cat-item-11">
                      <a href="/untyping/category/design/">Design</a>
                    </li>
                    <li class="cat-item cat-item-3">
                      <a href="/untyping/category/front-page/">Front page</a>
                    </li>
                    <li class="cat-item cat-item-9">
                      <a href="/untyping/category/fun/">Fun</a>
                    </li>
                    <li class="cat-item cat-item-6">
                      <a href="/untyping/category/functional-programming/"
                        >Functional Programming</a
                      >
                    </li>
                    <li class="cat-item cat-item-1">
                      <a href="/untyping/category/general/">General</a>
                    </li>
                    <li class="cat-item cat-item-12">
                      <a href="/untyping/category/javascript/">Javascript</a>
                    </li>
                    <li class="cat-item cat-item-14">
                      <a href="/untyping/category/kahu/">Kahu</a>
                    </li>
                    <li class="cat-item cat-item-4">
                      <a href="/untyping/category/myna/">Myna</a>
                    </li>
                    <li class="cat-item cat-item-13">
                      <a href="/untyping/category/racket/">Racket</a>
                    </li>
                    <li class="cat-item cat-item-8">
                      <a href="/untyping/category/scala/">Scala</a>
                    </li>
                    <li class="cat-item cat-item-5">
                      <a href="/untyping/category/web-development/"
                        >Web development</a
                      >
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <Footer />
    <script
      src="http://www.google-analytics.com/urchin.js"
      type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-183641-1";
      urchinTracker();
    </script>
    <script is:inline src="//code.jquery.com/jquery-1.8.0.min.js"></script>
    <script is:inline src="/scripts/untyped.js"></script>
  </body>
</html>
